{"version":3,"file":"static/js/9139.7104d598.chunk.js","mappings":"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","sources":["components/ShadowInput.js","components/ShadowPhone.js","components/ShadowSearch.js","components/svg/EyeClosedIcon.js","components/svg/EyeOpenIcon.js","components/svg/SearchIcon.js","constants/Colors.js","components/svg/UploadIcon.js","components/ShadowUpload.js","pages/private/signatures/AddSignature.js","store/actions/signatures.js"],"sourcesContent":["import React, { useState } from \"react\";\r\nimport { Input, FormControl } from \"native-base\";\r\nimport { Controller } from \"react-hook-form\";\r\nimport Util from \"../util\";\r\nconst { vw, vh } = Util;\r\n\r\nconst ShadowInput = React.forwardRef((props, ref) => {\r\n  return (\r\n    <FormControl\r\n      isRequired={props.isRequired}\r\n      isInvalid={props.invalid}\r\n      isReadOnly={props.isReadOnly || false}\r\n      style={{\r\n        height: vh(48),\r\n        ...props.style,\r\n      }}\r\n    >\r\n      {props.label && (\r\n        <FormControl.Label\r\n          style={{\r\n            fontSize: vw(13),\r\n            fontFamily: \"Poppins_medium\",\r\n            color: props.invalid ? \"red.500\" : \"rgba(102, 102, 102, 0.7)\",\r\n            height: vh(19),\r\n            ...props.labelstyle,\r\n          }}\r\n        >\r\n          {props.label}\r\n        </FormControl.Label>\r\n      )}\r\n\r\n      <Controller\r\n        control={props.control}\r\n        rules={props.rules}\r\n        name={props.name}\r\n        style={{\r\n          zIndex: 1,\r\n        }}\r\n        render={({ field: { onChange, onBlur, value } }) => (\r\n          <Input\r\n            isReadOnly={props.isReadOnly || false}\r\n            ref={ref}\r\n            size={props.size || \"lg\"}\r\n            multiline={props.multiline || false}\r\n            numberOfLines={props.numberOfLines || 1}\r\n            minLength={props.minLength || 1}\r\n            maxLength={props.maxLength || 255}\r\n            isInvalid={props.invalid}\r\n            autoComplete='off'\r\n            autoFocus={props.autoFocus || false}\r\n            type={props.type || \"text\"}\r\n            onSubmitEditing={props.onSubmitEditing}\r\n            onKeyPress={props.onKeyPress}\r\n            onChangeText={(value) => {\r\n              onChange(value);\r\n              if (props.onChangeText) {\r\n                props.onChangeText();\r\n              }\r\n            }}\r\n            value={value || \"\"}\r\n            variant={\"outline\"}\r\n            invalidOutlineColor={\"red.300\"}\r\n            focusOutlineColor={\"rgba(0, 0, 0, 0.15)\"}\r\n            _invalid={{\r\n              borderColor: \"red.300\",\r\n              borderWidth: \"1\",\r\n            }}\r\n            _light={{\r\n              borderWidth: \"1\",\r\n            }}\r\n            _dark={{\r\n              borderWidth: \"1\",\r\n            }}\r\n            _web={{\r\n              borderWidth: \"1\",\r\n            }}\r\n            style={{\r\n              fontSize: vw(15),\r\n              fontFamily: \"Poppins_medium\",\r\n              backgroundColor: \"white\",\r\n              zIndex: 1,\r\n              height: props.height || vh(36),\r\n            }}\r\n            InputLeftElement={props.leftIcon || null}\r\n            InputRightElement={props.rightIcon || null}\r\n            placeholder={props.placeholder}\r\n          />\r\n        )}\r\n      />\r\n      <FormControl.ErrorMessage style={{ marginTop: vh(-3) }}>\r\n        {props.error}\r\n      </FormControl.ErrorMessage>\r\n      <FormControl.HelperText style={{ marginTop: vh(-3) }}>\r\n        {props.help}\r\n      </FormControl.HelperText>\r\n    </FormControl>\r\n  );\r\n});\r\n\r\nexport default ShadowInput;\r\n","import React, { useRef } from \"react\";\r\nimport { FormControl } from \"native-base\";\r\nimport { Controller } from \"react-hook-form\";\r\nimport PhoneInput from \"react-phone-input-2\";\r\nimport {\r\n  isPossiblePhoneNumber,\r\n  isValidPhoneNumber,\r\n  validatePhoneNumberLength,\r\n} from \"libphonenumber-js\";\r\n\r\nimport Util from \"../util\";\r\n\r\nconst { vw, vh } = Util;\r\n\r\nconst ShadowPhone = React.forwardRef((props, ref) => {\r\n  const intl = useRef();\r\n  return (\r\n    <FormControl\r\n      isRequired={props.isRequired}\r\n      isInvalid={props.invalid}\r\n      isReadOnly={props.isReadOnly}\r\n      style={{\r\n        height: vh(48),\r\n        ...props.style,\r\n      }}\r\n    >\r\n      {props.label && (\r\n        <FormControl.Label\r\n          style={{\r\n            fontSize: vw(13),\r\n            fontFamily: \"Poppins_medium\",\r\n            color: props.invalid ? \"red.500\" : \"rgba(102, 102, 102, 0.7)\",\r\n            height: vh(19),\r\n          }}\r\n        >\r\n          {props.label}\r\n        </FormControl.Label>\r\n      )}\r\n\r\n      <Controller\r\n        style={{\r\n          zIndex: 99999,\r\n        }}\r\n        control={props.control}\r\n        rules={{\r\n          ...props.rules,\r\n          validate: (value) => {\r\n            return (\r\n              isValidPhoneNumber(value, \"US\") || \"Enter a valid phone number\"\r\n            );\r\n          },\r\n          // pattern: {\r\n          //   value:\r\n          //     // /^((\\+1|1)?( |-)?)?(\\([2-9][0-9]{2}\\)|[2-9][0-9]{2})( |-)?([2-9][0-9]{2}( |-)?[0-9]{4})$/,\r\n          //     /^[\\+]?[(]?[0-9]{3}[)]?[-\\s\\.]?[0-9]{3}[-\\s\\.]?[0-9]{6}$/im,\r\n          //   message: \"Enter a valid phone number\",\r\n          // },\r\n        }}\r\n        name={props.name}\r\n        render={({ field: { onChange, onBlur, value } }) => (\r\n          <PhoneInput\r\n            ref={intl}\r\n            inputProps={{\r\n              ref,\r\n              name:\"tel\",\r\n              disabled: props.isReadOnly,\r\n              // onKeyPress:props.onKeyPress\r\n            }}\r\n            country={\"us\"}\r\n            value={value}\r\n            onChange={onChange}\r\n            onKeyDown={props.onKeyPress}\r\n            containerStyle={{\r\n              zIndex: 999999,\r\n            }}\r\n            dropdownStyle={{\r\n              zIndex: 999999,\r\n              position: \"absolute\",\r\n              height: vh(100),\r\n            }}\r\n            inputStyle={{\r\n              fontSize: vw(15),\r\n              fontFamily: \"Poppins_medium\",\r\n              backgroundColor: \"white\",\r\n              height: vh(37.8),\r\n              width: \"100%\",\r\n              marginTop: vh(1),\r\n            }}\r\n          />\r\n        )}\r\n      />\r\n      <FormControl.ErrorMessage style={{ marginTop: vh(-3) }}>\r\n        {props.error}\r\n      </FormControl.ErrorMessage>\r\n      <FormControl.HelperText style={{ marginTop: vh(-3) }}>\r\n        {props.help}\r\n      </FormControl.HelperText>\r\n    </FormControl>\r\n  );\r\n});\r\n\r\nexport default ShadowPhone;\r\n","import React, { useState, useEffect, useRef } from \"react\";\r\nimport {\r\n  Center,\r\n  VStack,\r\n  HStack,\r\n  Text,\r\n  Input,\r\n  Divider,\r\n  Pressable,\r\n} from \"native-base\";\r\nimport _ from \"lodash\";\r\n\r\nimport SearchIcon from \"./svg/SearchIcon\";\r\nimport CloseIcon from \"./svg/CloseIcon\";\r\nimport Colors from \"../constants/Colors\";\r\nimport { vh, vw } from \"../util\";\r\n\r\nconst GEO_API = \"https://reversegeocode.shadow.properties\";\r\n\r\nconst ShadowSearch = ({ sz, setAddress, setRefresh }) => {\r\n  const spRef = useRef([]);\r\n  const ppRef = useRef([]);\r\n  const sRef = useRef();\r\n  const cRef = useRef();\r\n  let aRef = useRef();\r\n  const [predictions, setPredictions] = useState([]);\r\n  const [search, setSearch] = useState(\"\");\r\n  const [placeId, setPlaceId] = useState(\"\");\r\n\r\n  // handle click outside\r\n  useEffect(() => {\r\n    function handleClickOutside(event) {\r\n      if (sRef.current && !sRef.current.contains(event.target)) {\r\n        if (global.predictions) {\r\n          setPredictions([]);\r\n          setSearch(\"\");\r\n          aRef.current.value = \"\";\r\n          delete global.predictions;\r\n        }\r\n      }\r\n    }\r\n\r\n    // Bind the event listener\r\n    document.addEventListener(\"mousedown\", handleClickOutside);\r\n    return () => {\r\n      // Unbind the event listener on clean up\r\n      document.removeEventListener(\"mousedown\", handleClickOutside);\r\n    };\r\n  }, [sRef]);\r\n\r\n  useEffect(() => {\r\n    let unmounted = false;\r\n    const getLocations = _.debounce(async (loc) => {\r\n      const url = `${GEO_API}/autocomplete`;\r\n      try {\r\n        const result = await fetch(url, {\r\n          method: \"POST\",\r\n          headers: {\r\n            \"Content-Type\": \"application/json\",\r\n            Token: \"AW9054ty6erfgk321\",\r\n          },\r\n          body: JSON.stringify({ input: loc }),\r\n        });\r\n        const json = await result.json();\r\n        global.predictions = json.data;\r\n        setPredictions(json.data);\r\n      } catch (err) {\r\n        console.error(err.message());\r\n      }\r\n    }, 500);\r\n    if (!unmounted) {\r\n      if (search !== \"\") {\r\n        getLocations(search);\r\n      } else {\r\n        setPredictions([]);\r\n      }\r\n    }\r\n    return () => {\r\n      unmounted = true;\r\n    };\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, [search]);\r\n\r\n  useEffect(() => {\r\n    let unmounted = false;\r\n    const getAddress = _.debounce(async (id) => {\r\n      const url = `${GEO_API}/address`;\r\n      try {\r\n        const result = await fetch(url, {\r\n          method: \"POST\",\r\n          headers: {\r\n            \"Content-Type\": \"application/json\",\r\n            Token: \"AW9054ty6erfgk321\",\r\n          },\r\n          body: JSON.stringify({ id }),\r\n        });\r\n        const json = await result.json();\r\n        setRefresh((r) => !r);\r\n        setAddress(json.data);\r\n        aRef.current.value = json.data.ff;\r\n      } catch (err) {\r\n        console.error(err.message());\r\n      }\r\n    }, 500);\r\n    if (!unmounted) {\r\n      if (placeId !== \"\") {\r\n        getAddress(placeId);\r\n      } else {\r\n        setAddress(null);\r\n      }\r\n    }\r\n    return () => {\r\n      unmounted = true;\r\n    };\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, [placeId]);\r\n\r\n  const searchStyle =\r\n    sz === \"md\" || sz === \"lg\" || sz === \"xl\"\r\n      ? {\r\n          marginTop: vh(30),\r\n          width: \"90%\",\r\n          marginLeft: vw(40),\r\n          height: vh(48),\r\n          marginRight: vw(20),\r\n          borderWidth: 0,\r\n          boxShadow: \"0px 3px 6px #0000001A\",\r\n          borderBottomLeftRadius: vh(\r\n            predictions && predictions.length > 0 ? 0 : 50\r\n          ),\r\n          borderBottomRightRadius: vh(\r\n            predictions && predictions.length > 0 ? 0 : 50\r\n          ),\r\n          zIndex: 99999,\r\n        }\r\n      : {\r\n          marginTop: vh(20),\r\n          width: \"99%\",\r\n          // marginLeft: \"5%\",\r\n          height: vh(48),\r\n          boxShadow: \"0px 3px 6px #0000001A\",\r\n          borderBottomLeftRadius: vh(\r\n            predictions && predictions.length > 0 ? 0 : 50\r\n          ),\r\n          borderBottomRightRadius: vh(\r\n            predictions && predictions.length > 0 ? 0 : 50\r\n          ),\r\n          alignSelf: \"center\",\r\n          zIndex: 99999,\r\n        };\r\n  return (\r\n    <VStack\r\n      ref={sRef}\r\n      bg='white'\r\n      borderRadius={predictions && predictions.length > 0 ? 10 : 50}\r\n      style={searchStyle}\r\n      // padding={vh(5)}\r\n    >\r\n      <HStack\r\n        style={{\r\n          // boxShadow: \"0px 3px 6px #0000001A\",\r\n          borderRadius: predictions && predictions.length > 0 ? 10 : 50,\r\n          bg: \"transparent\",\r\n          width: \"100%\",\r\n        }}\r\n        marginTop={vh(2)}\r\n      >\r\n        <Input\r\n          leftElement={\r\n            <Center bg='white' marginLeft={vw(16)}>\r\n              <SearchIcon />\r\n            </Center>\r\n          }\r\n          name='searchlocation'\r\n          id='searchlocation'\r\n          ref={aRef}\r\n          autoComplete='off'\r\n          bg={\"transparent\"}\r\n          width='full'\r\n          style={{\r\n            // width: \"100%\",\r\n            height: vh(45),\r\n            fontSize: vw(15),\r\n            lineHeight: vh(22),\r\n            overflow: \"hidden\",\r\n            fontFamily: \"Poppins_medium\",\r\n            color: \"#989898\",\r\n            borderWidth: 0,\r\n            borderColor: \"white\",\r\n            backgroundColor: \"white\",\r\n          }}\r\n          onKeyPress={(e) => {\r\n            if (\r\n              e.key === \"ArrowDown\" &&\r\n              spRef.current &&\r\n              aRef.current.value !== \"\"\r\n            ) {\r\n              if (!global.sp) {\r\n                global.sp = 0;\r\n              } else if (global.sp === 5) {\r\n                spRef.current[global.sp - 1].style.color = \"#303030\";\r\n                spRef.current[global.sp - 1].style.fontWeight = \"norml\";\r\n                global.sp = 0;\r\n              }\r\n              if (global.sp > 0) {\r\n                spRef.current[global.sp - 1].style.color = \"#303030\";\r\n                spRef.current[global.sp - 1].style.fontWeight = \"normal\";\r\n              }\r\n              spRef.current[global.sp].style.color = Colors.primary;\r\n              spRef.current[global.sp].style.fontWeight = \"bold\";\r\n              global.sp++;\r\n            } else if (\r\n              e.key === \"ArrowUp\" &&\r\n              spRef.current &&\r\n              aRef.current.value !== \"\"\r\n            ) {\r\n              if (!global.sp) {\r\n                global.sp = 0;\r\n              }\r\n\r\n              if (global.sp > 2) {\r\n                spRef.current[global.sp - 1].style.color = \"#303030\";\r\n                spRef.current[global.sp - 1].style.fontWeight = \"normal\";\r\n                spRef.current[global.sp - 2].style.color = Colors.primary;\r\n                spRef.current[global.sp - 2].style.fontWeight = \"bold\";\r\n                global.sp--;\r\n              } else if (global.sp === 1) {\r\n                global.sp = 5;\r\n                spRef.current[0].style.color = \"#303030\";\r\n                spRef.current[0].style.fontWeight = \"normal\";\r\n                spRef.current[global.sp - 1].style.color = Colors.primary;\r\n                spRef.current[global.sp - 1].style.fontWeight = \"bold\";\r\n              } else {\r\n                spRef.current[global.sp - 1].style.color = \"#303030\";\r\n                spRef.current[global.sp - 1].style.fontWeight = \"normal\";\r\n                spRef.current[global.sp - 2].style.color = Colors.primary;\r\n                spRef.current[global.sp - 2].style.fontWeight = \"bold\";\r\n                global.sp--;\r\n              }\r\n            } else if (e.key === \"Enter\" && global.sp) {\r\n              // console.log(\"Pressed\", global.sp);\r\n              ppRef.current[global.sp - 1].click();\r\n            } else if (e.key === \"Tab\") {\r\n              e.preventDefault();\r\n            }\r\n          }}\r\n          _focus={{\r\n            // backgroundColor: \"white\",\r\n            borderColor: \"white\",\r\n          }}\r\n          _hover={{\r\n            // backgroundColor: \"white\",\r\n            borderColor: \"white\",\r\n          }}\r\n          onChangeText={(v) => {\r\n            cRef.current.style.visibility = v !== \"\" ? \"visible\" : \"hidden\";\r\n            setSearch(v);\r\n          }}\r\n          variant='unstyled'\r\n          // rounded={\"full\"}\r\n          // roundedTop={\"full\"}\r\n          placeholder='Search address'\r\n          rightElement={\r\n            <Pressable\r\n              ref={cRef}\r\n              onPress={() => {\r\n                if (search !== \"\") {\r\n                  setPredictions([]);\r\n                }\r\n                aRef.current.value = \"\";\r\n                cRef.current.style.visibility = \"hidden\";\r\n              }}\r\n              style={{\r\n                marginRight: vw(20),\r\n                visibility: \"hidden\",\r\n                marginTop: vh(5),\r\n              }}\r\n            >\r\n              <CloseIcon />\r\n            </Pressable>\r\n          }\r\n        />\r\n      </HStack>\r\n      {predictions && predictions.length > 0 && (\r\n        <VStack\r\n          space={4}\r\n          style={{\r\n            zIndex: 9999,\r\n            width: \"100%\",\r\n            paddingTop: vh(5),\r\n            paddingBottom: vh(20),\r\n            paddingHorizontal: vw(20),\r\n            backgroundColor: \"white\",\r\n            borderBottomLeftRadius: vh(10),\r\n            borderBottomRightRadius: vh(10),\r\n            boxShadow: \"0px 3px 6px #0000001A\",\r\n          }}\r\n        >\r\n          <Divider\r\n            style={{\r\n              alignSelf: \"center\",\r\n              backgroundColor: \"rgba(0,0,0,0.15)\",\r\n              height: vh(1.5),\r\n              width: sz === \"sm\" || sz === \"base\" ? \"100%\" : \"100%\",\r\n            }}\r\n          />\r\n          {predictions &&\r\n            predictions.length > 0 &&\r\n            predictions.map((p, idx) => {\r\n              // const nit = p.address.toLowerCase().split(search);\r\n              // console.log(\"Prediction\",nit[1].length)\r\n              // console.log(p.address.slice(0,nit[1].length))\r\n              // console.log(splitAt(search.length - 1, p.address));\r\n              return (\r\n                <Pressable\r\n                  onHoverIn={() => {\r\n                    spRef.current[idx].style.color = Colors.primary;\r\n                    spRef.current[idx].style.fontWeight = \"bold\";\r\n                  }}\r\n                  onHoverOut={() => {\r\n                    spRef.current[idx].style.color = \"#303030\";\r\n                    spRef.current[idx].style.fontWeight = \"normal\";\r\n                  }}\r\n                  ref={(el) => (ppRef.current[idx] = el)}\r\n                  key={\"pr-\" + p.id}\r\n                  onPress={async () => {\r\n                    setPlaceId(p.id);\r\n                    setPredictions([]);\r\n                  }}\r\n                >\r\n                  <Text\r\n                    style={{\r\n                      fontSize: vw(13),\r\n                      fontFamily: \"Poppins\",\r\n                      color: \"rgba(0,0,0,0.4)\",\r\n                    }}\r\n                  >\r\n                    {/* {search} */}\r\n                    <Text\r\n                      ref={(el) => (spRef.current[idx] = el)}\r\n                      style={{ color: \"#303030\" }}\r\n                    >\r\n                      {p.address}\r\n                    </Text>\r\n                  </Text>\r\n                </Pressable>\r\n              );\r\n            })}\r\n        </VStack>\r\n      )}\r\n    </VStack>\r\n  );\r\n};\r\n\r\nexport default React.memo(ShadowSearch);\r\n","import * as React from \"react\"\r\nimport Svg, { Path } from \"react-native-svg\"\r\n\r\nconst EyeClosedIcon = (props) => (\r\n  <Svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\" width={24} height={24} {...props}>\r\n    <Path data-name=\"Rectangle 287\" fill={\"none\"} d=\"M0 0h24v24H0z\" />\r\n    <Path\r\n      data-name=\"Path 3977\"\r\n      d=\"M16.41 17.272a8.09 8.09 0 0 1-2.11.954 8.252 8.252 0 0 1-2.3.324 8.157 8.157 0 0 1-2.871-.513 8.1 8.1 0 0 1-2.434-1.418 8.287 8.287 0 0 1-1.814-2.146 8.373 8.373 0 0 1-1-2.673 8.17 8.17 0 0 1 .887-2.48 8.094 8.094 0 0 1 1.625-2.066L4.044 4.906l1.062-1.062 14.85 14.85-1.062 1.062ZM7.455 8.308A6.852 6.852 0 0 0 6.168 9.9a6.562 6.562 0 0 0-.747 1.9 6.611 6.611 0 0 0 1.368 2.79 6.678 6.678 0 0 0 2.479 1.881 6.666 6.666 0 0 0 3.06.572 6.687 6.687 0 0 0 2.993-.86l-1.521-1.53a3.277 3.277 0 0 1-1.426.5 3.42 3.42 0 0 1-1.485-.163 3.293 3.293 0 0 1-1.278-.8 3.293 3.293 0 0 1-.8-1.278 3.42 3.42 0 0 1-.167-1.485A3.342 3.342 0 0 1 9.138 10Zm5.229 5.238-2.43-2.43a1.8 1.8 0 0 0-.09 1.066 1.855 1.855 0 0 0 .513.941 1.855 1.855 0 0 0 .94.513 1.8 1.8 0 0 0 1.067-.09Zm5.922 1.7-1.071-1.08a6.6 6.6 0 0 0 1.044-2.366 6.668 6.668 0 0 0-1.125-2.475 6.667 6.667 0 0 0-2.012-1.832 6.691 6.691 0 0 0-2.569-.887 6.66 6.66 0 0 0-2.709.2L8.985 5.617A8.2 8.2 0 0 1 12 5.05a8.157 8.157 0 0 1 2.871.513 8.1 8.1 0 0 1 2.435 1.417 8.287 8.287 0 0 1 1.814 2.147 8.373 8.373 0 0 1 1 2.673 8.488 8.488 0 0 1-.562 1.809 8.41 8.41 0 0 1-.952 1.638Zm-6.813-6.812a3.331 3.331 0 0 1 1.4.211 3.332 3.332 0 0 1 1.193.769 3.332 3.332 0 0 1 .769 1.193 3.331 3.331 0 0 1 .212 1.4Z\"\r\n      opacity={0.5}\r\n    />\r\n  </Svg>\r\n)\r\n\r\nexport default EyeClosedIcon\r\n","import * as React from \"react\";\r\nimport Svg, { Path } from \"react-native-svg\";\r\n\r\nconst EyeOpenIcon = (props) => (\r\n  <Svg\r\n    xmlns='http://www.w3.org/2000/svg'\r\n    width={16.236}\r\n    height={13.5}\r\n    viewBox='0 0 16.236 13.5'\r\n    {...props}\r\n  >\r\n    <Path\r\n      data-name='Path 10193'\r\n      d='M8.118 0a8.157 8.157 0 0 1 2.871.513 8.1 8.1 0 0 1 2.435 1.417 8.287 8.287 0 0 1 1.814 2.147 8.373 8.373 0 0 1 1 2.673 8.1 8.1 0 0 1-1 2.673 8.287 8.287 0 0 1-1.814 2.147 8.1 8.1 0 0 1-2.435 1.417 8.157 8.157 0 0 1-2.871.513 8.157 8.157 0 0 1-2.871-.513 8.1 8.1 0 0 1-2.434-1.418A8.287 8.287 0 0 1 .999 9.423a8.373 8.373 0 0 1-1-2.673 8.1 8.1 0 0 1 1-2.673A8.287 8.287 0 0 1 2.813 1.93 8.1 8.1 0 0 1 5.248.513 8.157 8.157 0 0 1 8.118 0Zm0 12a6.692 6.692 0 0 0 2.952-.675 6.779 6.779 0 0 0 2.313-1.845 6.593 6.593 0 0 0 1.314-2.73 6.665 6.665 0 0 0-1.314-2.727 6.683 6.683 0 0 0-2.313-1.836 6.619 6.619 0 0 0-2.952-.684 6.619 6.619 0 0 0-2.952.684 6.683 6.683 0 0 0-2.313 1.836A6.665 6.665 0 0 0 1.539 6.75a6.593 6.593 0 0 0 1.314 2.727 6.779 6.779 0 0 0 2.313 1.845 6.692 6.692 0 0 0 2.952.675Zm0-1.875a3.3 3.3 0 0 1-1.7-.459A3.369 3.369 0 0 1 5.202 8.45a3.3 3.3 0 0 1-.459-1.7 3.3 3.3 0 0 1 .459-1.7 3.369 3.369 0 0 1 1.216-1.216 3.3 3.3 0 0 1 1.7-.459 3.3 3.3 0 0 1 1.7.459 3.37 3.37 0 0 1 1.216 1.216 3.3 3.3 0 0 1 .459 1.7 3.3 3.3 0 0 1-.459 1.7 3.37 3.37 0 0 1-1.216 1.216 3.3 3.3 0 0 1-1.7.459Zm0-1.5a1.876 1.876 0 0 0 .941-.248 1.784 1.784 0 0 0 .684-.684 1.876 1.876 0 0 0 .248-.941 1.876 1.876 0 0 0-.248-.941 1.784 1.784 0 0 0-.684-.684 1.884 1.884 0 0 0-.941-.249 1.81 1.81 0 0 0-.936.252 1.891 1.891 0 0 0-.68.679 1.818 1.818 0 0 0-.252.941 1.818 1.818 0 0 0 .252.941 1.891 1.891 0 0 0 .68.68 1.818 1.818 0 0 0 .936.251Z'\r\n      opacity={0.5}\r\n    />\r\n  </Svg>\r\n);\r\n\r\nexport default EyeOpenIcon;\r\n","import * as React from \"react\";\r\nimport Svg, { Path } from \"react-native-svg\";\r\nimport { vh, vw } from \"../../util\";\r\n\r\nconst SearchIcon = ({ fill, width, height }) => (\r\n  <Svg\r\n    xmlns='http://www.w3.org/2000/svg'\r\n    viewBox='0 0 24 24'\r\n    width={vw(width||24)}\r\n    height={vh(height || 24)}\r\n  >\r\n    <Path data-name='Rectangle 37' fill='none' d='M0 0h24v24H0z' />\r\n    <Path\r\n      data-name='Path 161'\r\n      d='m17.03 15.85 3.57 3.57-1.18 1.17-3.57-3.56a7.623 7.623 0 0 1-2.205 1.215 7.389 7.389 0 0 1-2.475.425 7.4 7.4 0 0 1-2.92-.59 7.388 7.388 0 0 1-2.385-1.61 7.516 7.516 0 0 1-1.605-2.38 7.457 7.457 0 0 1-.59-2.925 7.385 7.385 0 0 1 .59-2.915 7.427 7.427 0 0 1 1.605-2.385A7.427 7.427 0 0 1 8.25 4.26a7.385 7.385 0 0 1 2.915-.59 7.457 7.457 0 0 1 2.925.59 7.516 7.516 0 0 1 2.38 1.605 7.388 7.388 0 0 1 1.61 2.385 7.4 7.4 0 0 1 .59 2.92 7.389 7.389 0 0 1-.425 2.475 7.623 7.623 0 0 1-1.215 2.205Zm-1.68-.62a5.724 5.724 0 0 0 1.225-1.875A5.8 5.8 0 0 0 17 11.17a5.734 5.734 0 0 0-.46-2.27 5.75 5.75 0 0 0-1.25-1.86 5.78 5.78 0 0 0-1.85-1.25 5.793 5.793 0 0 0-2.275-.46 5.721 5.721 0 0 0-2.265.46 5.75 5.75 0 0 0-1.86 1.25A5.75 5.75 0 0 0 5.79 8.9a5.721 5.721 0 0 0-.46 2.265 5.793 5.793 0 0 0 .46 2.275 5.78 5.78 0 0 0 1.25 1.85 5.75 5.75 0 0 0 1.86 1.25 5.734 5.734 0 0 0 2.27.46 5.8 5.8 0 0 0 2.185-.425 5.724 5.724 0 0 0 1.875-1.225Z'\r\n      fill={fill || \"#686868\"}\r\n    />\r\n  </Svg>\r\n);\r\n\r\nexport default SearchIcon;\r\n","export default {\r\n  primary: 'rgba(125, 43, 233, 1)',\r\n  accent: '#FFC107'\r\n};\r\n","import { upload } from \"@testing-library/user-event/dist/upload\"\r\nimport * as React from \"react\"\r\nimport Svg, { Path } from \"react-native-svg\"\r\n\r\nconst UploadIcon = ({fill, width, height}) => (\r\n  <Svg\r\n    xmlns=\"http://www.w3.org/2000/svg\"\r\n    width={width || 23.063}\r\n    height={height || 16.688}\r\n    viewBox=\"0 0 23.063 16.688\"\r\n    // {...props}\r\n  >\r\n    <Path\r\n      data-name=\"Path 10180\"\r\n      d=\"M12.375 6.563a.9.9 0 0 0-.656-.281.9.9 0 0 0-.656.281L9.188 8.532a.583.583 0 0 0-.187.422.751.751 0 0 0 .188.469.577.577 0 0 0 .469.234.636.636 0 0 0 .469-.187l.938-1.031v3.563a.636.636 0 0 0 .188.469.636.636 0 0 0 .469.188.807.807 0 0 0 .509-.19.577.577 0 0 0 .234-.469V8.438l.938 1.031q.094.188.422.188a.624.624 0 0 0 .516-.234.751.751 0 0 0 .19-.47.583.583 0 0 0-.187-.422Zm8.813-1.312a5.872 5.872 0 0 0-1.781-1.359 10.5 10.5 0 0 0-2.156-.8 6.748 6.748 0 0 0-3.47-2.717A7.078 7.078 0 0 0 11.531 0a6.663 6.663 0 0 0-3.234.844 6.388 6.388 0 0 0-2.437 2.3 6.625 6.625 0 0 0-.984 3.141 5.254 5.254 0 0 0-3.469 1.688 5.032 5.032 0 0 0-1.406 3.563 4.917 4.917 0 0 0 .7 2.578 5.269 5.269 0 0 0 1.924 1.871 5.342 5.342 0 0 0 2.719.7h10.781a6.992 6.992 0 0 0 3.469-.891 6.662 6.662 0 0 0 2.531-2.484 6.72 6.72 0 0 0 .938-3.469 6.748 6.748 0 0 0-.469-2.437 6.134 6.134 0 0 0-1.407-2.154Zm-5.157 10.124H5.344a3.974 3.974 0 0 1-2.86-1.125 3.684 3.684 0 0 1-1.172-2.766 3.684 3.684 0 0 1 1.172-2.766 3.974 3.974 0 0 1 2.86-1.124h.187A.636.636 0 0 0 6 7.407a.636.636 0 0 0 .188-.469v-.469a4.917 4.917 0 0 1 .7-2.578 5.532 5.532 0 0 1 1.969-1.922 5.16 5.16 0 0 1 2.674-.75 4.337 4.337 0 0 1 1.781.375 4.838 4.838 0 0 1 2.906 2.438.91.91 0 0 0 .563.375 5.646 5.646 0 0 1 1.922.516 4.722 4.722 0 0 1 1.547 1.171 5.293 5.293 0 0 1 1.5 3.75A5.327 5.327 0 0 1 21 12.61a5.553 5.553 0 0 1-2.063 2.015 5.754 5.754 0 0 1-2.906.75Z\"\r\n      fill={fill || \"#bfa3e4\"}\r\n    />\r\n  </Svg>\r\n)\r\n\r\nexport default UploadIcon;\r\n","import React, { useRef, useState } from \"react\";\r\nimport {\r\n  FormControl,\r\n  Box,\r\n  Pressable,\r\n  Center,\r\n  Spinner,\r\n  Image,\r\n  VStack,\r\n} from \"native-base\";\r\nimport { CircularProgressbar as ProgressCircle } from \"react-circular-progressbar\";\r\nimport \"react-circular-progressbar/dist/styles.css\";\r\n\r\nimport Util from \"../util\";\r\nimport { CDN, getUser, API_URL } from \"../constants/Config\";\r\nimport Colors from \"../constants/Colors\";\r\nimport UploadIcon from \"./svg/UploadIcon\";\r\nconst { vw, vh } = Util;\r\n\r\nconst ShadowUpload = (props) => {\r\n  const uRef = useRef();\r\n  const [progress, setProgress] = useState(\r\n    props.path && props.path !== \"0\" ? 100 : 0\r\n  );\r\n  const [imgId, setImgId] = useState(props.path || \"0\");\r\n  const [isLoading, setIsLoading] = useState(false);\r\n  const [imageLoading, setImageLoading] = useState(false);\r\n\r\n  const onChangeHandler = async () => {\r\n    const { token, _id } = getUser();\r\n    // var file = uploadFile.current.files[0];\r\n    setProgress(0);\r\n    setIsLoading(true);\r\n    for (const file of uRef.current.files) {\r\n      // Allowed types\r\n      var mime_types = [\"image/jpeg\", \"image/jpg\", \"image/png\"];\r\n\r\n      // Validate MIME type\r\n      if (mime_types.indexOf(file.type) === -1) {\r\n        alert(\"Error : Incorrect file type\");\r\n        return;\r\n      }\r\n\r\n      // Max 2 Mb allowed\r\n      if (file.size > 2000 * 1024 * 1024) {\r\n        alert(\"Error : Exceeded size 2GB\");\r\n        return;\r\n      }\r\n\r\n      var data = new FormData();\r\n\r\n      var request = new XMLHttpRequest();\r\n\r\n      data.append(\"picture\", file);\r\n      data.append(\"_id\", _id);\r\n      data.append(\"default\", true);\r\n\r\n      // AJAX request finished\r\n      request.addEventListener(\"load\", function (e) {\r\n        setIsLoading(false);\r\n      });\r\n\r\n      // Upload progress on request.upload\r\n      request.upload.addEventListener(\"progress\", function (e) {\r\n        var completed = (e.loaded / e.total) * 100;\r\n        setProgress(completed);\r\n        setImageLoading(true);\r\n      });\r\n\r\n      request.onreadystatechange = function () {\r\n        if (this.readyState === 4 && this.status === 200) {\r\n          const result = JSON.parse(this.responseText);\r\n          if (result.success) {\r\n            setImgId(result.data.id);\r\n            props.setPath(result.data.id);\r\n          }\r\n        } else {\r\n          if (this.status > 200) {\r\n            console.log(\"ON-ERROR\", this.readyState, this.status);\r\n            console.log(this.responseText);\r\n            setIsLoading(false);\r\n          }\r\n          // throw new Error(\"something went wrong\");\r\n        }\r\n      };\r\n      // If server is sending a JSON response then set JSON response type\r\n      request.responseType = \"text\";\r\n\r\n      // Send POST request to the server side script\r\n      request.open(\"POST\", `${API_URL}/signatures/upload/images`, true);\r\n      request.setRequestHeader(\"Authorization\", \"Bearer \" + token);\r\n      request.send(data);\r\n    }\r\n    uRef.current.value = \"\";\r\n  };\r\n  return (\r\n    <Box>\r\n      <FormControl mb={4}>\r\n        <FormControl.Label\r\n          _text={{ color: props.error ? \"#d93025\" : \"#4C7AD6\" }}\r\n          my={2}\r\n        >\r\n          {props.label + \" \"}\r\n        </FormControl.Label>\r\n        <VStack flex={1}>\r\n          <input\r\n            ref={uRef}\r\n            accept='image/jpg,image/jpeg,image/png'\r\n            name='imgupload'\r\n            type='file'\r\n            onChange={onChangeHandler}\r\n            style={{ display: \"none\" }}\r\n          />\r\n          <Center style={{ width: vw(64) }}>\r\n            {progress === 0 && imgId === \"0\" && (\r\n              <Pressable\r\n                onPress={() => {\r\n                  setImgId(\"0\");\r\n                  setProgress(0);\r\n                  uRef.current.click();\r\n                }}\r\n              >\r\n                <UploadIcon\r\n                  width={vw(64)}\r\n                  height={vh(48)}\r\n                  fill={Colors.primary}\r\n                />\r\n              </Pressable>\r\n            )}\r\n            {progress === 100 && imgId !== \"0\" && (\r\n              <Pressable\r\n                onPress={() => {\r\n                  uRef.current.click();\r\n                }}\r\n              >\r\n                {isLoading ? (\r\n                  <Center width={vw(80)} height={vh(80)}>\r\n                    <Spinner size={\"sm\"} color={Colors.primary} />\r\n                  </Center>\r\n                ) : (\r\n                  <>\r\n                    <Center\r\n                      style={{ display: imageLoading ? \"flex\" : \"none\" }}\r\n                      width={vw(64)}\r\n                      height={vh(64)}\r\n                    >\r\n                      <Spinner size={\"sm\"} color={Colors.primary} />\r\n                    </Center>\r\n                    <Image\r\n                      alt='Pic'\r\n                      style={{\r\n                        marginLeft: vw(15),\r\n                        display: imageLoading ? \"none\" : \"flex\",\r\n                      }}\r\n                      onLoadEnd={() => {\r\n                        console.log(\"IMAGE-ON-END\");\r\n                        setImageLoading(false);\r\n                      }}\r\n                      width={vw(64)}\r\n                      height={vh(64)}\r\n                      source={{\r\n                        uri: `${CDN}/signatures/${imgId}`,\r\n                      }}\r\n                    />\r\n                  </>\r\n                )}\r\n              </Pressable>\r\n            )}\r\n            {progress > 0 && progress < 100 && (\r\n              <ProgressCircle value={progress} text={`${progress}%`} />\r\n            )}\r\n          </Center>\r\n        </VStack>\r\n      </FormControl>\r\n    </Box>\r\n  );\r\n};\r\n\r\nexport default ShadowUpload;\r\n","/**\r\n *\r\n * Add Signature Screen\r\n * Author:Justin Antony\r\n * last modified on 04/nov/2021\r\n *\r\n */\r\nimport React, { useState, useEffect, useRef } from \"react\";\r\nimport {\r\n  Box,\r\n  Pressable,\r\n  Text,\r\n  VStack,\r\n  Center,\r\n  Spinner,\r\n  HStack,\r\n  Hidden,\r\n} from \"native-base\";\r\nimport { useForm } from \"react-hook-form\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport _ from \"lodash\";\r\n\r\nimport { vw, vh } from \"../../../util\";\r\nimport * as signatureActions from \"../../../store/actions/signatures\";\r\nimport ShadowInput from \"../../../components/ShadowInput\";\r\nimport Colors from \"../../../constants/Colors\";\r\nimport { getUser } from \"../../../constants/Config\";\r\nimport ShadowUpload from \"../../../components/ShadowUpload\";\r\nimport ShadowModal from \"../../../components/ShadowModal\";\r\nimport ShadowSearch from \"../../../components/ShadowSearch\";\r\nimport ShadowPhone from \"../../../components/ShadowPhone\";\r\nimport ShadowButton from \"../../../components/ShadowButton\";\r\nimport EyeClosedIcon from \"../../../components/svg/EyeClosedIcon\";\r\nimport EyeOpenIcon from \"../../../components/svg/EyeOpenIcon\";\r\n\r\nconst AddSignature = ({ isOpen, setIsOpen, _showAlert }) => {\r\n  const dispatch = useDispatch();\r\n  const fRef = useRef([]);\r\n  const currentSignature = useSelector(\r\n    (state) => state.signatures.currentSignature\r\n  );\r\n  const editsmtp = false; // props.route.params?.editsmtp ?? false;\r\n  const redirect = null; //props.route.params?.redirect ?? null;\r\n  const [searchAddress, setSearchAddress] = useState(null);\r\n  const [smtpTest, setSmtpTest] = useState(false);\r\n  const [refresh, setRefresh] = useState(false);\r\n  const [isLoading] = useState(false);\r\n  const [isTesting, setIsTesting] = useState(false);\r\n  const [isSaving, setIsSaving] = useState(false);\r\n  const [showPassword, setShowPassword] = useState(false);\r\n  const [isDeleting, setIsDeleting] = useState(false);\r\n  const onClose = () => setIsOpen(false);\r\n  const [isSmtpOpen, setIsSmtpOpen] = React.useState(false);\r\n  const onSmtpClose = () => setIsSmtpOpen(false);\r\n  const [isAlertOpen, setIsAlertOpen] = React.useState(false);\r\n  const onAlertClose = () => setIsAlertOpen(false);\r\n  const [alertConfig, setAlertConfig] = useState({\r\n    header: \"\",\r\n    desc: \"\",\r\n    nolabel: \"No\",\r\n    yeslabel: \"Yes\",\r\n    yes: () => {},\r\n    no: onAlertClose,\r\n  });\r\n\r\n  const {\r\n    control,\r\n    handleSubmit,\r\n    formState: { errors },\r\n    getValues,\r\n    setValue,\r\n    trigger,\r\n    clearErrors,\r\n  } = useForm({\r\n    mode: \"onChange\",\r\n    defaultValues: _.isEmpty(currentSignature)\r\n      ? {\r\n          label: \"\",\r\n          // signoff: '',\r\n          name: \"\",\r\n          image: \"0\",\r\n          company_logo: \"0\",\r\n          phone: \"\",\r\n          email: \"\",\r\n          website: \"\",\r\n          address1: \"\",\r\n          address2: \"\",\r\n          city: \"\",\r\n          state: \"\",\r\n          zipcode: \"\",\r\n          disclosure: \"\",\r\n          host: \"\",\r\n          port: \"\",\r\n          username: \"\",\r\n          password: \"\",\r\n        }\r\n      : {\r\n          label: currentSignature.label,\r\n          //signoff: currentSignature.signoff,\r\n          name: currentSignature.name,\r\n          image: currentSignature.image,\r\n          // company_logo: currentSignature.image,\r\n          phone: currentSignature.phone,\r\n          email: currentSignature.email,\r\n          website: currentSignature.website,\r\n          address1: currentSignature.address1,\r\n          address2: currentSignature.address2,\r\n          city: currentSignature.city,\r\n          state: currentSignature.state,\r\n          zipcode: currentSignature.zipcode,\r\n          disclosure: currentSignature.disclosure,\r\n          host: currentSignature.smtp ? currentSignature.smtp.host : \"\",\r\n          port: currentSignature.smtp ? currentSignature.smtp.port : \"\",\r\n          username: currentSignature.smtp ? currentSignature.smtp.username : \"\",\r\n          password: currentSignature.smtp ? currentSignature.smtp.password : \"\",\r\n        },\r\n  });\r\n\r\n  useEffect(() => {\r\n    if (isSaving) {\r\n      handleSubmit(checkSmtp, () => {\r\n        _showAlert(\"error\", \"Validation failed. Check your entries.\");\r\n        setIsSaving(false);\r\n      })();\r\n    }\r\n  }, [isSaving, _showAlert, handleSubmit]);\r\n\r\n  useEffect(() => {\r\n    if (refresh && searchAddress && searchAddress[\"shortaddress\"]) {\r\n      const shortaddress = searchAddress[\"shortaddress\"];\r\n      setValue(\"address1\", shortaddress[\"address1\"]);\r\n      trigger(\"address1\");\r\n      setValue(\"address2\", shortaddress[\"address2\"]);\r\n      trigger(\"address2\");\r\n      setValue(\"city\", shortaddress[\"city\"]);\r\n      trigger(\"city\");\r\n      setValue(\"state\", shortaddress[\"state\"]);\r\n      trigger(\"state\");\r\n      setValue(\"zipcode\", shortaddress[\"postcode\"]);\r\n      trigger(\"postcode\");\r\n      setRefresh(false);\r\n    }\r\n  }, [searchAddress, refresh]);\r\n\r\n  const checkSmtp = async (data) => {\r\n    if (smtpTest) {\r\n      const buttons = [];\r\n      const config = {\r\n        header: \"Attention!\",\r\n        desc: \"Test your SMTP using the Test SMTP button before saving your signature\",\r\n        nolabel: \"Test Now\",\r\n        yeslabel: \"\",\r\n        yes: () => {},\r\n        no: async () => {\r\n          await testSmtp(data);\r\n          onClose();\r\n        },\r\n      };\r\n      if (currentSignature && currentSignature._id) {\r\n        if (!currentSignature.templates) {\r\n          // buttons.push({\r\n          //   text: \"Clear SMTP & Save\",\r\n          //   onPress: async () => {\r\n          //     saveHandler({ ...data, clearSmtp: true });\r\n          //   },\r\n          // });\r\n          config.yeslabel = \"Clear SMTP & Save\";\r\n          config.yes = saveHandler({ ...data, clearSmtp: true });\r\n        } else {\r\n          const foundEmail = currentSignature.templates.find(\r\n            (t) => t.templatetype === \"email\"\r\n          );\r\n          if (!foundEmail) {\r\n            // buttons.push({\r\n            //   text: \"Clear SMTP & Save\",\r\n            //   onPress: async () => {\r\n            //     saveHandler({ ...data, clearSmtp: true });\r\n            //   },\r\n            // });\r\n            config.yeslabel = \"Clear SMTP & Save\";\r\n            config.yes = saveHandler({ ...data, clearSmtp: true });\r\n          }\r\n        }\r\n      } else {\r\n        // buttons.push({\r\n        //   text: \"Clear SMTP & Save\",\r\n        //   onPress: async () => {\r\n        //     saveHandler({ ...data, clearSmtp: true });\r\n        //   },\r\n        // });\r\n        config.yeslabel = \"Clear SMTP & Save\";\r\n        config.yes = saveHandler({ ...data, clearSmtp: true });\r\n      }\r\n      // buttons.push({\r\n      //   text: \"Test Now\",\r\n      //   onPress: async () => {\r\n      //     await testSmtp(data);\r\n      //     return;\r\n      //   },\r\n      // });\r\n\r\n      setAlertConfig(config);\r\n      setIsOpen(true);\r\n\r\n      // Alert.alert(\r\n      //   \"Attention!\",\r\n      //   \"Test your SMTP using the Test SMTP button before saving your signature\",\r\n      //   buttons\r\n      // );\r\n      return;\r\n    } else {\r\n      saveHandler({ ...data, clearSmtp: false });\r\n    }\r\n  };\r\n\r\n  const saveHandler = async (data) => {\r\n    if (Object.keys(errors).length > 0) {\r\n      _showAlert(\"error\", \"Validation failed, check your entries.\");\r\n      return;\r\n    }\r\n\r\n    setIsSaving(true);\r\n\r\n    const postdata = {\r\n      label: data.label,\r\n      signoff: \"Truly,\",\r\n      name: data.name,\r\n      image: data.image || \"0\",\r\n      company_logo: data.company_logo || \"0\",\r\n      phone: data.phone,\r\n      email: data.email,\r\n      website: data.website,\r\n      address1: data.address1,\r\n      address2: data.address2,\r\n      city: data.city,\r\n      state: data.state === \"\" ? \"Alabama\" : data.state,\r\n      zipcode: data.zipcode.toString(),\r\n      disclosure: data.disclosure,\r\n      clearSmtp: data.clearSmtp,\r\n    };\r\n\r\n    if (data.host && data.host !== \"\") {\r\n      postdata[\"smtp\"] = {\r\n        host: data.host,\r\n        port: data.port,\r\n        username: data.username,\r\n        password: data.password,\r\n      };\r\n    }\r\n\r\n    if (currentSignature && currentSignature._id) {\r\n      postdata[\"_id\"] = currentSignature._id;\r\n    }\r\n\r\n    const action = signatureActions.saveSignature(postdata);\r\n\r\n    try {\r\n      const msg = !postdata._id\r\n        ? \"Signature created successfully.\"\r\n        : \"Signature updated successfully.\";\r\n      await dispatch(action);\r\n      _showAlert(\"success\", msg);\r\n      // console.log(\"redirect\", redirect);\r\n      if (editsmtp || redirect === \"home\") {\r\n        setIsOpen(false);\r\n      } else {\r\n        setIsOpen(false);\r\n      }\r\n    } catch (err) {\r\n      console.log(\"Created Error\", err);\r\n      _showAlert(\"error\", err.message);\r\n      setIsSaving(false);\r\n    }\r\n  };\r\n\r\n  const testSmtp = async (saveData = null) => {\r\n    // if (Object.keys(errors).length > 0) {\r\n    //   _showAlert(\"error\", \"Validation Failed. Check your entries\");\r\n    //   return;\r\n    // }\r\n    const user = getUser();\r\n\r\n    if (\r\n      getValues &&\r\n      getValues(\"host\") !== \"\" &&\r\n      getValues &&\r\n      getValues(\"port\") !== \"\" &&\r\n      getValues &&\r\n      getValues(\"username\") !== \"\" &&\r\n      getValues &&\r\n      getValues(\"password\") !== \"\"\r\n    ) {\r\n      try {\r\n        setIsTesting(true);\r\n\r\n        const data = {\r\n          smtphost: getValues(\"host\"),\r\n          smtpport: getValues(\"port\"),\r\n          smtpuser: getValues(\"username\"),\r\n          smtppwd: getValues(\"password\"),\r\n          from: user.name,\r\n          to: user.email,\r\n        };\r\n\r\n        const action = signatureActions.testSMTP(data);\r\n        const sent = await dispatch(action);\r\n        const msg = \"SMTP is configured successfully.\";\r\n        if (sent) {\r\n          _showAlert(\"success\", msg);\r\n          setSmtpTest(false);\r\n        }\r\n        setIsTesting(false);\r\n        if (saveData) {\r\n          saveHandler({\r\n            ...saveData,\r\n            host: data.smtphost,\r\n            port: data.smtpport,\r\n            username: data.smtpuser,\r\n            password: data.smtppwd,\r\n            clearSmtp: false,\r\n          });\r\n        }\r\n      } catch (err) {\r\n        console.log(\"Created Error\", err);\r\n        _showAlert(\"error\", \"SMTP configuration failed, please try again.\");\r\n        setIsTesting(false);\r\n        setIsSaving(false);\r\n      }\r\n    } else {\r\n      // _showAlert(\"error\", \"Validation Failed. Check your entries\");\r\n      trigger(\"host\", { shouldFocus: true });\r\n      trigger(\"port\");\r\n      trigger(\"username\");\r\n      trigger(\"password\");\r\n    }\r\n  };\r\n\r\n  const deleteHandler = async () => {\r\n    if (currentSignature._id) {\r\n      setIsDeleting(true);\r\n      try {\r\n        const action = signatureActions.deleteSignature(currentSignature._id);\r\n        await dispatch(action);\r\n        _showAlert(\"success\", \"Signature deleted successfully.\");\r\n        setIsAlertOpen(false);\r\n        setIsOpen(false);\r\n      } catch (err) {\r\n        _showAlert(\"error\", err.message);\r\n        setIsDeleting(false);\r\n      }\r\n    }\r\n  };\r\n\r\n  // console.log(\"errors\", errors, getValues());\r\n\r\n  return isLoading ? (\r\n    <Center bg={\"white\"} flex={1}>\r\n      <Spinner size={\"small\"} color={Colors.primary} />\r\n    </Center>\r\n  ) : (\r\n    <>\r\n      <VStack bg={\"white\"} width={\"100%\"} mb={20}>\r\n        <ShadowModal\r\n          size='xl'\r\n          initialFocusRef={fRef.current[\"label\"]}\r\n          // height={\r\n          //   sz === \"base\" || sz === \"sm\"\r\n          //     ? window.screen.height - 20\r\n          //     : window.screen.height - 100\r\n          // }\r\n          // BodyHeight={vh(500)}\r\n          header={\r\n            currentSignature && currentSignature._id\r\n              ? \"Edit Signature\"\r\n              : \"Create Signature\"\r\n          }\r\n          isOpen={isOpen}\r\n          close={() => {\r\n            onClose();\r\n          }}\r\n          cancel={() => {\r\n            onClose();\r\n          }}\r\n          isLoading={isSaving}\r\n          save={() => {\r\n            if (Object.keys(errors).length === 0) {\r\n              setIsSaving(true);\r\n            }\r\n          }}\r\n          // width={sz === \"base\" || sz === \"sm\" ? \"99vw\" : vw(650)}\r\n          buttons={\r\n            <HStack space={2}>\r\n              {currentSignature && currentSignature._id && (\r\n                <ShadowButton\r\n                  variant='outline'\r\n                  label={\"Delete\"}\r\n                  style={{\r\n                    backgroundColor: \"rgba(255,0,0,0.3)\",\r\n                  }}\r\n                  onPress={() => {\r\n                    if (\r\n                      currentSignature &&\r\n                      currentSignature.templates &&\r\n                      currentSignature.templates.length > 0\r\n                    ) {\r\n                      setAlertConfig({\r\n                        header: \"Sorry!\",\r\n                        desc: \"Cannot delete signature, found associated templates\",\r\n                        nolabel: \"Okay\",\r\n                        yeslabel: \"\",\r\n                        yes: () => {},\r\n                        no: onAlertClose,\r\n                      });\r\n                      setIsAlertOpen(true);\r\n                      return;\r\n                    }\r\n\r\n                    setAlertConfig({\r\n                      header: \"Delete!\",\r\n                      desc: \"Are you sure you want to delete this signature?\",\r\n                      nolabel: \"No\",\r\n                      yeslabel: \"Yes\",\r\n                      yes: deleteHandler,\r\n                      no: onAlertClose,\r\n                    });\r\n                    setIsAlertOpen(true);\r\n                    return;\r\n                  }}\r\n                />\r\n              )}\r\n              <ShadowButton\r\n                space={2}\r\n                variant='outline'\r\n                label={\"Cancel\"}\r\n                onPress={() => {\r\n                  onClose();\r\n                }}\r\n                style={{\r\n                  height: vh(36),\r\n                }}\r\n              />\r\n              <ShadowButton\r\n                space={3}\r\n                label={\"Save\"}\r\n                isLoading={isSaving}\r\n                onPress={() => {\r\n                  clearErrors();\r\n                  if (Object.keys(errors).length === 0) {\r\n                    setIsSaving(true);\r\n                  }\r\n                }}\r\n                style={{\r\n                  height: vh(36),\r\n                }}\r\n              />\r\n            </HStack>\r\n          }\r\n        >\r\n          {/* form for small screens */}\r\n          <Hidden from='md'>\r\n            <VStack space={8} style={{ width: \"94%\" }}>\r\n              <ShadowInput\r\n                autoFocus={true}\r\n                control={control}\r\n                isRequired\r\n                name='label'\r\n                label='Label '\r\n                placeholder='Signature #'\r\n                invalid={errors.label ? true : false}\r\n                error={errors.label ? errors.label.message : \"\"}\r\n                rules={{\r\n                  required: {\r\n                    value: true,\r\n                    message: \"Please enter signature label.\",\r\n                  },\r\n                }}\r\n              />\r\n              <ShadowInput\r\n                control={control}\r\n                isRequired\r\n                name='name'\r\n                label='Signature Name '\r\n                placeholder='Enter signature name'\r\n                invalid={errors.name ? true : false}\r\n                error={errors.name ? errors.name.message : \"\"}\r\n                rules={{\r\n                  required: {\r\n                    value: true,\r\n                    message: \"Please enter signature name.\",\r\n                  },\r\n                }}\r\n              />\r\n              <ShadowPhone\r\n                control={control}\r\n                isRequired\r\n                name='phone'\r\n                label='Phone Number '\r\n                placeholder='Phone'\r\n                initialValue={\r\n                  currentSignature && currentSignature.phone\r\n                    ? currentSignature &&\r\n                      currentSignature.phone.replace(/ /g, \"\").replace(\"+\", \"\")\r\n                    : \"\"\r\n                }\r\n                invalid={errors.phone ? true : false}\r\n                error={errors.phone ? errors.phone.message : \"\"}\r\n                rules={{\r\n                  required: {\r\n                    value: true,\r\n                    message: \"Please enter your phone number.\",\r\n                  },\r\n                }}\r\n              />\r\n              <VStack>\r\n                <Pressable\r\n                  onPress={() => {\r\n                    setIsSmtpOpen(true);\r\n                  }}\r\n                  style={{\r\n                    position: \"absolute\",\r\n                    right: 0,\r\n                    top: vh(5),\r\n\r\n                    zIndex: 999,\r\n                  }}\r\n                >\r\n                  <Text\r\n                    style={{\r\n                      fontFamily: \"Poppins_medium\",\r\n                      fontSize: vw(13),\r\n                      color: Colors.primary,\r\n                    }}\r\n                  >\r\n                    Configure SMTP\r\n                  </Text>\r\n                </Pressable>\r\n                <ShadowInput\r\n                  control={control}\r\n                  isRequired\r\n                  name='email'\r\n                  label='Email Address '\r\n                  placeholder='me@example.com'\r\n                  invalid={errors.email ? true : false}\r\n                  error={errors.email ? errors.email.message : \"\"}\r\n                  rules={{\r\n                    required: {\r\n                      value: true,\r\n                      message: \"Please enter your email address.\",\r\n                    },\r\n\r\n                    maxLength: {\r\n                      value: 255,\r\n                      message:\r\n                        \"Email address cannot be more than 255 characters.\",\r\n                    },\r\n                  }}\r\n                />\r\n              </VStack>\r\n\r\n              <ShadowInput\r\n                control={control}\r\n                name='website'\r\n                label='Website URL '\r\n                placeholder='Enter website url'\r\n                invalid={errors.website ? true : false}\r\n                error={errors.website ? errors.website.message : \"\"}\r\n                rules={{}}\r\n                style={{ zIndex: 1 }}\r\n              />\r\n              {/* <ShadowSearch\r\n              setSearch={setSearch}\r\n              style={{\r\n                borderColor: \"rgba(0,0,0,0.15)\",\r\n                borderWidth: vw(1),\r\n                marginLeft: 0,\r\n                width: \"99%\",\r\n              }}\r\n            /> */}\r\n              <ShadowInput\r\n                control={control}\r\n                isRequired\r\n                name='address1'\r\n                label='Address Line 1 '\r\n                placeholder='Enter address line 1'\r\n                invalid={errors.address1 ? true : false}\r\n                error={errors.address1 ? errors.address1.message : \"\"}\r\n                rules={{\r\n                  required: {\r\n                    value: true,\r\n                    message: \"Please enter your address.\",\r\n                  },\r\n                }}\r\n                // value={address.address1}\r\n              />\r\n              <ShadowInput\r\n                control={control}\r\n                name='address2'\r\n                label='Address Line 2 '\r\n                placeholder='Enter address line 2'\r\n                invalid={errors.address2 ? true : false}\r\n                error={errors.address2 ? errors.address2.message : \"\"}\r\n                rules={{}}\r\n                // value={address.address2}\r\n              />\r\n              <ShadowInput\r\n                control={control}\r\n                isRequired\r\n                name='city'\r\n                label='City '\r\n                placeholder='Enter city'\r\n                invalid={errors.city ? true : false}\r\n                error={errors.city ? errors.city.message : \"\"}\r\n                rules={{\r\n                  required: {\r\n                    value: true,\r\n                    message: \"Please enter city.\",\r\n                  },\r\n                }}\r\n                // value={address.city}\r\n              />\r\n              <HStack\r\n                flex={1}\r\n                width={\"96%\"}\r\n                space={3}\r\n                justifyContent={\"space-between\"}\r\n              >\r\n                <ShadowInput\r\n                  control={control}\r\n                  isRequired\r\n                  name='state'\r\n                  label='State '\r\n                  placeholder='Enter state'\r\n                  invalid={errors.state ? true : false}\r\n                  error={errors.state ? errors.state.message : \"\"}\r\n                  rules={{\r\n                    required: {\r\n                      value: true,\r\n                      message: \"Please enter state.\",\r\n                    },\r\n                  }}\r\n                  style={{ width: \"50%\" }}\r\n                />\r\n                <ShadowInput\r\n                  control={control}\r\n                  isRequired\r\n                  maxLength={5}\r\n                  minLength={5}\r\n                  name='zipcode'\r\n                  label='Zipcode '\r\n                  placeholder='Enter zipcode'\r\n                  invalid={errors.zipcode ? true : false}\r\n                  error={errors.zipcode ? errors.zipcode.message : \"\"}\r\n                  rules={{\r\n                    // valueAsNumber: true,\r\n                    pattern: {\r\n                      value: /^[0-9]{5}?$/,\r\n                      message: \"Please enter a valid zipcode\",\r\n                    },\r\n                    required: { value: true, message: \"Please enter zipcode\" },\r\n                    maxLength: {\r\n                      value: 5,\r\n                      message: \"Please enter a valid zipcode\",\r\n                    },\r\n                  }}\r\n                  style={{ width: \"50%\" }}\r\n                />\r\n              </HStack>\r\n              <HStack\r\n                space={4}\r\n                style={{\r\n                  justifyContent: \"space-between\",\r\n                  height: vh(60),\r\n                }}\r\n              >\r\n                <Center>\r\n                  <ShadowUpload\r\n                    label='Upload Your Image '\r\n                    path={\r\n                      (currentSignature && currentSignature.image.toString()) ||\r\n                      \"0\"\r\n                    }\r\n                    setPath={(value) => {\r\n                      setValue(\"image\", value);\r\n                      trigger(\"image\");\r\n                    }}\r\n                    invalid={errors.image ? true : false}\r\n                    error={errors.image ? errors.image.message : \"\"}\r\n                  />\r\n                </Center>\r\n                <Center>\r\n                  <ShadowUpload\r\n                    label='Upload Company Logo '\r\n                    path={\r\n                      (currentSignature && currentSignature.company_logo) || \"0\"\r\n                    }\r\n                    setPath={(value) => {\r\n                      setValue(\"company_logo\", value);\r\n                      trigger(\"company_logo\");\r\n                    }}\r\n                    invalid={errors.image ? true : false}\r\n                    error={errors.image ? errors.image.message : \"\"}\r\n                  />\r\n                </Center>\r\n              </HStack>\r\n              <ShadowInput\r\n                control={control}\r\n                name='disclosure'\r\n                label='Disclosure '\r\n                placeholder='Enter disclosure'\r\n                help=\"If you're a realtor, you may be required to disclose your MLS identification on your postcard. Feel free to include that here.\"\r\n                invalid={errors.disclosure ? true : false}\r\n                error={errors.disclosure ? errors.disclosure.message : \"\"}\r\n                rules={{}}\r\n              />\r\n            </VStack>\r\n          </Hidden>\r\n          {/* form for big screens */}\r\n          <Hidden only={[\"base\", \"sm\"]}>\r\n            <VStack\r\n              space={2}\r\n              style={{\r\n                zoom: \"95%\",\r\n                marginTop: vh(-20),\r\n              }}\r\n            >\r\n              <HStack\r\n                space={4}\r\n                style={{\r\n                  width: \"100%\",\r\n                  justifyContent: \"space-between\",\r\n                  // marginHorizontal: vw(20),\r\n                  marginBottom: vh(10),\r\n                }}\r\n              >\r\n                <ShadowInput\r\n                  ref={(el) => (fRef.current[\"label\"] = el)}\r\n                  style={{ width: \"48%\" }}\r\n                  autoFocus={true}\r\n                  control={control}\r\n                  isRequired\r\n                  name='label'\r\n                  label='Label '\r\n                  onKeyPress={(e) => {\r\n                    if (e.key === \"Tab\") {\r\n                      e.preventDefault();\r\n                      fRef.current[\"name\"].focus();\r\n                    }\r\n                  }}\r\n                  placeholder='Signature #'\r\n                  invalid={errors.label ? true : false}\r\n                  error={errors.label ? errors.label.message : \"\"}\r\n                  rules={{\r\n                    required: {\r\n                      value: true,\r\n                      message: \"Please enter signature label.\",\r\n                    },\r\n                  }}\r\n                />\r\n                <ShadowInput\r\n                  ref={(el) => (fRef.current[\"name\"] = el)}\r\n                  onKeyPress={(e) => {\r\n                    if (e.key === \"Tab\") {\r\n                      e.preventDefault();\r\n                      fRef.current[\"phone\"].focus();\r\n                    }\r\n                  }}\r\n                  style={{ width: \"48%\" }}\r\n                  control={control}\r\n                  isRequired\r\n                  name='name'\r\n                  label='Signature Name '\r\n                  placeholder='Enter signature name'\r\n                  invalid={errors.name ? true : false}\r\n                  error={errors.name ? errors.name.message : \"\"}\r\n                  rules={{\r\n                    required: {\r\n                      value: true,\r\n                      message: \"Please enter signature name.\",\r\n                    },\r\n                  }}\r\n                />\r\n              </HStack>\r\n              <HStack\r\n                space={4}\r\n                style={{\r\n                  width: \"100%\",\r\n                  justifyContent: \"space-between\",\r\n                  // marginHorizontal: vw(20),\r\n                  marginVertical: vh(10),\r\n                  zIndex: 9999,\r\n                }}\r\n              >\r\n                <ShadowPhone\r\n                  ref={(el) => (fRef.current[\"phone\"] = el)}\r\n                  onKeyPress={(e) => {\r\n                    console.log(e.code);\r\n                    if (e.code === \"Tab\") {\r\n                      e.preventDefault();\r\n                      fRef.current[\"email\"].focus();\r\n                    }\r\n                  }}\r\n                  style={{ width: \"48%\" }}\r\n                  control={control}\r\n                  isRequired\r\n                  name='phone'\r\n                  label='Phone Number '\r\n                  placeholder='Phone'\r\n                  initialValue={\r\n                    currentSignature && currentSignature.phone\r\n                      ? currentSignature &&\r\n                        currentSignature.phone\r\n                          .replace(/ /g, \"\")\r\n                          .replace(\"+\", \"\")\r\n                      : \"\"\r\n                  }\r\n                  invalid={errors.phone ? true : false}\r\n                  error={errors.phone ? errors.phone.message : \"\"}\r\n                  rules={{\r\n                    required: {\r\n                      value: true,\r\n                      message: \"Please enter your phone number.\",\r\n                    },\r\n                  }}\r\n                />\r\n                <VStack style={{ width: \"48%\" }}>\r\n                  <Pressable\r\n                    onPress={() => {\r\n                      setIsSmtpOpen(true);\r\n                    }}\r\n                    style={{\r\n                      position: \"absolute\",\r\n                      right: 0,\r\n                      top: vh(5),\r\n\r\n                      zIndex: 999,\r\n                    }}\r\n                  >\r\n                    <Text\r\n                      style={{\r\n                        fontFamily: \"Poppins_medium\",\r\n                        fontSize: vw(13),\r\n                        color: Colors.primary,\r\n                      }}\r\n                    >\r\n                      Configure SMTP\r\n                    </Text>\r\n                  </Pressable>\r\n                  <ShadowInput\r\n                    ref={(el) => (fRef.current[\"email\"] = el)}\r\n                    onKeyPress={(e) => {\r\n                      if (e.key === \"Tab\") {\r\n                        e.preventDefault();\r\n                        fRef.current[\"website\"].focus();\r\n                      }\r\n                    }}\r\n                    control={control}\r\n                    isRequired\r\n                    name='email'\r\n                    label='Email Address '\r\n                    placeholder='me@example.com'\r\n                    invalid={errors.email ? true : false}\r\n                    error={errors.email ? errors.email.message : \"\"}\r\n                    rules={{\r\n                      required: {\r\n                        value: true,\r\n                        message: \"Please enter your email address.\",\r\n                      },\r\n\r\n                      maxLength: {\r\n                        value: 255,\r\n                        message:\r\n                          \"Email address cannot be more than 255 characters.\",\r\n                      },\r\n                    }}\r\n                  />\r\n                </VStack>\r\n              </HStack>\r\n              <HStack\r\n                style={{\r\n                  width: \"100%\",\r\n                  justifyContent: \"space-between\",\r\n                  // marginHorizontal: vw(20),\r\n                  marginVertical: vh(10),\r\n                }}\r\n              >\r\n                <ShadowInput\r\n                  ref={(el) => (fRef.current[\"website\"] = el)}\r\n                  onKeyPress={(e) => {\r\n                    if (e.key === \"Tab\") {\r\n                      e.preventDefault();\r\n                      fRef.current[\"address1\"].focus();\r\n                    }\r\n                  }}\r\n                  control={control}\r\n                  name='website'\r\n                  label='Website URL '\r\n                  placeholder='Enter website url'\r\n                  invalid={errors.website ? true : false}\r\n                  error={errors.website ? errors.website.message : \"\"}\r\n                  rules={{}}\r\n                  style={{ zIndex: 1 }}\r\n                />\r\n              </HStack>\r\n              <VStack space={2} style={{ width: \"100%\" }}>\r\n                <ShadowSearch\r\n                  setAddress={setSearchAddress}\r\n                  setRefresh={setRefresh}\r\n                />\r\n                <HStack\r\n                  space={4}\r\n                  style={{\r\n                    width: \"100%\",\r\n                    justifyContent: \"space-between\",\r\n                    // marginHorizontal: vw(20),\r\n                    marginVertical: vh(10),\r\n                  }}\r\n                >\r\n                  <ShadowInput\r\n                    ref={(el) => (fRef.current[\"address1\"] = el)}\r\n                    onKeyPress={(e) => {\r\n                      if (e.key === \"Tab\") {\r\n                        e.preventDefault();\r\n                        fRef.current[\"address2\"].focus();\r\n                      }\r\n                    }}\r\n                    style={{ width: \"48%\" }}\r\n                    control={control}\r\n                    isRequired\r\n                    name='address1'\r\n                    label='Address Line 1 '\r\n                    placeholder='Enter address line 1'\r\n                    invalid={errors.address1 ? true : false}\r\n                    error={errors.address1 ? errors.address1.message : \"\"}\r\n                    rules={{\r\n                      required: {\r\n                        value: true,\r\n                        message: \"Please enter your address.\",\r\n                      },\r\n                    }}\r\n                    // value={address.address1}\r\n                  />\r\n                  <ShadowInput\r\n                    ref={(el) => (fRef.current[\"address2\"] = el)}\r\n                    onKeyPress={(e) => {\r\n                      if (e.key === \"Tab\") {\r\n                        e.preventDefault();\r\n                        fRef.current[\"city\"].focus();\r\n                      }\r\n                    }}\r\n                    style={{ width: \"48%\" }}\r\n                    control={control}\r\n                    name='address2'\r\n                    label='Address Line 2 '\r\n                    placeholder='Enter address line 2'\r\n                    invalid={errors.address2 ? true : false}\r\n                    error={errors.address2 ? errors.address2.message : \"\"}\r\n                    rules={{}}\r\n                    // value={address.address2}\r\n                  />\r\n                </HStack>\r\n                <HStack\r\n                  space={4}\r\n                  style={{\r\n                    width: \"100%\",\r\n                    justifyContent: \"space-between\",\r\n                    // marginHorizontal: vw(20),\r\n                    marginVertical: vh(10),\r\n                  }}\r\n                >\r\n                  <ShadowInput\r\n                    ref={(el) => (fRef.current[\"city\"] = el)}\r\n                    onKeyPress={(e) => {\r\n                      if (e.key === \"Tab\") {\r\n                        e.preventDefault();\r\n                        fRef.current[\"state\"].focus();\r\n                      }\r\n                    }}\r\n                    style={{ width: \"48%\" }}\r\n                    control={control}\r\n                    isRequired\r\n                    name='city'\r\n                    label='City '\r\n                    placeholder='Enter city'\r\n                    invalid={errors.city ? true : false}\r\n                    error={errors.city ? errors.city.message : \"\"}\r\n                    rules={{\r\n                      required: {\r\n                        value: true,\r\n                        message: \"Please enter city.\",\r\n                      },\r\n                    }}\r\n                    // value={address.city}\r\n                  />\r\n                  <HStack space={2} style={{ width: \"48%\" }}>\r\n                    <ShadowInput\r\n                      ref={(el) => (fRef.current[\"state\"] = el)}\r\n                      onKeyPress={(e) => {\r\n                        if (e.key === \"Tab\") {\r\n                          e.preventDefault();\r\n                          fRef.current[\"zipcode\"].focus();\r\n                        }\r\n                      }}\r\n                      style={{ width: \"48.5%\" }}\r\n                      control={control}\r\n                      isRequired\r\n                      name='state'\r\n                      label='State '\r\n                      placeholder='Enter state'\r\n                      invalid={errors.state ? true : false}\r\n                      error={errors.state ? errors.state.message : \"\"}\r\n                      rules={{\r\n                        required: {\r\n                          value: true,\r\n                          message: \"Please enter state.\",\r\n                        },\r\n                      }}\r\n                      // value={address.state}\r\n                    />\r\n                    <ShadowInput\r\n                      ref={(el) => (fRef.current[\"zipcode\"] = el)}\r\n                      onKeyPress={(e) => {\r\n                        if (e.key === \"Tab\") {\r\n                          e.preventDefault();\r\n                          fRef.current[\"disclosure\"].focus();\r\n                        }\r\n                      }}\r\n                      style={{ width: \"48.5%\" }}\r\n                      control={control}\r\n                      isRequired\r\n                      maxLength={5}\r\n                      minLength={5}\r\n                      name='zipcode'\r\n                      label='Zipcode '\r\n                      placeholder='Enter zipcode'\r\n                      invalid={errors.zipcode ? true : false}\r\n                      error={errors.zipcode ? errors.zipcode.message : \"\"}\r\n                      rules={{\r\n                        // valueAsNumber: true,\r\n                        pattern: {\r\n                          value: /^[0-9]{5}?$/,\r\n                          message: \"Invalid zipcode\",\r\n                        },\r\n                        required: {\r\n                          value: true,\r\n                          message: \"Please enter zipcode\",\r\n                        },\r\n                        maxLength: {\r\n                          value: 5,\r\n                          message: \"Invalid zipcode\",\r\n                        },\r\n                        minLength: {\r\n                          value: 5,\r\n                          message: \"Invalid zipcode\",\r\n                        },\r\n                      }}\r\n                    />\r\n                  </HStack>\r\n                </HStack>\r\n              </VStack>\r\n              <HStack\r\n                space={4}\r\n                style={{\r\n                  width: \"100%\",\r\n                  justifyContent: \"space-between\",\r\n                  // marginHorizontal: vw(20),\r\n                  marginVertical: vh(10),\r\n                  height: vh(60),\r\n                  zIndex: -1,\r\n                }}\r\n              >\r\n                <Box style={{ width: \"48%\" }}>\r\n                  <ShadowUpload\r\n                    label='Click to Upload Your Image '\r\n                    path={\r\n                      (currentSignature && currentSignature.image.toString()) ||\r\n                      \"0\"\r\n                    }\r\n                    setPath={(value) => {\r\n                      setValue(\"image\", value);\r\n                      trigger(\"image\");\r\n                    }}\r\n                    invalid={errors.image ? true : false}\r\n                    error={errors.image ? errors.image.message : \"\"}\r\n                  />\r\n                </Box>\r\n                <Box style={{ width: \"48%\" }}>\r\n                  <ShadowUpload\r\n                    label='Click to Upload Company Logo '\r\n                    path={\r\n                      (currentSignature && currentSignature.company_logo) || \"0\"\r\n                    }\r\n                    setPath={(value) => {\r\n                      setValue(\"company_logo\", value);\r\n                      trigger(\"company_logo\");\r\n                    }}\r\n                    invalid={errors.image ? true : false}\r\n                    error={errors.image ? errors.image.message : \"\"}\r\n                  />\r\n                </Box>\r\n              </HStack>\r\n              <HStack\r\n                style={{\r\n                  width: \"100%\",\r\n                  justifyContent: \"space-between\",\r\n                  // marginHorizontal: vw(20),\r\n                  marginVertical: vh(20),\r\n                  marginTop: vh(30),\r\n                }}\r\n              >\r\n                <ShadowInput\r\n                  ref={(el) => (fRef.current[\"disclosure\"] = el)}\r\n                  control={control}\r\n                  name='disclosure'\r\n                  label='Disclosure '\r\n                  placeholder='Enter disclosure'\r\n                  help=\"If you're a realtor, you may be required to disclose your MLS identification on your postcard. Feel free to include that here.\"\r\n                  invalid={errors.disclosure ? true : false}\r\n                  error={errors.disclosure ? errors.disclosure.message : \"\"}\r\n                  rules={{}}\r\n                />\r\n              </HStack>\r\n            </VStack>\r\n          </Hidden>\r\n        </ShadowModal>\r\n\r\n        {/* Configure SMTP */}\r\n        <ShadowModal\r\n          initialFocusRef={fRef.current[\"host\"]}\r\n          size={\"lg\"}\r\n          header='Configure SMTP'\r\n          isOpen={isSmtpOpen}\r\n          close={() => {\r\n            onSmtpClose();\r\n          }}\r\n          buttons={\r\n            <ShadowButton\r\n              space={2}\r\n              label={\"Test SMTP\"}\r\n              isDisabled={!smtpTest && !isTesting}\r\n              isLoading={isTesting}\r\n              onPress={() => {\r\n                testSmtp(null);\r\n              }}\r\n              style={{\r\n                height: vh(36),\r\n              }}\r\n            />\r\n          }\r\n        >\r\n          <VStack\r\n            style={{ zoom: \"90%\", marginTop: vh(-20) }}\r\n            justifyContent={\"center\"}\r\n          >\r\n            <Text>\r\n              This SMTP will be used to send email campaigns from the given\r\n              email address\r\n            </Text>\r\n            <HStack\r\n              space={4}\r\n              style={{\r\n                width: \"100%\",\r\n                justifyContent: \"space-between\",\r\n                // marginHorizontal: vw(20),\r\n                marginVertical: vh(20),\r\n              }}\r\n            >\r\n              <ShadowInput\r\n                style={{ width: \"48%\" }}\r\n                ref={(el) => (fRef.current[\"host\"] = el)}\r\n                onKeyPress={(e) => {\r\n                  if (e.key === \"Tab\") {\r\n                    e.preventDefault();\r\n                    fRef.current[\"port\"].focus();\r\n                  }\r\n                }}\r\n                autoFocus={true}\r\n                control={control}\r\n                name='host'\r\n                label='Host '\r\n                placeholder='smtp.gmail.com'\r\n                onChangeText={(v) => {\r\n                  setSmtpTest(true);\r\n                  // setValue(\"host\", v);\r\n                  // trigger(\"host\");\r\n                }}\r\n                invalid={errors.host ? true : false}\r\n                error={errors.host ? errors.host.message : \"\"}\r\n                rules={{\r\n                  required: {\r\n                    value: isSmtpOpen,\r\n                    message: \"Please enter host.\",\r\n                  },\r\n\r\n                  maxLength: {\r\n                    value: 255,\r\n                    message: \"Host cannot be more than 255 characters.\",\r\n                  },\r\n                }}\r\n              />\r\n              <ShadowInput\r\n                ref={(el) => (fRef.current[\"port\"] = el)}\r\n                onKeyPress={(e) => {\r\n                  if (e.key === \"Tab\") {\r\n                    e.preventDefault();\r\n                    fRef.current[\"username\"].focus();\r\n                  }\r\n                }}\r\n                style={{ width: \"48%\" }}\r\n                control={control}\r\n                name='port'\r\n                label='Port '\r\n                placeholder='25/587/465'\r\n                onChangeText={(v) => {\r\n                  setSmtpTest(true);\r\n                  // setValue(\"port\", v);\r\n                  // trigger(\"port\");\r\n                }}\r\n                invalid={errors.port ? true : false}\r\n                error={errors.port ? errors.port.message : \"\"}\r\n                rules={{\r\n                  required: {\r\n                    value: isSmtpOpen,\r\n                    message: \"Please enter port.\",\r\n                  },\r\n\r\n                  maxLength: {\r\n                    value: 5,\r\n                    message: \"Port cannot be more than 5 characters.\",\r\n                  },\r\n                }}\r\n              />\r\n            </HStack>\r\n            <HStack\r\n              space={4}\r\n              style={{\r\n                width: \"100%\",\r\n                justifyContent: \"space-betwee0n\",\r\n                // marginHorizontal: vw(20),\r\n                marginVertical: vh(20),\r\n              }}\r\n            >\r\n              <ShadowInput\r\n                ref={(el) => (fRef.current[\"username\"] = el)}\r\n                onKeyPress={(e) => {\r\n                  if (e.key === \"Tab\") {\r\n                    e.preventDefault();\r\n                    fRef.current[\"password\"].focus();\r\n                  }\r\n                }}\r\n                style={{ width: \"48%\" }}\r\n                control={control}\r\n                name='username'\r\n                label='Username '\r\n                placeholder='smtp username'\r\n                onChangeText={(v) => {\r\n                  setSmtpTest(true);\r\n                  // setValue(\"username\", v);\r\n                  // trigger(\"username\");\r\n                }}\r\n                invalid={errors.username ? true : false}\r\n                error={errors.username ? errors.username.message : \"\"}\r\n                rules={{\r\n                  required: {\r\n                    value: isSmtpOpen,\r\n                    message: \"Please enter username.\",\r\n                  },\r\n                }}\r\n              />\r\n              <ShadowInput\r\n                ref={(el) => (fRef.current[\"password\"] = el)}\r\n                style={{ width: \"48%\" }}\r\n                type='password'\r\n                control={control}\r\n                name='password'\r\n                label='Password '\r\n                placeholder='password'\r\n                onChangeText={(v) => {\r\n                  setSmtpTest(true);\r\n                  // setValue(\"password\", v);\r\n                  // trigger(\"password\");\r\n                }}\r\n                rightIcon={\r\n                  <Pressable\r\n                    style={{ marginHorizontal: 5 }}\r\n                    onPress={() => {\r\n                      fRef.current[\"password\"].type =\r\n                        fRef.current[\"password\"].type === \"text\"\r\n                          ? \"password\"\r\n                          : \"text\";\r\n                      setShowPassword(!showPassword);\r\n                    }}\r\n                  >\r\n                    {showPassword ? <EyeClosedIcon /> : <EyeOpenIcon width={20} height={20} />}\r\n                  </Pressable>\r\n                }\r\n                invalid={errors.password ? true : false}\r\n                error={errors.password ? errors.password.message : \"\"}\r\n                rules={{\r\n                  required: {\r\n                    value: isSmtpOpen,\r\n                    message: \"Please enter password.\",\r\n                  },\r\n                }}\r\n              />\r\n            </HStack>\r\n          </VStack>\r\n        </ShadowModal>\r\n      </VStack>\r\n      <ShadowModal\r\n        size={\"md\"}\r\n        isOpen={isAlertOpen}\r\n        close={() => {\r\n          setIsAlertOpen(false);\r\n        }}\r\n        header={alertConfig.header}\r\n        buttons={\r\n          <HStack space={2}>\r\n            {alertConfig.yeslabel === \"\" ? (\r\n              <ShadowButton\r\n                space={4}\r\n                onPress={() => {\r\n                  setIsAlertOpen(false);\r\n                }}\r\n                color='rgba(0,0,0, 0.5)'\r\n                variant='outline'\r\n                label='Okay'\r\n                style={{\r\n                  height: vh(32),\r\n                }}\r\n              />\r\n            ) : (\r\n              <HStack space={2}>\r\n                <ShadowButton\r\n                  space={4}\r\n                  onPress={() => {\r\n                    setIsAlertOpen(false);\r\n                  }}\r\n                  color='rgba(0,0,0, 0.5)'\r\n                  variant='outline'\r\n                  label='No'\r\n                  style={{\r\n                    height: vh(32),\r\n                  }}\r\n                />\r\n                <ShadowButton\r\n                  space={4}\r\n                  isLoading={isDeleting}\r\n                  onPress={alertConfig.yes}\r\n                  color='white'\r\n                  label='Yes'\r\n                  style={{\r\n                    height: vh(32),\r\n                  }}\r\n                />\r\n              </HStack>\r\n            )}\r\n          </HStack>\r\n        }\r\n      >\r\n        <Text\r\n          style={{\r\n            fontFamily: \"Poppins_medium\",\r\n            fontSize: vw(15),\r\n            color: \"rgba(0,0,0,0.8)\",\r\n          }}\r\n        >\r\n          {alertConfig.desc}\r\n        </Text>\r\n      </ShadowModal>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default AddSignature;\r\n","import { API_URL, getUser } from \"../../constants/Config\";\r\nimport * as events from \"../events\";\r\n\r\nexport const fetchSignatures = (page = 1, limit = 50) => {\r\n  return async (dispatch, getState) => {\r\n    const { token } = getUser();\r\n    // const { userTemplates } = getState().templates;\r\n\r\n    const body = {\r\n      skip: page === 1 ? 0 : (page - 1) * limit,\r\n      limit,\r\n    };\r\n\r\n    // const ownerTemplates =\r\n    //   userTemplates &&\r\n    //   userTemplates.length > 0 &&\r\n    //   userTemplates.filter((t) => t.createdUser._id === team);\r\n\r\n    // if (ownerTemplates && ownerTemplates.length > 0) {\r\n    //   const signatures = [];\r\n    //   ownerTemplates.map((t) => {\r\n    //     if (t.signature) {\r\n    //       signatures.push(t.signature._id);\r\n    //     }\r\n    //     return t;\r\n    //   });\r\n    //   if (signatures.length > 0) {\r\n    //     body[\"filter\"] = { signatures };\r\n    //   }\r\n    // }\r\n\r\n    try {\r\n      const response = await fetch(`${API_URL}/signatures/get`, {\r\n        method: \"POST\",\r\n        headers: {\r\n          \"Content-Type\": \"application/json\",\r\n          Authorization: \"Bearer \" + token,\r\n        },\r\n        body: JSON.stringify(body),\r\n      });\r\n\r\n      if (!response.ok) {\r\n        const errorRes = await response.json();\r\n        let message = \"Something went wrong!\";\r\n        if (errorRes && errorRes.error) {\r\n          message = errorRes.error;\r\n        }\r\n        throw new Error(message);\r\n      }\r\n\r\n      const resData = await response.json();\r\n\r\n      dispatch({\r\n        type: events.SET_SIGNATURES,\r\n        signatures: resData.data ? resData.data : [],\r\n        total: resData.count ? resData.count : 0\r\n      });\r\n    } catch (err) {\r\n      // send to custom analytics server\r\n      console.log(\"fetchSignatures Error \", err);\r\n      throw err;\r\n    }\r\n  };\r\n};\r\n\r\nexport const deleteSignature = (_id) => {\r\n  return async (dispatch, getState) => {\r\n    const { token } = getUser();\r\n    const response = await fetch(`${API_URL}/signatures/${_id}`, {\r\n      method: \"DELETE\",\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n        Authorization: \"Bearer \" + token,\r\n      },\r\n      body: JSON.stringify({ id: _id }),\r\n    });\r\n    if (!response.ok) {\r\n      const errRes = await response.json();\r\n      console.log(errRes);\r\n      let message = \"Something went wrong!\";\r\n      if (errRes && errRes.error) {\r\n        message = errRes.error;\r\n      }\r\n      throw new Error(message);\r\n    }\r\n    dispatch({ type: events.DELETE_SIGNATURE, _id });\r\n  };\r\n};\r\n\r\nexport const saveSignature = (data) => {\r\n  return async (dispatch, getState) => {\r\n    try {\r\n      const { token } = getUser();\r\n      const { _id } = data;\r\n      let url = `${API_URL}/signatures/add`;\r\n      let method = \"POST\";\r\n      if (_id) {\r\n        url = `${API_URL}/signatures/${_id}`;\r\n        delete data._id;\r\n        method = \"PATCH\";\r\n      }\r\n      const response = await fetch(url, {\r\n        method,\r\n        headers: {\r\n          \"Content-Type\": \"application/json\",\r\n          Authorization: \"Bearer \" + token,\r\n        },\r\n        body: JSON.stringify({ ...data }),\r\n      });\r\n\r\n      if (!response.ok) {\r\n        const errorRes = await response.json();\r\n        let message = \"Something went wrong!\";\r\n        if (errorRes && errorRes.error) {\r\n          message = errorRes.error;\r\n        }\r\n        throw new Error(message);\r\n      }\r\n\r\n      const resData = await response.json();\r\n\r\n      if (resData.data) {\r\n        dispatch({\r\n          type: _id ? events.UPDATE_SIGNATURE : events.CREATE_SIGNATURE,\r\n          data: resData.data,\r\n        });\r\n      }\r\n    } catch (err) {\r\n      console.log(\"create signature error\", err);\r\n      throw new Error(err.message);\r\n    }\r\n  };\r\n};\r\n\r\nexport const testSMTP = (data) => {\r\n  return async (dispatch, getState) => {\r\n    try {\r\n      const { token } = getUser();\r\n      let url = `${API_URL}/smtp/test`;\r\n      const response = await fetch(url, {\r\n        method: \"POST\",\r\n        headers: {\r\n          \"Content-Type\": \"application/json\",\r\n          Authorization: \"Bearer \" + token,\r\n        },\r\n        body: JSON.stringify({ ...data }),\r\n      });\r\n\r\n      if (!response.ok) {\r\n        const errorRes = await response.json();\r\n        let message = \"Something went wrong!\";\r\n        if (errorRes && errorRes.error) {\r\n          message = errorRes.error;\r\n        }\r\n        throw new Error(message);\r\n      }\r\n\r\n      const resData = await response.json();\r\n      return resData.data ? true : false;\r\n    } catch (err) {\r\n      console.log(\"test smtp error\", err);\r\n      throw new Error(err.message);\r\n    }\r\n  };\r\n};\r\n\r\n// export const updateSignature = (data) => {\r\n//   return async (dispatch, getState) => {\r\n//     const token = getState().auth.token;\r\n//     const { _id } = data;\r\n//     delete data._id;\r\n//     const response = await fetch(`${API_URL}/signatures/${_id}`, {\r\n//       method: \"PATCH\",\r\n//       headers: {\r\n//         \"Content-Type\": \"application/json\",\r\n//         Authorization: \"Bearer \" + token,\r\n//       },\r\n//       body: JSON.stringify(data),\r\n//     });\r\n\r\n//     if (!response.ok) {\r\n//       const errorRes = await response.json();\r\n//       let message = \"Something went wrong!\";\r\n//       if (errorRes && errorRes.error) {\r\n//         message = errorRes.error;\r\n//       }\r\n//       throw new Error(message);\r\n//     }\r\n\r\n//     const resData = await response.json();\r\n\r\n//     dispatch({\r\n//       type: events.UPDATE_SIGNATURE,\r\n//       data: resData.data,\r\n//     });\r\n//   };\r\n// };\r\n\r\nexport const uploadSignatureImages = (picture, setProgress, cb) => {\r\n  return async (dispatch, getState) => {\r\n    try {\r\n      const {token, _id} = getUser();\r\n      const formData = new FormData();\r\n      formData.append(\"_id\", _id);\r\n      formData.append(\"default\", true);\r\n      formData.append(\"picture\", {\r\n        type: \"image/jpg\",\r\n        uri: picture,\r\n        name: \"signature_\" + _id + \".jpg\",\r\n      });\r\n      var xhr = new XMLHttpRequest();\r\n      xhr.open(\"POST\", `${API_URL}/signatures/upload/images`, true);\r\n      xhr.addEventListener(\r\n        \"progress\",\r\n        function (e) {\r\n          var done = e.position || e.loaded,\r\n            total = e.totalSize || e.total;\r\n          dispatch({\r\n            type: events.SET_PROGRESS,\r\n            progress: Math.floor((done / total) * 1000) / 10,\r\n          });\r\n          console.log(\r\n            \"xhr progress: \" + Math.floor((done / total) * 1000) / 10 + \"%\"\r\n          );\r\n        },\r\n        false\r\n      );\r\n      if (xhr.upload) {\r\n        xhr.upload.onprogress = function (e) {\r\n          var done = e.position || e.loaded,\r\n            total = e.totalSize || e.total;\r\n          setProgress(Math.floor((done / total) * 1000) / 10);\r\n          // console.log(\r\n          //   'xhr.upload progress: ' +\r\n          //     done +\r\n          //     ' / ' +\r\n          //     total +\r\n          //     ' = ' +\r\n          //     Math.floor((done / total) * 1000) / 10 +\r\n          //     '%'\r\n          // );\r\n        };\r\n      }\r\n      xhr.setRequestHeader(\"Content-Type\", \"multipart/form-data\");\r\n      xhr.setRequestHeader(\"Authorization\", `Bearer ${token}`);\r\n      xhr.onreadystatechange = function () {\r\n        if (this.readyState === 4 && this.status === 200) {\r\n          // console.log(this.responseText);\r\n          console.log(\"Signature Image uploaded successfully!\");\r\n          cb(JSON.parse(this.responseText));\r\n        } else {\r\n          console.log(this.responseText);\r\n          // throw new Error(\"something went wrong\");\r\n        }\r\n      };\r\n      xhr.send(formData);\r\n    } catch (err) {\r\n      console.log(\"signature upload error\", err);\r\n      throw new Error(\"something went wrong\");\r\n    }\r\n  };\r\n};\r\n"],"names":["vw","Util","vh","ShadowInput","React","props","ref","isRequired","isInvalid","invalid","isReadOnly","style","height","label","fontSize","fontFamily","color","labelstyle","control","rules","name","zIndex","render","field","onChange","value","onBlur","size","multiline","numberOfLines","minLength","maxLength","autoComplete","autoFocus","type","onSubmitEditing","onKeyPress","onChangeText","variant","invalidOutlineColor","focusOutlineColor","_invalid","borderColor","borderWidth","_light","_dark","_web","backgroundColor","InputLeftElement","leftIcon","InputRightElement","rightIcon","placeholder","marginTop","error","help","ShadowPhone","intl","useRef","validate","isValidPhoneNumber","inputProps","disabled","country","onKeyDown","containerStyle","dropdownStyle","position","inputStyle","width","GEO_API","ShadowSearch","sz","setAddress","setRefresh","spRef","ppRef","sRef","cRef","aRef","useState","predictions","setPredictions","search","setSearch","placeId","setPlaceId","useEffect","handleClickOutside","event","current","contains","target","global","document","addEventListener","removeEventListener","unmounted","getLocations","_","loc","url","fetch","method","headers","Token","body","JSON","stringify","input","result","json","data","console","message","getAddress","id","r","ff","searchStyle","marginLeft","marginRight","boxShadow","borderBottomLeftRadius","length","borderBottomRightRadius","alignSelf","bg","borderRadius","leftElement","lineHeight","overflow","e","key","sp","fontWeight","Colors","click","preventDefault","_focus","_hover","v","visibility","rightElement","onPress","space","paddingTop","paddingBottom","paddingHorizontal","map","p","idx","onHoverIn","onHoverOut","el","address","xmlns","viewBox","Path","fill","d","opacity","primary","accent","uRef","path","progress","setProgress","imgId","setImgId","isLoading","setIsLoading","imageLoading","setImageLoading","onChangeHandler","getUser","token","_id","files","file","indexOf","alert","FormData","request","XMLHttpRequest","append","upload","completed","loaded","total","onreadystatechange","this","readyState","status","parse","responseText","success","setPath","log","responseType","open","API_URL","setRequestHeader","send","Box","FormControl","mb","_text","my","VStack","flex","accept","display","Center","Pressable","Spinner","Image","alt","onLoadEnd","source","uri","CDN","text","isOpen","setIsOpen","_showAlert","dispatch","useDispatch","fRef","currentSignature","useSelector","state","signatures","searchAddress","setSearchAddress","smtpTest","setSmtpTest","refresh","isTesting","setIsTesting","isSaving","setIsSaving","showPassword","setShowPassword","isDeleting","setIsDeleting","onClose","isSmtpOpen","setIsSmtpOpen","isAlertOpen","setIsAlertOpen","onAlertClose","header","desc","nolabel","yeslabel","yes","no","alertConfig","setAlertConfig","useForm","mode","defaultValues","image","company_logo","phone","email","website","address1","address2","city","zipcode","disclosure","host","port","username","password","smtp","handleSubmit","errors","formState","getValues","setValue","trigger","clearErrors","checkSmtp","shortaddress","config","testSmtp","templates","find","t","templatetype","saveHandler","clearSmtp","Object","keys","postdata","signoff","toString","action","signatureActions","msg","saveData","user","smtphost","smtpport","smtpuser","smtppwd","from","to","sent","shouldFocus","deleteHandler","ShadowModal","initialFocusRef","close","cancel","save","buttons","HStack","ShadowButton","Hidden","required","initialValue","replace","right","top","Text","justifyContent","pattern","only","zoom","marginBottom","focus","marginVertical","code","isDisabled","marginHorizontal","EyeClosedIcon","EyeOpenIcon","fetchSignatures","page","limit","getState","skip","Authorization","response","ok","errorRes","Error","resData","events","count","deleteSignature","errRes","saveSignature","testSMTP"],"sourceRoot":""}