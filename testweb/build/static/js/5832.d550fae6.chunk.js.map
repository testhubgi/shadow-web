{"version":3,"file":"static/js/5832.d550fae6.chunk.js","mappings":"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","sources":["../node_modules/native-base/lib/module/components/composites/FormControl/FormControl.tsx","../node_modules/native-base/lib/module/components/composites/FormControl/FormControlLabel.tsx","../node_modules/native-base/lib/module/components/composites/FormControl/FormControlErrorMessage.tsx","../node_modules/native-base/lib/module/components/composites/FormControl/FormControlHelperText.tsx","../node_modules/native-base/lib/module/components/composites/FormControl/index.tsx","../node_modules/native-base/lib/module/utils/accessibilityUtils.ts","../node_modules/native-base/lib/module/components/composites/FormControl/useFormControl.tsx","../node_modules/native-base/lib/module/utils/resolveStackStyleInput.ts","../node_modules/native-base/lib/module/components/primitives/Input/Input.tsx","../node_modules/native-base/lib/module/components/primitives/Input/index.tsx","../node_modules/native-base/lib/module/utils/combineContextAndProps.ts"],"sourcesContent":["import React, { memo, forwardRef } from 'react';\nimport { usePropsResolution } from '../../../hooks/useThemeProps';\nimport Box from '../../primitives/Box';\nimport type { IFormControlProps } from './types';\nimport { useFormControlProvider, FormControlContext } from './useFormControl';\nimport { useHasResponsiveProps } from '../../../hooks/useHasResponsiveProps';\n\nconst FormControl = (props: IFormControlProps, ref: any) => {\n  const { htmlProps, ...context } = useFormControlProvider(props);\n  const resolvedProps = usePropsResolution('FormControl', props, {\n    isDisabled: context.isDisabled,\n    isReadOnly: context.isReadOnly,\n    isInvalid: context.isInvalid,\n    // isRequired: context.isRequired,\n  });\n  //TODO: refactor for responsive prop\n  if (useHasResponsiveProps(props)) {\n    return null;\n  }\n  return (\n    <FormControlContext.Provider value={context}>\n      <Box {...resolvedProps} {...htmlProps} ref={ref} />\n    </FormControlContext.Provider>\n  );\n};\n\nexport default memo(forwardRef(FormControl));\n","import React, { memo, forwardRef } from 'react';\nimport Box from '../../primitives/Box';\nimport Text from '../../primitives/Text';\nimport { useFormControlContext } from './useFormControl';\nimport { usePropsResolution } from '../../../hooks/useThemeProps';\nimport type { IFormControlLabelProps } from './types';\nimport { mergeRefs } from '../../../utils';\nimport { combineContextAndProps } from '../../../utils';\n\nconst FormControlLabel = (\n  { children, ...props }: IFormControlLabelProps,\n  ref: any\n) => {\n  const formControlContext = useFormControlContext();\n  const combinedProps = combineContextAndProps(formControlContext, props);\n  const _ref = React.useRef<HTMLLabelElement>(null);\n  const { _astrick, ...resolvedProps } = usePropsResolution(\n    'FormControlLabel',\n    combinedProps,\n    {\n      isDisabled: combinedProps.isDisabled,\n      isReadOnly: combinedProps.isReadOnly,\n      isInvalid: combinedProps.isInvalid,\n      // isRequired: combinedProps.isRequired,\n    }\n  );\n\n  const requiredAsterisk = () => (\n    <Text\n      _web={{\n        accessibilityHidden: true,\n        //@ts-ignore\n        accessibilityRole: 'presentation',\n      }}\n      {..._astrick}\n    >\n      *\n    </Text>\n  );\n  const mergedRef = mergeRefs([_ref, ref]);\n  React.useEffect(() => {\n    if (_ref.current) {\n      // RN web doesn't support htmlFor for Label element yet\n      if (props.htmlFor) {\n        _ref.current.htmlFor = props.htmlFor;\n      } else if (resolvedProps?.nativeID) {\n        _ref.current.htmlFor = resolvedProps.nativeID;\n      }\n    }\n  }, [resolvedProps?.nativeID, props.htmlFor]);\n\n  return (\n    <Box\n      _web={{\n        //@ts-ignore\n        accessibilityRole: 'label',\n      }}\n      {...resolvedProps}\n      nativeID={resolvedProps?.labelId}\n      ref={mergedRef}\n    >\n      {children}\n      {resolvedProps?.isRequired && requiredAsterisk()}\n    </Box>\n  );\n};\nexport default memo(forwardRef(FormControlLabel));\n","import React, { memo, forwardRef } from 'react';\nimport Box from '../../primitives/Box';\nimport { HStack } from '../../primitives/Stack';\nimport { usePropsResolution } from '../../../hooks/useThemeProps';\nimport { useFormControlContext } from './useFormControl';\nimport type { IFormControlErrorMessageProps } from './types';\nimport { useHasResponsiveProps } from '../../../hooks/useHasResponsiveProps';\nimport { combineContextAndProps } from '../../../utils';\nimport Text from '../../primitives/Text';\n\nconst FormControlErrorMessage = (\n  props: IFormControlErrorMessageProps,\n  ref: any\n) => {\n  const formControlContext = useFormControlContext();\n  const combinedProps = combineContextAndProps(formControlContext, props);\n  const {\n    leftIcon,\n    rightIcon,\n    children,\n    _text,\n    _stack,\n    ...resolvedProps\n  } = usePropsResolution('FormControlErrorMessage', combinedProps, {\n    isDisabled: combinedProps.isDisabled,\n    isReadOnly: combinedProps.isReadOnly,\n    isInvalid: combinedProps.isInvalid,\n    // isRequired: combinedProps.isRequired,\n  });\n  let { startIcon, endIcon } = resolvedProps;\n\n  if (rightIcon) {\n    endIcon = rightIcon;\n  }\n  if (leftIcon) {\n    startIcon = leftIcon;\n  }\n  if (endIcon && React.isValidElement(endIcon)) {\n    endIcon = React.Children.map(\n      endIcon,\n      (child: JSX.Element, index: number) => {\n        return React.cloneElement(child, {\n          key: `button-end-icon-${index}`,\n          ..._text,\n          ...child.props,\n        });\n      }\n    );\n  }\n  if (startIcon && React.isValidElement(startIcon)) {\n    startIcon = React.Children.map(\n      startIcon,\n      (child: JSX.Element, index: number) => {\n        return React.cloneElement(child, {\n          key: `button-start-icon-${index}`,\n          ..._text,\n          ...child.props,\n        });\n      }\n    );\n  }\n\n  React.useEffect(() => {\n    resolvedProps?.setHasFeedbackText(true);\n    return () => {\n      resolvedProps?.setHasFeedbackText(false);\n    };\n  });\n  //TODO: refactor for responsive prop\n  if (useHasResponsiveProps(props)) {\n    return null;\n  }\n  return resolvedProps?.isInvalid && children ? (\n    <Box nativeID={resolvedProps?.helpTextId} {...resolvedProps} ref={ref}>\n      <HStack {..._stack}>\n        {startIcon}\n        <Text {..._text}>{children}</Text>\n        {endIcon}\n      </HStack>\n    </Box>\n  ) : null;\n};\n\nexport default memo(forwardRef(FormControlErrorMessage));\n","import React, { memo, forwardRef } from 'react';\nimport Box from '../../primitives/Box';\nimport { usePropsResolution } from '../../../hooks/useThemeProps';\nimport { useFormControlContext } from './useFormControl';\nimport type { IFormControlHelperTextProps } from './types';\nimport { useHasResponsiveProps } from '../../../hooks/useHasResponsiveProps';\nimport { combineContextAndProps } from '../../../utils';\n\nconst FormControlHelperText = (\n  props: IFormControlHelperTextProps,\n  ref: any\n) => {\n  const formControlContext = useFormControlContext();\n  const combinedProps = combineContextAndProps(formControlContext, props);\n  const resolvedProps = usePropsResolution(\n    'FormControlHelperText',\n    combinedProps,\n    {\n      isDisabled: combinedProps.isDisabled,\n      isReadOnly: combinedProps.isReadOnly,\n      isInvalid: combinedProps.isInvalid,\n      // isRequired: combinedProps.isRequired,\n    }\n  );\n\n  React.useEffect(() => {\n    resolvedProps?.setHasHelpText(true);\n    return () => {\n      resolvedProps?.setHasHelpText(false);\n    };\n  });\n  //TODO: refactor for responsive prop\n  if (useHasResponsiveProps(props)) {\n    return null;\n  }\n\n  return (\n    <Box {...resolvedProps} nativeID={resolvedProps?.feedbackId} ref={ref} />\n  );\n};\n\nexport default memo(forwardRef(FormControlHelperText));\n","import { default as FormControlBase } from './FormControl';\nimport { default as FormControlLabel } from './FormControlLabel';\nimport { default as FormControlErrorMessage } from './FormControlErrorMessage';\nimport { default as FormControlHelperText } from './FormControlHelperText';\nimport type { FormControlComponentType } from './types';\n\nlet FormControlTemp: any = FormControlBase;\nFormControlTemp.Label = FormControlLabel;\nFormControlTemp.ErrorMessage = FormControlErrorMessage;\nFormControlTemp.HelperText = FormControlHelperText;\n\n// To add typings\nconst FormControl = FormControlTemp as FormControlComponentType;\n\nexport { FormControl };\nexport {\n  FormControlContext,\n  useFormControl,\n  useFormControlProvider,\n  useFormControlContext,\n} from './useFormControl';\n\nexport type { IFormControlContext } from './useFormControl';\n\nexport type {\n  IFormControlProps,\n  IFormControlLabelProps,\n  IFormControlErrorMessageProps,\n  IFormControlHelperTextProps,\n} from './types';\n","export const ariaAttr = (condition: boolean | undefined) =>\n  condition ? true : undefined;\n","import React from 'react';\nimport { useId } from '@react-native-aria/utils';\nimport omit from 'lodash.omit';\nimport type { IFormControlProps } from './types';\nimport { ariaAttr } from '../../../utils';\nimport { ResponsiveQueryContext } from '../../../utils/useResponsiveQuery/ResponsiveQueryProvider';\nimport { uniqueId } from 'lodash';\n\nexport type IFormControlContext = Omit<\n  ReturnType<typeof useFormControlProvider>,\n  'htmlProps'\n>;\n\nexport const FormControlContext = React.createContext({});\n\nexport function useFormControlProvider(props: IFormControlProps) {\n  const {\n    nativeID: idProp,\n    isRequired,\n    isInvalid,\n    isDisabled,\n    isReadOnly,\n    ...htmlProps\n  } = props;\n\n  let id = uniqueId();\n  const responsiveQueryContext = React.useContext(ResponsiveQueryContext);\n  const disableCSSMediaQueries = responsiveQueryContext.disableCSSMediaQueries;\n\n  if (!disableCSSMediaQueries) {\n    // This if statement technically breaks the rules of hooks, but is safe\n    // because the condition never changes after mounting.\n    // eslint-disable-next-line react-hooks/rules-of-hooks\n    id = useId();\n  }\n\n  // const id = '';\n  // Generate all the required ids\n  const nativeID = idProp || `field-${id}`;\n\n  const labelId = `${nativeID}-label`;\n  const feedbackId = `${nativeID}-feedback`;\n  const helpTextId = `${nativeID}-helptext`;\n\n  /**\n   * Track whether the `FormErrorMessage` has been rendered.\n   * We use this to append its id the the `aria-describedby` of the `input`.\n   */\n  const [hasFeedbackText, setHasFeedbackText] = React.useState(false);\n\n  /**\n   * Track whether the `FormHelperText` has been rendered.\n   * We use this to append its id the the `aria-describedby` of the `input`.\n   */\n  const [hasHelpText, setHasHelpText] = React.useState(false);\n\n  const context = {\n    isRequired: !!isRequired,\n    isInvalid: !!isInvalid,\n    isReadOnly: !!isReadOnly,\n    isDisabled: !!isDisabled,\n    hasFeedbackText,\n    setHasFeedbackText,\n    hasHelpText,\n    setHasHelpText,\n    nativeID,\n    labelId,\n    feedbackId,\n    helpTextId,\n    htmlProps,\n  };\n\n  return context;\n}\n\n/**\n * React hook that provides the props that should be spread on to\n * input fields (`input`, `select`, `textarea`, etc.).\n *\n * It provides a convenient way to control a form fields, validation\n * and helper text.\n */\nexport function useFormControl(props: IFormControlProps) {\n  const field = useFormControlContext();\n  const describedBy: any[] = [];\n\n  // Error message must be described first in all scenarios.\n  if (field?.hasFeedbackText) describedBy.push(field?.feedbackId);\n  if (field?.hasHelpText) describedBy.push(field?.helpTextId);\n  const ariaDescribedBy = describedBy.join(' ');\n\n  const cleanProps = omit(props, [\n    'isInvalid',\n    'isDisabled',\n    'isReadOnly',\n    'isRequired',\n  ]);\n\n  return {\n    ...cleanProps,\n    nativeID: props.nativeID ?? field?.nativeID + '-input',\n    disabled: props.isDisabled || field?.isDisabled,\n    readOnly: props.isReadOnly || field?.isReadOnly,\n    required: props.isRequired || field?.isRequired,\n    accessibilityInvalid: ariaAttr(props.isInvalid || field?.isInvalid),\n    accessibilityRequired: ariaAttr(props.isRequired || field?.isRequired),\n    accessibilityReadOnly: ariaAttr(props.isReadOnly || field?.isReadOnly),\n    accessibilityDescribedBy: ariaDescribedBy || undefined,\n  };\n}\n\nexport const useFormControlContext = () => {\n  return (React.useContext(\n    FormControlContext\n  ) as unknown) as IFormControlContext;\n};\n","export const resolveStackStyleInput = (variant: any, color: any) => {\n  if (variant === 'underlined') {\n    return {\n      outlineWidth: '0',\n      boxShadow: `0 1px 0 0 ${color}`,\n    };\n  } else if (variant === 'unstyled') {\n    return {\n      outlineWidth: 0,\n    };\n  } else {\n    return {\n      outlineWidth: '0',\n      boxShadow: `0 0 0 1px ${color}`,\n    };\n  }\n};\n","import React, { memo, forwardRef } from 'react';\nimport type { IInputProps } from './types';\nimport { TextInput } from 'react-native';\nimport { useToken } from '../../../hooks';\nimport { useFormControl } from '../../composites/FormControl';\nimport { useHasResponsiveProps } from '../../../hooks/useHasResponsiveProps';\nimport { useHover } from '@react-native-aria/interactions';\nimport { extractInObject, stylingProps } from '../../../theme/tools/utils';\nimport { usePropsResolution } from '../../../hooks/useThemeProps';\nimport { mergeRefs, resolveStackStyleInput } from '../../../utils';\nimport { Stack } from '../Stack';\nimport { makeStyledComponent } from '../../../utils/styled';\nimport { useResolvedFontFamily } from '../../../hooks/useResolvedFontFamily';\n\nconst StyledInput = makeStyledComponent(TextInput);\n\nconst Input = (\n  {\n    isHovered: isHoveredProp,\n    isFocused: isFocusedProp,\n    onKeyPress,\n    InputLeftElement,\n    InputRightElement,\n    leftElement,\n    rightElement,\n    ...props\n  }: IInputProps,\n  ref: any\n) => {\n  const inputProps = useFormControl({\n    isDisabled: props.isDisabled,\n    isInvalid: props.isInvalid,\n    isReadOnly: props.isReadOnly,\n    isRequired: props.isRequired,\n    nativeID: props.nativeID,\n  });\n  const [isFocused, setIsFocused] = React.useState(false);\n  const handleFocus = (focusState: boolean, callback: any) => {\n    setIsFocused(focusState);\n    callback();\n  };\n\n  const _ref = React.useRef(null);\n  const { isHovered } = useHover({}, _ref);\n\n  const inputThemeProps = {\n    isDisabled: inputProps.disabled,\n    isInvalid: inputProps.accessibilityInvalid,\n    isReadOnly: inputProps.accessibilityReadOnly,\n    isRequired: inputProps.required,\n  };\n\n  const {\n    ariaLabel,\n    accessibilityLabel,\n    type,\n    isFullWidth,\n    isDisabled,\n    isReadOnly,\n    fontFamily,\n    fontWeight,\n    fontStyle,\n    placeholderTextColor,\n    selectionColor,\n    underlineColorAndroid,\n    onFocus,\n    onBlur,\n    wrapperRef,\n    _stack,\n    _input,\n\n    ...resolvedProps\n  } = usePropsResolution(\n    'Input',\n    {\n      ...inputThemeProps,\n      ...props,\n    },\n    {\n      isDisabled: inputThemeProps.isDisabled,\n      isHovered: isHoveredProp || isHovered,\n      isFocused: isFocusedProp || isFocused,\n      isInvalid: inputThemeProps.isInvalid,\n      isReadOnly: inputThemeProps.isReadOnly,\n    }\n  );\n\n  const [layoutProps, nonLayoutProps] = extractInObject(resolvedProps, [\n    ...stylingProps.margin,\n    ...stylingProps.border,\n    ...stylingProps.layout,\n    ...stylingProps.flexbox,\n    ...stylingProps.position,\n    ...stylingProps.background,\n    'shadow',\n    'opacity',\n  ]);\n\n  const resolvedFontFamily = useResolvedFontFamily({\n    fontFamily,\n    fontWeight: fontWeight ?? 400,\n    fontStyle: fontStyle ?? 'normal',\n  });\n  const resolvedPlaceholderTextColor = useToken('colors', placeholderTextColor);\n  const resolvedSelectionColor = useToken('colors', selectionColor);\n  const resolvedUnderlineColorAndroid = useToken(\n    'colors',\n    underlineColorAndroid\n  );\n\n  /**Converting into Hash Color Code */\n  //@ts-ignore\n  resolvedProps.focusOutlineColor = useToken(\n    'colors',\n    resolvedProps.focusOutlineColor\n  );\n  //@ts-ignore\n  resolvedProps.invalidOutlineColor = useToken(\n    'colors',\n    resolvedProps.invalidOutlineColor\n  );\n  //TODO: refactor for responsive prop\n  if (useHasResponsiveProps(props)) {\n    return null;\n  }\n\n  if (resolvedProps.focusOutlineColor && isFocused) {\n    layoutProps.borderColor = resolvedProps.focusOutlineColor;\n    _stack.style = resolveStackStyleInput(\n      props.variant,\n      resolvedProps.focusOutlineColor\n    );\n  }\n\n  if (resolvedProps.invalidOutlineColor && props.isInvalid) {\n    layoutProps.borderColor = resolvedProps.invalidOutlineColor;\n    _stack.style = resolveStackStyleInput(\n      props.variant,\n      resolvedProps.invalidOutlineColor\n    );\n  }\n\n  return (\n    <Stack\n      {..._stack}\n      {...layoutProps}\n      ref={mergeRefs([_ref, wrapperRef])}\n      isFocused={isFocused}\n    >\n      {InputLeftElement || leftElement ? InputLeftElement || leftElement : null}\n      <StyledInput\n        {...inputProps}\n        secureTextEntry={type === 'password'}\n        accessible\n        accessibilityLabel={ariaLabel || accessibilityLabel}\n        editable={isDisabled || isReadOnly ? false : true}\n        w={isFullWidth ? '100%' : undefined}\n        {...nonLayoutProps}\n        {...resolvedFontFamily}\n        placeholderTextColor={resolvedPlaceholderTextColor}\n        selectionColor={resolvedSelectionColor}\n        underlineColorAndroid={resolvedUnderlineColorAndroid}\n        onKeyPress={(e: any) => {\n          e.persist();\n          onKeyPress && onKeyPress(e);\n        }}\n        onFocus={(e: any) => {\n          handleFocus(true, onFocus ? () => onFocus(e) : () => {});\n        }}\n        onBlur={(e: any) => {\n          handleFocus(false, onBlur ? () => onBlur(e) : () => {});\n        }}\n        {..._input}\n        ref={mergeRefs([ref, _ref, wrapperRef])}\n      />\n      {InputRightElement || rightElement\n        ? InputRightElement || rightElement\n        : null}\n    </Stack>\n  );\n};\n\nexport default memo(forwardRef(Input));\n","export { InputGroup } from './InputGroup';\nexport { InputRightAddon, InputLeftAddon } from './InputAddons';\nexport type { IInputGroupProps, IInputProps } from './types';\n\nimport InputMain from './Input';\nimport type { IInputComponentType } from './types';\n\nconst InputTemp: any = InputMain;\n\n// To add typings\nconst Input = InputTemp as IInputComponentType;\n\nexport { Input };\n","export const combineContextAndProps = (context: any, props: any) => {\n  return {\n    ...context,\n    ...props,\n  };\n};\n"],"names":["FormControl","props","ref","useFormControlProvider","htmlProps","context","resolvedProps","usePropsResolution","isDisabled","isReadOnly","isInvalid","useHasResponsiveProps","React","FormControlContext","value","Box","memo","forwardRef","FormControlLabel","children","formControlContext","useFormControlContext","combinedProps","combineContextAndProps","_ref","_astrick","mergedRef","mergeRefs","current","htmlFor","nativeID","_web","accessibilityRole","labelId","isRequired","Text","accessibilityHidden","FormControlErrorMessage","leftIcon","rightIcon","_text","_stack","startIcon","endIcon","child","index","key","setHasFeedbackText","helpTextId","HStack","FormControlHelperText","setHasHelpText","feedbackId","FormControlTemp","FormControlBase","Label","ErrorMessage","HelperText","ariaAttr","condition","undefined","idProp","id","uniqueId","ResponsiveQueryContext","disableCSSMediaQueries","useId","hasFeedbackText","hasHelpText","useFormControl","field","describedBy","push","ariaDescribedBy","join","cleanProps","omit","disabled","readOnly","required","accessibilityInvalid","accessibilityRequired","accessibilityReadOnly","accessibilityDescribedBy","resolveStackStyleInput","variant","color","outlineWidth","boxShadow","StyledInput","makeStyledComponent","TextInput","Input","isHoveredProp","isHovered","isFocusedProp","isFocused","onKeyPress","InputLeftElement","InputRightElement","leftElement","rightElement","inputProps","setIsFocused","handleFocus","focusState","callback","useHover","inputThemeProps","ariaLabel","accessibilityLabel","type","isFullWidth","fontFamily","fontWeight","fontStyle","placeholderTextColor","selectionColor","underlineColorAndroid","onFocus","onBlur","wrapperRef","_input","extractInObject","stylingProps","layoutProps","nonLayoutProps","resolvedFontFamily","useResolvedFontFamily","resolvedPlaceholderTextColor","useToken","resolvedSelectionColor","resolvedUnderlineColorAndroid","focusOutlineColor","invalidOutlineColor","borderColor","style","Stack","secureTextEntry","accessible","editable","w","e","persist"],"sourceRoot":""}