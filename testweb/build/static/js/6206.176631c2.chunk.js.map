{"version":3,"file":"static/js/6206.176631c2.chunk.js","mappings":"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","sources":["../node_modules/@react-aria/label/dist/packages/@react-aria/label/src/useLabel.ts","../node_modules/@react-aria/visually-hidden/dist/packages/@react-aria/visually-hidden/src/VisuallyHidden.tsx","../node_modules/@react-stately/utils/dist/packages/@react-stately/utils/src/useControlledState.ts","../node_modules/native-base/lib/module/components/composites/Divider/index.tsx","../node_modules/native-base/lib/module/components/primitives/Button/Button.tsx","../node_modules/native-base/lib/module/components/primitives/Button/ButtonGroup.tsx","../node_modules/native-base/lib/module/components/primitives/Button/index.tsx","../node_modules/@react-aria/checkbox/dist/packages/@react-aria/checkbox/src/useCheckbox.ts","../node_modules/@react-aria/toggle/dist/packages/@react-aria/toggle/src/useToggle.ts","../node_modules/@react-aria/checkbox/dist/packages/@react-aria/checkbox/src/utils.ts","../node_modules/@react-aria/checkbox/dist/packages/@react-aria/checkbox/src/useCheckboxGroupItem.ts","../node_modules/@react-stately/toggle/dist/packages/@react-stately/toggle/src/useToggleState.ts","../node_modules/@react-native-aria/checkbox/lib/module/useCheckboxGroup.web.ts","../node_modules/@react-aria/checkbox/dist/packages/@react-aria/checkbox/src/useCheckboxGroup.ts","../node_modules/native-base/lib/module/components/primitives/Checkbox/CheckboxGroup.tsx","../node_modules/native-base/node_modules/@react-stately/checkbox/dist/packages/@react-stately/checkbox/src/useCheckboxGroupState.ts","../node_modules/native-base/lib/module/components/primitives/Checkbox/SizedIcon.tsx","../node_modules/native-base/lib/module/components/primitives/Checkbox/Checkbox.web.tsx","../node_modules/native-base/lib/module/components/primitives/Checkbox/index.tsx","../node_modules/native-base/lib/module/components/primitives/Icon/Icons/Chevron.tsx","../node_modules/native-base/node_modules/@react-stately/toggle/dist/packages/@react-stately/toggle/src/useToggleState.ts"],"sourcesContent":["/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {AriaLabelingProps, DOMAttributes, DOMProps, LabelableProps} from '@react-types/shared';\nimport {ElementType, LabelHTMLAttributes} from 'react';\nimport {useId, useLabels} from '@react-aria/utils';\n\nexport interface LabelAriaProps extends LabelableProps, DOMProps, AriaLabelingProps {\n  /**\n   * The HTML element used to render the label, e.g. 'label', or 'span'.\n   * @default 'label'\n   */\n  labelElementType?: ElementType\n}\n\nexport interface LabelAria {\n  /** Props to apply to the label container element. */\n  labelProps: DOMAttributes | LabelHTMLAttributes<HTMLLabelElement>,\n  /** Props to apply to the field container element being labeled. */\n  fieldProps: AriaLabelingProps & DOMProps\n}\n\n/**\n * Provides the accessibility implementation for labels and their associated elements.\n * Labels provide context for user inputs.\n * @param props - The props for labels and fields.\n */\nexport function useLabel(props: LabelAriaProps): LabelAria {\n  let {\n    id,\n    label,\n    'aria-labelledby': ariaLabelledby,\n    'aria-label': ariaLabel,\n    labelElementType = 'label'\n  } = props;\n\n  id = useId(id);\n  let labelId = useId();\n  let labelProps = {};\n  if (label) {\n    ariaLabelledby = ariaLabelledby ? `${ariaLabelledby} ${labelId}` : labelId;\n    labelProps = {\n      id: labelId,\n      htmlFor: labelElementType === 'label' ? id : undefined\n    };\n  } else if (!ariaLabelledby && !ariaLabel) {\n    console.warn('If you do not provide a visible label, you must specify an aria-label or aria-labelledby attribute for accessibility');\n  }\n\n  let fieldProps = useLabels({\n    id,\n    'aria-label': ariaLabel,\n    'aria-labelledby': ariaLabelledby\n  });\n\n  return {\n    labelProps,\n    fieldProps\n  };\n}\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {DOMAttributes} from '@react-types/shared';\nimport {mergeProps} from '@react-aria/utils';\nimport React, {CSSProperties, JSXElementConstructor, ReactNode, useMemo, useState} from 'react';\nimport {useFocus} from '@react-aria/interactions';\n\nexport interface VisuallyHiddenProps extends DOMAttributes {\n  /** The content to visually hide. */\n  children?: ReactNode,\n\n  /**\n   * The element type for the container.\n   * @default 'div'\n   */\n  elementType?: string | JSXElementConstructor<any>,\n\n  /** Whether the element should become visible on focus, for example skip links. */\n  isFocusable?: boolean\n}\n\nconst styles: CSSProperties = {\n  border: 0,\n  clip: 'rect(0 0 0 0)',\n  clipPath: 'inset(50%)',\n  height: 1,\n  margin: '0 -1px -1px 0',\n  overflow: 'hidden',\n  padding: 0,\n  position: 'absolute',\n  width: 1,\n  whiteSpace: 'nowrap'\n};\n\nexport interface VisuallyHiddenAria {\n  visuallyHiddenProps: DOMAttributes\n}\n\n/**\n * Provides props for an element that hides its children visually\n * but keeps content visible to assistive technology.\n */\nexport function useVisuallyHidden(props: VisuallyHiddenProps = {}): VisuallyHiddenAria {\n  let {\n    style,\n    isFocusable\n  } = props;\n\n  let [isFocused, setFocused] = useState(false);\n  let {focusProps} = useFocus({\n    isDisabled: !isFocusable,\n    onFocusChange: setFocused\n  });\n\n  // If focused, don't hide the element.\n  let combinedStyles = useMemo(() => {\n    if (isFocused) {\n      return style;\n    } else if (style) {\n      return {...styles, ...style};\n    } else {\n      return styles;\n    }\n  }, [isFocused]);\n\n  return {\n    visuallyHiddenProps: {\n      ...focusProps,\n      style: combinedStyles\n    }\n  };\n}\n\n/**\n * VisuallyHidden hides its children visually, while keeping content visible\n * to screen readers.\n */\nexport function VisuallyHidden(props: VisuallyHiddenProps) {\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  let {children, elementType: Element = 'div', isFocusable, style, ...otherProps} = props;\n  let {visuallyHiddenProps} = useVisuallyHidden(props);\n\n  return (\n    <Element {...mergeProps(otherProps, visuallyHiddenProps)}>\n      {children}\n    </Element>\n  );\n}\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {useCallback, useRef, useState} from 'react';\n\nexport function useControlledState<T>(\n  value: T,\n  defaultValue: T,\n  onChange: (value: T, ...args: any[]) => void\n): [T, (value: T, ...args: any[]) => void]  {\n  let [stateValue, setStateValue] = useState(value || defaultValue);\n  let ref = useRef(value !== undefined);\n  let wasControlled = ref.current;\n  let isControlled = value !== undefined;\n  // Internal state reference for useCallback\n  let stateRef = useRef(stateValue);\n  if (wasControlled !== isControlled) {\n    console.warn(`WARN: A component changed from ${wasControlled ? 'controlled' : 'uncontrolled'} to ${isControlled ? 'controlled' : 'uncontrolled'}.`);\n  }\n\n  ref.current = isControlled;\n\n  let setValue = useCallback((value, ...args) => {\n    let onChangeCaller = (value, ...onChangeArgs) => {\n      if (onChange) {\n        if (!Object.is(stateRef.current, value)) {\n          onChange(value, ...onChangeArgs);\n        }\n      }\n      if (!isControlled) {\n        stateRef.current = value;\n      }\n    };\n\n    if (typeof value === 'function') {\n      console.warn('We can not support a function callback. See Github Issues for details https://github.com/adobe/react-spectrum/issues/2320');\n      // this supports functional updates https://reactjs.org/docs/hooks-reference.html#functional-updates\n      // when someone using useControlledState calls setControlledState(myFunc)\n      // this will call our useState setState with a function as well which invokes myFunc and calls onChange with the value from myFunc\n      // if we're in an uncontrolled state, then we also return the value of myFunc which to setState looks as though it was just called with myFunc from the beginning\n      // otherwise we just return the controlled value, which won't cause a rerender because React knows to bail out when the value is the same\n      let updateFunction = (oldValue, ...functionArgs) => {\n        let interceptedValue = value(isControlled ? stateRef.current : oldValue, ...functionArgs);\n        onChangeCaller(interceptedValue, ...args);\n        if (!isControlled) {\n          return interceptedValue;\n        }\n        return oldValue;\n      };\n      setStateValue(updateFunction);\n    } else {\n      if (!isControlled) {\n        setStateValue(value);\n      }\n      onChangeCaller(value, ...args);\n    }\n  }, [isControlled, onChange]);\n\n  // If a controlled component's value prop changes, we need to update stateRef\n  if (isControlled) {\n    stateRef.current = value;\n  } else {\n    value = stateValue;\n  }\n\n  return [value, setValue];\n}\n","import React, { memo, forwardRef } from 'react';\nimport { Platform } from 'react-native';\nimport { usePropsResolution } from '../../../hooks/useThemeProps';\nimport Box from './../../primitives/Box';\nimport type { IDividerProps } from './types';\nimport { useHasResponsiveProps } from '../../../hooks/useHasResponsiveProps';\n\nconst Divider = (props: IDividerProps, ref?: any) => {\n  const { orientation, ...resolvedProps } = usePropsResolution(\n    'Divider',\n    props,\n    {},\n    { resolveResponsively: ['thickness'] }\n  );\n  //TODO: refactor for responsive prop\n  if (useHasResponsiveProps(props)) {\n    return null;\n  }\n  return (\n    <Box\n      {...resolvedProps}\n      ref={ref}\n      aria-orientation={orientation}\n      //@ts-ignore web only role\n      accessibilityRole={Platform.OS === 'web' ? 'separator' : undefined}\n    />\n  );\n};\n\nexport default memo(forwardRef(Divider));\n","import React, { memo, forwardRef } from 'react';\nimport Spinner from '../Spinner';\nimport { usePropsResolution } from '../../../hooks/useThemeProps';\nimport { default as Box, IBoxProps } from '../Box';\nimport HStack from '../Stack/HStack';\nimport { Pressable } from '../Pressable';\nimport type { IButtonProps } from './types';\nimport { composeEventHandlers } from '../../../utils';\nimport {\n  useHover,\n  useFocus,\n  useIsPressed,\n} from '../../primitives/Pressable/Pressable';\nimport { useFocusRing } from '@react-native-aria/focus';\nimport { useHasResponsiveProps } from '../../../hooks/useHasResponsiveProps';\n\nconst Button = (\n  {\n    //@ts-ignore\n    children,\n    startIcon,\n    rightIcon,\n    leftIcon,\n    endIcon,\n    spinner,\n    isDisabled,\n    isLoading,\n    isHovered: isHoveredProp,\n    isPressed: isPressedProp,\n    isFocused: isFocusedProp,\n    isFocusVisible: isFocusVisibleProp,\n    spinnerPlacement = 'start',\n    ...props\n  }: IButtonProps & IBoxProps,\n  ref: any\n) => {\n  const { hoverProps, isHovered } = useHover();\n  const { pressableProps, isPressed } = useIsPressed();\n  const { focusProps, isFocused } = useFocus();\n  const { isFocusVisible, focusProps: focusRingProps }: any = useFocusRing();\n\n  const {\n    onPressIn,\n    onPressOut,\n    onHoverIn,\n    onHoverOut,\n    onFocus,\n    onBlur,\n    _text,\n    _stack,\n    _spinner,\n    isLoadingText,\n    _icon,\n    ...resolvedProps\n  } = usePropsResolution('Button', props, {\n    isDisabled,\n    isHovered: isHoveredProp || isHovered,\n    isFocused: isFocusedProp || isFocused,\n    isPressed: isPressedProp || isPressed,\n    isLoading,\n    isFocusVisible: isFocusVisibleProp || isFocusVisible,\n  });\n\n  //TODO: refactor for responsive prop\n  if (useHasResponsiveProps(props)) {\n    return null;\n  }\n\n  if (leftIcon) {\n    startIcon = leftIcon;\n  }\n  if (rightIcon) {\n    endIcon = rightIcon;\n  }\n  if (endIcon && React.isValidElement(endIcon)) {\n    endIcon = React.Children.map(\n      endIcon,\n      (child: JSX.Element, index: number) => {\n        return React.cloneElement(child, {\n          key: `button-end-icon-${index}`,\n          ..._icon,\n          ...child.props,\n        });\n      }\n    );\n  }\n  if (startIcon && React.isValidElement(startIcon)) {\n    startIcon = React.Children.map(\n      startIcon,\n      (child: JSX.Element, index: number) => {\n        return React.cloneElement(child, {\n          key: `button-start-icon-${index}`,\n          ..._icon,\n          ...child.props,\n        });\n      }\n    );\n  }\n\n  const spinnerElement = spinner ? (\n    spinner\n  ) : (\n    <Spinner color={_text?.color} {..._spinner} />\n  );\n\n  const boxChildren = (child: any) => {\n    return child ? <Box _text={_text}>{child}</Box> : null;\n  };\n\n  return (\n    <Pressable\n      disabled={isDisabled || isLoading}\n      ref={ref}\n      onPressIn={composeEventHandlers(onPressIn, pressableProps.onPressIn)}\n      onPressOut={composeEventHandlers(onPressOut, pressableProps.onPressOut)}\n      // @ts-ignore - web only\n      onHoverIn={composeEventHandlers(onHoverIn, hoverProps.onHoverIn)}\n      // @ts-ignore - web only\n      onHoverOut={composeEventHandlers(onHoverOut, hoverProps.onHoverOut)}\n      // @ts-ignore - web only\n      onFocus={composeEventHandlers(\n        composeEventHandlers(onFocus, focusProps.onFocus),\n        focusRingProps.onFocus\n      )}\n      // @ts-ignore - web only\n      onBlur={composeEventHandlers(\n        composeEventHandlers(onBlur, focusProps.onBlur),\n        focusRingProps.onBlur\n      )}\n      {...resolvedProps}\n      accessibilityRole={props.accessibilityRole ?? 'button'}\n    >\n      <HStack {..._stack} test={true}>\n        {startIcon && !isLoading ? startIcon : null}\n        {isLoading && spinnerPlacement === 'start' ? spinnerElement : null}\n        {isLoading\n          ? isLoadingText\n            ? boxChildren(isLoadingText)\n            : null\n          : boxChildren(children)}\n\n        {endIcon && !isLoading ? endIcon : null}\n        {isLoading && spinnerPlacement === 'end' ? spinnerElement : null}\n      </HStack>\n    </Pressable>\n  );\n};\n\nexport default memo(forwardRef(Button));\n","import React, { memo, forwardRef } from 'react';\nimport type { IButtonGroupProps } from './types';\nimport { usePropsResolution } from '../../../hooks/useThemeProps';\nimport { Stack } from '../Stack';\nimport { useHasResponsiveProps } from '../../../hooks/useHasResponsiveProps';\n\nexport default memo(\n  forwardRef(\n    (\n      { children, divider, variant, ...props }: IButtonGroupProps,\n      ref?: any\n    ) => {\n      const {\n        space,\n        direction,\n\n        size,\n        colorScheme,\n        isDisabled,\n        isAttached,\n        ...newProps\n      } = usePropsResolution('ButtonGroup', props);\n\n      const { borderRadius } = usePropsResolution('Button', props);\n      let computedChildren;\n\n      if (Array.isArray(children)) {\n        computedChildren = React.Children.toArray(children).map(\n          (child: any, index: number) => {\n            if (typeof child === 'string' || typeof child === 'number')\n              return child;\n            return React.cloneElement(child, {\n              key: `button-group-child-${index}`,\n              variant,\n              size,\n              colorScheme,\n              isDisabled,\n\n              // when buttons are attached, remove rounded corners of all buttons except extreme buttons\n              ...(isAttached ? { borderRadius: 0 } : {}),\n              ...(isAttached && index === 0\n                ? direction === 'column'\n                  ? { borderTopRadius: borderRadius }\n                  : { borderLeftRadius: borderRadius }\n                : {}),\n              ...(isAttached && index === children?.length - 1\n                ? direction === 'column'\n                  ? { borderBottomRadius: borderRadius }\n                  : { borderRightRadius: borderRadius }\n                : {}),\n\n              //when buttons are attached, remove double border from them, just keep borderRight in case for direction row and borderBottom in case of direction column for every component\n              ...(isAttached && index !== 0\n                ? direction === 'column'\n                  ? { borderTopWidth: 0 }\n                  : { borderLeftWidth: 0 }\n                : {}),\n              ...child.props,\n            });\n          }\n        );\n      } else {\n        computedChildren = React.Children.toArray(children).map(\n          (child: any, index: number) => {\n            return React.cloneElement(child, {\n              key: `button-group-child-${index}`,\n              variant,\n              size,\n              colorScheme,\n              isDisabled,\n              ...child.props,\n            });\n          }\n        );\n      }\n      //TODO: refactor for responsive prop\n      if (useHasResponsiveProps(props)) {\n        return null;\n      }\n      return (\n        <Stack\n          divider={divider}\n          space={isAttached ? 0 : space}\n          direction={direction}\n          {...newProps}\n          ref={ref}\n        >\n          {computedChildren}\n        </Stack>\n      );\n    }\n  )\n);\n","import ButtonMain from './Button';\nimport ButtonGroup from './ButtonGroup';\nimport type { IButtonComponentType } from './types';\n\nconst ButtonTemp: any = ButtonMain;\nButtonTemp.Group = ButtonGroup;\n\n// To add typings\nconst Button = ButtonTemp as IButtonComponentType;\n\nexport { Button };\nexport type { IButtonGroupProps, IButtonProps } from './types';\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {AriaCheckboxProps} from '@react-types/checkbox';\nimport {InputHTMLAttributes, RefObject, useEffect} from 'react';\nimport {ToggleState} from '@react-stately/toggle';\nimport {useToggle} from '@react-aria/toggle';\n\nexport interface CheckboxAria {\n  /** Props for the input element. */\n  inputProps: InputHTMLAttributes<HTMLInputElement>\n}\n\n/**\n * Provides the behavior and accessibility implementation for a checkbox component.\n * Checkboxes allow users to select multiple items from a list of individual items, or\n * to mark one individual item as selected.\n * @param props - Props for the checkbox.\n * @param state - State for the checkbox, as returned by `useToggleState`.\n * @param inputRef - A ref for the HTML input element.\n */\nexport function useCheckbox(props: AriaCheckboxProps, state: ToggleState, inputRef: RefObject<HTMLInputElement>): CheckboxAria {\n  let {inputProps} = useToggle(props, state, inputRef);\n  let {isSelected} = state;\n\n  let {isIndeterminate} = props;\n  useEffect(() => {\n    // indeterminate is a property, but it can only be set via javascript\n    // https://css-tricks.com/indeterminate-checkboxes/\n    if (inputRef.current) {\n      inputRef.current.indeterminate = isIndeterminate;\n    }\n  });\n\n  return {\n    inputProps: {\n      ...inputProps,\n      checked: isSelected,\n      'aria-checked': isIndeterminate ? 'mixed' : isSelected\n    }\n  };\n}\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {AriaToggleProps} from '@react-types/checkbox';\nimport {filterDOMProps, mergeProps} from '@react-aria/utils';\nimport {InputHTMLAttributes, RefObject} from 'react';\nimport {ToggleState} from '@react-stately/toggle';\nimport {useFocusable} from '@react-aria/focus';\nimport {usePress} from '@react-aria/interactions';\n\nexport interface ToggleAria {\n  /**\n   * Props to be spread on the input element.\n   */\n  inputProps: InputHTMLAttributes<HTMLInputElement>\n}\n\n/**\n * Handles interactions for toggle elements, e.g. Checkboxes and Switches.\n */\nexport function useToggle(props: AriaToggleProps, state: ToggleState, ref: RefObject<HTMLInputElement>): ToggleAria {\n  let {\n    isDisabled = false,\n    isRequired,\n    isReadOnly,\n    value,\n    name,\n    children,\n    'aria-label': ariaLabel,\n    'aria-labelledby': ariaLabelledby,\n    validationState = 'valid'\n  } = props;\n\n  let onChange = (e) => {\n    // since we spread props on label, onChange will end up there as well as in here.\n    // so we have to stop propagation at the lowest level that we care about\n    e.stopPropagation();\n    state.setSelected(e.target.checked);\n  };\n\n  let hasChildren = children != null;\n  let hasAriaLabel = ariaLabel != null || ariaLabelledby != null;\n  if (!hasChildren && !hasAriaLabel) {\n    console.warn('If you do not provide children, you must specify an aria-label for accessibility');\n  }\n\n  // This handles focusing the input on pointer down, which Safari does not do by default.\n  let {pressProps} = usePress({\n    isDisabled\n  });\n\n  let {focusableProps} = useFocusable(props, ref);\n  let interactions = mergeProps(pressProps, focusableProps);\n  let domProps = filterDOMProps(props, {labelable: true});\n\n  return {\n    inputProps: mergeProps(domProps, {\n      'aria-invalid': validationState === 'invalid' || undefined,\n      'aria-errormessage': props['aria-errormessage'],\n      'aria-controls': props['aria-controls'],\n      'aria-readonly': isReadOnly || undefined,\n      'aria-required': isRequired || undefined,\n      onChange,\n      disabled: isDisabled,\n      value,\n      name,\n      type: 'checkbox',\n      ...interactions\n    })\n  };\n}\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {CheckboxGroupState} from '@react-stately/checkbox';\n\nexport const checkboxGroupNames = new WeakMap<CheckboxGroupState, string>();\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {AriaCheckboxGroupItemProps} from '@react-types/checkbox';\nimport {CheckboxAria, useCheckbox} from './useCheckbox';\nimport {checkboxGroupNames} from './utils';\nimport {CheckboxGroupState} from '@react-stately/checkbox';\nimport {RefObject} from 'react';\nimport {useToggleState} from '@react-stately/toggle';\n\n/**\n * Provides the behavior and accessibility implementation for a checkbox component contained within a checkbox group.\n * Checkbox groups allow users to select multiple items from a list of options.\n * @param props - Props for the checkbox.\n * @param state - State for the checkbox, as returned by `useCheckboxGroupState`.\n * @param inputRef - A ref for the HTML input element.\n */\nexport function useCheckboxGroupItem(props: AriaCheckboxGroupItemProps, state: CheckboxGroupState, inputRef: RefObject<HTMLInputElement>): CheckboxAria {\n  const toggleState = useToggleState({\n    isReadOnly: props.isReadOnly || state.isReadOnly,\n    isSelected: state.isSelected(props.value),\n    onChange(isSelected) {\n      if (isSelected) {\n        state.addValue(props.value);\n      } else {\n        state.removeValue(props.value);\n      }\n\n      if (props.onChange) {\n        props.onChange(isSelected);\n      }\n    }\n  });\n\n  let {inputProps} = useCheckbox({\n    ...props,\n    isReadOnly: props.isReadOnly || state.isReadOnly,\n    isDisabled: props.isDisabled || state.isDisabled,\n    name: props.name || checkboxGroupNames.get(state)\n  }, toggleState, inputRef);\n\n  return {inputProps};\n}\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {ToggleProps} from '@react-types/checkbox';\nimport {useControlledState} from '@react-stately/utils';\n\nexport interface ToggleState {\n  /** Whether the toggle is selected. */\n  readonly isSelected: boolean,\n\n  /** Updates selection state. */\n  setSelected(isSelected: boolean): void,\n\n  /** Toggle the selection state. */\n  toggle(): void\n}\n\n/**\n * Provides state management for toggle components like checkboxes and switches.\n */\nexport function useToggleState(props: ToggleProps = {}): ToggleState {\n  let {isReadOnly} = props;\n\n  // have to provide an empty function so useControlledState doesn't throw a fit\n  // can't use useControlledState's prop calling because we need the event object from the change\n  let [isSelected, setSelected] = useControlledState(props.isSelected, props.defaultSelected || false, props.onChange);\n\n  function updateSelected(value) {\n    if (!isReadOnly) {\n      setSelected(value);\n    }\n  }\n\n  function toggleState() {\n    if (!isReadOnly) {\n      setSelected(!isSelected);\n    }\n  }\n\n  return {\n    isSelected,\n    setSelected: updateSelected,\n    toggle: toggleState\n  };\n}\n","import { useCheckboxGroup as useCheckboxGroupWeb } from '@react-aria/checkbox';\nimport { AriaCheckboxGroupProps } from '@react-types/checkbox';\nimport { CheckboxGroupState } from '@react-stately/checkbox';\nimport { mapDomPropsToRN } from '@react-native-aria/utils';\n\ninterface CheckboxGroupAria {\n  /** Props for the checkbox group wrapper element. */\n  groupProps: any;\n  /** Props for the checkbox group's visible label (if any). */\n  labelProps: any;\n}\n\n/**\n * Provides the behavior and accessibility implementation for a checkbox group component.\n * Checkbox groups allow users to select multiple items from a list of options.\n * @param props - Props for the checkbox group.\n * @param state - State for the checkbox group, as returned by `useCheckboxGroupState`.\n */\nexport function useCheckboxGroup(\n  props: AriaCheckboxGroupProps,\n  state: CheckboxGroupState\n): CheckboxGroupAria {\n  const params = useCheckboxGroupWeb(props, state);\n  return {\n    labelProps: {\n      ...params.labelProps,\n      ...mapDomPropsToRN(params.labelProps),\n    },\n    groupProps: {\n      ...params.groupProps,\n      ...mapDomPropsToRN(params.groupProps),\n    },\n  };\n}\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {AriaCheckboxGroupProps} from '@react-types/checkbox';\nimport {checkboxGroupNames} from './utils';\nimport {CheckboxGroupState} from '@react-stately/checkbox';\nimport {DOMAttributes} from '@react-types/shared';\nimport {filterDOMProps, mergeProps} from '@react-aria/utils';\nimport {useLabel} from '@react-aria/label';\n\nexport interface CheckboxGroupAria {\n  /** Props for the checkbox group wrapper element. */\n  groupProps: DOMAttributes,\n  /** Props for the checkbox group's visible label (if any). */\n  labelProps: DOMAttributes\n}\n\n/**\n * Provides the behavior and accessibility implementation for a checkbox group component.\n * Checkbox groups allow users to select multiple items from a list of options.\n * @param props - Props for the checkbox group.\n * @param state - State for the checkbox group, as returned by `useCheckboxGroupState`.\n */\nexport function useCheckboxGroup(props: AriaCheckboxGroupProps, state: CheckboxGroupState): CheckboxGroupAria {\n  let {isDisabled, name} = props;\n\n  let {labelProps, fieldProps} = useLabel({\n    ...props,\n    // Checkbox group is not an HTML input element so it\n    // shouldn't be labeled by a <label> element.\n    labelElementType: 'span'\n  });\n\n  let domProps = filterDOMProps(props, {labelable: true});\n\n  // Pass name prop from group to all items by attaching to the state.\n  checkboxGroupNames.set(state, name);\n\n  return {\n    groupProps: mergeProps(domProps, {\n      role: 'group',\n      'aria-disabled': isDisabled || undefined,\n      ...fieldProps\n    }),\n    labelProps\n  };\n}\n","import React, { createContext, memo, forwardRef } from 'react';\nimport { useCheckboxGroupState } from '@react-stately/checkbox';\nimport { useCheckboxGroup } from '@react-native-aria/checkbox';\nimport { useFormControlContext } from '../../composites/FormControl';\nimport type { ICheckboxGroupProps, ICheckboxContext } from './types';\nimport Box from '../Box';\nimport { useHasResponsiveProps } from '../../../hooks/useHasResponsiveProps';\nimport { usePropsResolution } from '../../../hooks/useThemeProps';\n\nexport const CheckboxGroupContext = createContext<ICheckboxContext | null>(\n  null\n);\n\nfunction CheckboxGroup(\n  { size, _checkbox, colorScheme, ...props }: ICheckboxGroupProps,\n  ref?: any\n) {\n  const resolvedProps = usePropsResolution('CheckboxGroup', props);\n  const { children } = props;\n  const state = useCheckboxGroupState(props);\n  const { groupProps } = useCheckboxGroup(\n    { 'aria-label': props.accessibilityLabel, ...props },\n    state\n  );\n\n  const formControlContext = useFormControlContext();\n  //TODO: refactor for responsive prop\n  if (useHasResponsiveProps({ ...props, size, colorScheme })) {\n    return null;\n  }\n  return (\n    <CheckboxGroupContext.Provider\n      value={{\n        //@ts-ignore\n        size,\n        colorScheme,\n        ..._checkbox,\n        ...formControlContext,\n        state,\n      }}\n    >\n      <Box {...resolvedProps} {...groupProps} {...props} ref={ref}>\n        {children}\n      </Box>\n    </CheckboxGroupContext.Provider>\n  );\n}\n\nexport default memo(forwardRef(CheckboxGroup));\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {CheckboxGroupProps} from '@react-types/checkbox';\nimport {useControlledState} from '@react-stately/utils';\n\nexport interface CheckboxGroupState {\n  /** Current selected values. */\n  readonly value: readonly string[],\n\n  /** Whether the checkbox group is disabled. */\n  readonly isDisabled: boolean,\n\n  /** Whether the checkbox group is read only. */\n  readonly isReadOnly: boolean,\n\n  /** Returns whether the given value is selected. */\n  isSelected(value: string): boolean,\n\n  /** Sets the selected values. */\n  setValue(value: string[]): void,\n\n  /** Adds a value to the set of selected values. */\n  addValue(value: string): void,\n\n  /** Removes a value from the set of selected values. */\n  removeValue(value: string): void,\n\n  /** Toggles a value in the set of selected values. */\n  toggleValue(value: string): void\n}\n\n/**\n * Provides state management for a checkbox group component. Provides a name for the group,\n * and manages selection and focus state.\n */\nexport function useCheckboxGroupState(props: CheckboxGroupProps = {}): CheckboxGroupState {\n  let [selectedValues, setValue] = useControlledState(props.value, props.defaultValue || [], props.onChange);\n\n  const state: CheckboxGroupState = {\n    value: selectedValues,\n    setValue(value) {\n      if (props.isReadOnly || props.isDisabled) {\n        return;\n      }\n\n      setValue(value);\n    },\n    isDisabled: props.isDisabled || false,\n    isReadOnly: props.isReadOnly || false,\n    isSelected(value) {\n      return selectedValues.includes(value);\n    },\n    addValue(value) {\n      if (props.isReadOnly || props.isDisabled) {\n        return;\n      }\n      setValue(values => {\n        if (!values.includes(value)) {\n          return values.concat(value);\n        }\n        return values;\n      });\n    },\n    removeValue(value) {\n      if (props.isReadOnly || props.isDisabled) {\n        return;\n      }\n      setValue(values => {\n        if (values.includes(value)) {\n          return values.filter(existingValue => existingValue !== value);\n        }\n        return values;\n      });\n    },\n    toggleValue(value) {\n      if (props.isReadOnly || props.isDisabled) {\n        return;\n      }\n      setValue(values => {\n        if (values.includes(value)) {\n          return values.filter(existingValue => existingValue !== value);\n        }\n        return values.concat(value);\n      });\n    }\n  };\n\n  return state;\n}\n","import React from 'react';\nimport { default as Box } from '../../primitives/Box';\nimport { CheckIcon } from '../../primitives/Icon/Icons';\n\nconst SizedIcon = ({\n  icon,\n  _icon,\n  isChecked,\n}: {\n  icon: JSX.Element;\n  _icon: any;\n  isChecked: boolean;\n}) => {\n  return isChecked ? (\n    icon ? (\n      React.cloneElement(icon, {\n        ..._icon,\n      })\n    ) : (\n      <CheckIcon {..._icon} />\n    )\n  ) : (\n    <Box {..._icon} />\n  );\n};\n\nexport default SizedIcon;\n","import React, { memo, forwardRef } from 'react';\nimport { mergeRefs } from '../../../utils';\nimport { usePropsResolution } from '../../../hooks/useThemeProps';\nimport { Center } from '../../composites/Center';\nimport { useFormControlContext } from '../../composites/FormControl';\nimport Box from '../Box';\nimport type { ICheckboxProps } from './types';\nimport { useToggleState } from '@react-stately/toggle';\nimport { VisuallyHidden } from '@react-aria/visually-hidden';\nimport { CheckboxGroupContext } from './CheckboxGroup';\nimport { useHover } from '@react-native-aria/interactions';\nimport { useCheckbox, useCheckboxGroupItem } from '@react-native-aria/checkbox';\nimport { useFocusRing } from '@react-native-aria/focus';\nimport { useHasResponsiveProps } from '../../../hooks/useHasResponsiveProps';\nimport { extractInObject, stylingProps } from '../../../theme/tools/utils';\nimport { combineContextAndProps } from '../../../utils';\nimport SizedIcon from './SizedIcon';\nimport { Stack } from '../Stack';\nimport { wrapStringChild } from '../../../utils/wrapStringChild';\n\nconst Checkbox = (\n  {\n    wrapperRef,\n    isHovered: isHoveredProp,\n    isFocusVisible: isFocusVisibleProp,\n    ...props\n  }: ICheckboxProps,\n  ref: any\n) => {\n  const formControlContext = useFormControlContext();\n\n  const {\n    isInvalid,\n    isReadOnly,\n    isIndeterminate,\n    ...combinedProps\n  } = combineContextAndProps(formControlContext, props);\n\n  const checkboxGroupContext = React.useContext(CheckboxGroupContext);\n  const state = useToggleState({\n    ...props,\n    defaultSelected: props.defaultIsChecked,\n    isSelected: props.isChecked,\n  });\n\n  const _ref = React.useRef();\n  const mergedRef = mergeRefs([ref, _ref]);\n\n  // Swap hooks depending on whether this checkbox is inside a CheckboxGroup.\n  // This is a bit unorthodox. Typically, hooks cannot be called in a conditional,\n  // but since the checkbox won't move in and out of a group, it should be safe.\n  const { inputProps: groupItemInputProps } = checkboxGroupContext\n    ? // eslint-disable-next-line react-hooks/rules-of-hooks\n      useCheckboxGroupItem(\n        {\n          ...combinedProps,\n          'aria-label': combinedProps.accessibilityLabel,\n          'value': combinedProps.value,\n        },\n        checkboxGroupContext.state,\n        //@ts-ignore\n        mergedRef\n      )\n    : // eslint-disable-next-line react-hooks/rules-of-hooks\n      useCheckbox(\n        {\n          ...combinedProps,\n          'aria-label': combinedProps.accessibilityLabel,\n        },\n        state,\n        //@ts-ignore\n        mergedRef\n      );\n\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  const inputProps = React.useMemo(() => groupItemInputProps, [\n    groupItemInputProps.checked,\n    groupItemInputProps.disabled,\n    groupItemInputProps,\n  ]);\n\n  const [contextCombinedProps] = React.useState({\n    ...checkboxGroupContext,\n    ...combinedProps,\n  });\n\n  return (\n    <CheckboxComponent\n      wrapperRef={wrapperRef}\n      mergedRef={mergedRef}\n      inputProps={inputProps}\n      combinedProps={contextCombinedProps}\n      isInvalid={isInvalid}\n      isReadOnly={isReadOnly}\n      isHovered={isHoveredProp}\n      isIndeterminate={isIndeterminate}\n      isFocusVisible={isFocusVisibleProp}\n    />\n  );\n};\n\nconst CheckboxComponent = React.memo(\n  ({\n    wrapperRef,\n    inputProps,\n    combinedProps,\n    isInvalid,\n    isReadOnly,\n    isIndeterminate,\n    mergedRef,\n    isHovered: isHoveredProp,\n    isFocusVisible: isFocusVisibleProp,\n  }: any) => {\n    const _ref = React.useRef();\n    const { isHovered } = useHover({}, _ref);\n\n    const { checked: isChecked, disabled: isDisabled } = inputProps;\n\n    const { focusProps, isFocusVisible } = useFocusRing();\n\n    const {\n      icon,\n      _interactionBox,\n      _icon,\n      _stack,\n      _text,\n      ...resolvedProps\n    } = usePropsResolution('Checkbox', combinedProps, {\n      isInvalid,\n      isReadOnly,\n      isFocusVisible: isFocusVisibleProp || isFocusVisible,\n      isDisabled,\n      isIndeterminate,\n      isChecked,\n      isHovered: isHovered || isHoveredProp,\n    });\n\n    const [layoutProps, nonLayoutProps] = extractInObject(resolvedProps, [\n      ...stylingProps.margin,\n      ...stylingProps.layout,\n      ...stylingProps.flexbox,\n      ...stylingProps.position,\n      '_text',\n    ]);\n    const component = React.useMemo(() => {\n      return (\n        <Stack {..._stack} {...layoutProps}>\n          <Center>\n            {/* Interaction Box */}\n            <Box {..._interactionBox} />\n            {/* Checkbox */}\n            <Center {...nonLayoutProps}>\n              {/* {iconResolver()} */}\n              <SizedIcon icon={icon} _icon={_icon} isChecked={isChecked} />\n            </Center>\n          </Center>\n          {/* Label */}\n          {/* {resolvedProps?.children} */}\n          {wrapStringChild(resolvedProps?.children, _text)}\n        </Stack>\n      );\n    }, [\n      _icon,\n      _stack,\n      _text,\n      _interactionBox,\n      icon,\n      isChecked,\n      nonLayoutProps,\n      layoutProps,\n      resolvedProps?.children,\n    ]);\n\n    const mergedWrapperRef = React.useMemo(\n      () => mergeRefs([wrapperRef, _ref]),\n      [wrapperRef]\n    );\n\n    //TODO: refactor for responsive prop\n    if (useHasResponsiveProps(resolvedProps)) {\n      return null;\n    }\n\n    return (\n      <Box\n        // @ts-ignore - RN web supports accessibilityRole=\"label\"\n        accessibilityRole=\"label\"\n        ref={mergedWrapperRef}\n      >\n        <VisuallyHidden>\n          {/* <input {...props.inputProps} {...props.focusProps} ref={props.mergedRef} /> */}\n          <input {...inputProps} {...focusProps} ref={mergedRef} />\n        </VisuallyHidden>\n\n        {component}\n      </Box>\n    );\n  }\n);\n\nexport default memo(forwardRef(Checkbox));\n","import CheckboxMain from './Checkbox';\nimport CheckboxGroup from './CheckboxGroup';\nimport type { ICheckboxComponentType } from './types';\n\nconst CheckTemp: any = CheckboxMain;\nCheckTemp.Group = CheckboxGroup;\n\n// To add typings\nconst Checkbox = CheckTemp as ICheckboxComponentType;\n\nexport { Checkbox };\nexport type { ICheckboxGroupProps, ICheckboxProps } from './types';\n","import { createIcon } from '../createIcon';\n\nexport const ChevronUpIcon = createIcon({\n  viewBox: '0 0 24 24',\n  d:\n    'M20.2286 18L11.9973 9.62148L3.76862 17.9973L2 16.1971L12 6L22 16.1971L20.2286 18Z',\n});\n\nexport const ChevronDownIcon = createIcon({\n  viewBox: '0 0 24 24',\n  d:\n    'M20.2286 6L11.9973 14.3785L3.76862 6.00268L2 7.80293L12 18L22 7.80293L20.2286 6Z',\n});\n\nexport const ChevronLeftIcon = createIcon({\n  viewBox: '0 0 24 24',\n  d:\n    'M18 3.77141L9.62148 12.0027L17.9973 20.2314L16.1971 22L6 12L16.1971 2L18 3.77141Z',\n});\n\nexport const ChevronRightIcon = createIcon({\n  viewBox: '0 0 24 24',\n  d:\n    'M6 3.77141L14.3785 12.0027L6.00268 20.2314L7.80293 22L18 12L7.80293 2L6 3.77141Z',\n});\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {ToggleProps} from '@react-types/checkbox';\nimport {useControlledState} from '@react-stately/utils';\n\nexport interface ToggleState {\n  /** Whether the toggle is selected. */\n  readonly isSelected: boolean,\n\n  /** Updates selection state. */\n  setSelected(isSelected: boolean): void,\n  \n  /** Toggle the selection state. */\n  toggle(): void\n}\n\n/**\n * Provides state management for toggle components like checkboxes and switches.\n */\nexport function useToggleState(props: ToggleProps = {}): ToggleState {\n  let {isReadOnly, onChange} = props;\n\n  // have to provide an empty function so useControlledState doesn't throw a fit\n  // can't use useControlledState's prop calling because we need the event object from the change\n  let [isSelected, setSelected] = useControlledState(props.isSelected, props.defaultSelected || false, () => {});\n\n  function updateSelected(value) {\n    if (!isReadOnly) {\n      setSelected(value);\n      if (onChange) {\n        onChange(value);\n      }\n    }\n  }\n\n  function toggleState() {\n    if (!isReadOnly) {\n      setSelected(prev => {\n        let newVal = !prev;\n        if (onChange) {\n          onChange(newVal);\n        }\n        return newVal;\n      });\n    }\n  }\n\n  return {\n    isSelected,\n    setSelected: updateSelected,\n    toggle: toggleState\n  };\n}\n"],"names":["$d191a55c9702f145$export$8467354a121f1b9f","props","id","label","ariaLabelledby","ariaLabel","labelElementType","$iD7q0$useId","labelId","labelProps","htmlFor","undefined","console","warn","$iD7q0$useLabels","$5c3e21d68f1c4674$var$styles","border","clip","clipPath","height","margin","overflow","padding","position","width","whiteSpace","$5c3e21d68f1c4674$export$439d29a4e110a164","children","elementType","Element","otherProps","isFocusable","style","$9BxnE$useState","isFocused","setFocused","focusProps","$9BxnE$useFocus","isDisabled","onFocusChange","combinedStyles","$9BxnE$useMemo","visuallyHiddenProps","$5c3e21d68f1c4674$export$a966af930f325cab","$9BxnE$mergeProps","$458b0a5536c1a7cf$export$40bfa8c7b0832715","value1","defaultValue","onChange","$6imuh$useState","stateValue","setStateValue","ref","$6imuh$useRef","wasControlled","current","isControlled","stateRef","setValue","$6imuh$useCallback","value2","args","onChangeCaller","value","onChangeArgs","Object","is","updateFunction","oldValue","functionArgs","interceptedValue","Divider","usePropsResolution","resolveResponsively","orientation","resolvedProps","useHasResponsiveProps","React","Box","accessibilityRole","Platform","memo","forwardRef","Button","startIcon","rightIcon","leftIcon","endIcon","spinner","isLoading","isHoveredProp","isHovered","isPressedProp","isPressed","isFocusedProp","isFocusVisibleProp","isFocusVisible","spinnerPlacement","useHover","hoverProps","useIsPressed","pressableProps","useFocus","useFocusRing","focusRingProps","onPressIn","onPressOut","onHoverIn","onHoverOut","onFocus","onBlur","_text","_stack","_spinner","isLoadingText","_icon","child","index","key","spinnerElement","Spinner","color","boxChildren","Pressable","disabled","composeEventHandlers","HStack","test","computedChildren","divider","variant","space","direction","size","colorScheme","isAttached","newProps","borderRadius","Array","isArray","map","borderTopRadius","borderLeftRadius","length","borderBottomRadius","borderRightRadius","borderTopWidth","borderLeftWidth","Stack","ButtonTemp","ButtonMain","Group","ButtonGroup","$406796ff087fe49b$export$e375f10ce42261c5","state","inputRef","isRequired","isReadOnly","name","validationState","pressProps","$7CUUz$usePress","focusableProps","$7CUUz$useFocusable","interactions","$7CUUz$mergeProps","domProps","$7CUUz$filterDOMProps","labelable","inputProps","e","stopPropagation","setSelected","target","checked","type","$cKEhs$useToggle","isSelected","isIndeterminate","$cKEhs$useEffect","indeterminate","$1ae600c947479353$export$31440636951aa68c","WeakMap","$fba3e38d5ca8983f$export$353b32fc6898d37d","toggleState","$bOkae$useControlledState","defaultSelected","updateSelected","toggle","$cKEhs$useToggleState","addValue","removeValue","get","useCheckboxGroup","params","$cKEhs$useLabel","fieldProps","$cKEhs$filterDOMProps","set","groupProps","$cKEhs$mergeProps","role","useCheckboxGroupWeb","mapDomPropsToRN","CheckboxGroupContext","createContext","CheckboxGroup","_checkbox","useControlledState","selectedValues","includes","values","concat","filter","existingValue","toggleValue","useCheckboxGroupState","accessibilityLabel","formControlContext","useFormControlContext","Provider","icon","isChecked","CheckIcon","Checkbox","wrapperRef","combineContextAndProps","isInvalid","combinedProps","checkboxGroupContext","useToggleState","defaultIsChecked","_ref","mergedRef","mergeRefs","groupItemInputProps","useCheckboxGroupItem","useCheckbox","contextCombinedProps","CheckboxComponent","_interactionBox","extractInObject","stylingProps","layoutProps","nonLayoutProps","component","Center","SizedIcon","wrapStringChild","mergedWrapperRef","VisuallyHidden","CheckTemp","ChevronUpIcon","createIcon","viewBox","d","ChevronDownIcon","ChevronRightIcon","prev","newVal"],"sourceRoot":""}