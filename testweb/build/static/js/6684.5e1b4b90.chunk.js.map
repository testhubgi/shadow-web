{"version":3,"file":"static/js/6684.5e1b4b90.chunk.js","mappings":"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","sources":["../node_modules/native-base/lib/module/components/composites/Popover/PopoverContext.ts","../node_modules/native-base/lib/module/components/composites/Popover/Popover.tsx","../node_modules/native-base/lib/module/components/composites/Popover/PopoverContent.tsx","../node_modules/native-base/lib/module/components/composites/Popover/PopoverBody.tsx","../node_modules/native-base/lib/module/components/composites/Popover/PopoverCloseButton.tsx","../node_modules/native-base/lib/module/components/composites/Popover/PopoverFooter.tsx","../node_modules/native-base/lib/module/components/composites/Popover/PopoverHeader.tsx","../node_modules/native-base/lib/module/components/composites/Popover/PopoverArrow.tsx","../node_modules/native-base/lib/module/components/composites/Popover/index.tsx","../node_modules/native-base/lib/module/components/primitives/Button/Button.tsx","../node_modules/native-base/lib/module/components/primitives/Button/ButtonGroup.tsx","../node_modules/native-base/lib/module/components/primitives/Button/index.tsx"],"sourcesContent":["import React, { RefObject } from 'react';\n\nexport const PopoverContext = React.createContext({\n  onClose: () => {},\n  initialFocusRef: { current: null } as RefObject<any> | undefined,\n  finalFocusRef: { current: null } as RefObject<any> | undefined,\n  popoverContentId: undefined as string | undefined,\n  headerId: undefined as string | undefined,\n  bodyId: undefined as string | undefined,\n  setHeaderMounted: (() => {}) as any,\n  setBodyMounted: (() => {}) as any,\n  headerMounted: false,\n  bodyMounted: false,\n  isOpen: false,\n});\n","import React, { forwardRef, memo } from 'react';\nimport { Popper } from '../Popper';\nimport type { IPopoverProps } from './types';\nimport { mergeRefs } from '../../../utils';\nimport { useControllableState } from '../../../hooks';\nimport { PopoverContext } from './PopoverContext';\nimport Box from '../../primitives/Box';\nimport Backdrop from '../Backdrop';\nimport { FocusScope } from '@react-native-aria/focus';\nimport { PresenceTransition } from '../Transitions';\nimport { StyleSheet } from 'react-native';\nimport { useId } from '@react-native-aria/utils';\nimport { Overlay } from '../../primitives/Overlay';\nimport { useHasResponsiveProps } from '../../../hooks/useHasResponsiveProps';\nimport { uniqueId } from 'lodash';\nimport { ResponsiveQueryContext } from '../../../utils/useResponsiveQuery/ResponsiveQueryProvider';\n\nconst Popover = (\n  {\n    onOpen,\n    trigger,\n    onClose,\n    isOpen: isOpenProp,\n    children,\n    defaultIsOpen,\n    initialFocusRef,\n    finalFocusRef,\n    useRNModal,\n    trapFocus = true,\n    ...props\n  }: IPopoverProps,\n  ref: any\n) => {\n  const triggerRef = React.useRef(null);\n  const mergedRef = mergeRefs([triggerRef]);\n  const [isOpen, setIsOpen] = useControllableState({\n    value: isOpenProp,\n    defaultValue: defaultIsOpen,\n    onChange: (value) => {\n      value ? onOpen && onOpen() : onClose && onClose();\n    },\n  });\n\n  const [bodyMounted, setBodyMounted] = React.useState(false);\n  const [headerMounted, setHeaderMounted] = React.useState(false);\n  let id = uniqueId();\n  const responsiveQueryContext = React.useContext(ResponsiveQueryContext);\n  const disableCSSMediaQueries = responsiveQueryContext.disableCSSMediaQueries;\n\n  if (!disableCSSMediaQueries) {\n    // This if statement technically breaks the rules of hooks, but is safe\n    // because the condition never changes after mounting.\n    // eslint-disable-next-line react-hooks/rules-of-hooks\n    id = useId();\n  }\n\n  const popoverContentId = `${id}-content`;\n  const headerId = `${popoverContentId}-header`;\n  const bodyId = `${popoverContentId}-body`;\n\n  const handleOpen = React.useCallback(() => {\n    setIsOpen(true);\n  }, [setIsOpen]);\n\n  const updatedTrigger = () => {\n    return trigger(\n      {\n        'ref': mergedRef,\n        'onPress': handleOpen,\n        'aria-expanded': isOpen ? true : false,\n        'aria-controls': isOpen ? popoverContentId : undefined,\n        'aria-haspopup': true,\n      },\n      { open: isOpen }\n    );\n  };\n\n  const handleClose = () => {\n    setIsOpen(false);\n  };\n  //TODO: refactor for responsive prop\n  if (useHasResponsiveProps(props)) {\n    return null;\n  }\n\n  return (\n    <Box ref={ref}>\n      {updatedTrigger()}\n      <Overlay\n        isOpen={isOpen}\n        onRequestClose={handleClose}\n        useRNModalOnAndroid\n        useRNModal={useRNModal}\n        unmountOnExit\n      >\n        <PresenceTransition\n          initial={{ opacity: 0 }}\n          animate={{ opacity: 1, transition: { duration: 150 } }}\n          exit={{ opacity: 0, scale: 0.95, transition: { duration: 100 } }}\n          visible={isOpen}\n          style={StyleSheet.absoluteFill}\n        >\n          <Popper onClose={handleClose} triggerRef={triggerRef} {...props}>\n            <Backdrop onPress={handleClose} bg=\"transparent\" />\n            <PopoverContext.Provider\n              value={{\n                onClose: handleClose,\n                initialFocusRef,\n                finalFocusRef,\n                popoverContentId,\n                bodyId,\n                headerId,\n                headerMounted,\n                bodyMounted,\n                setBodyMounted,\n                setHeaderMounted,\n                isOpen,\n              }}\n            >\n              <FocusScope contain={trapFocus} restoreFocus autoFocus>\n                {children}\n              </FocusScope>\n            </PopoverContext.Provider>\n          </Popper>\n        </PresenceTransition>\n      </Overlay>\n    </Box>\n  );\n};\n\nexport default memo(forwardRef(Popover));\n","import {\n  useKeyboardDismissable,\n  usePropsResolution,\n  useToken,\n} from '../../../hooks';\nimport React from 'react';\nimport { Platform } from 'react-native';\nimport type { IPopoverContentProps } from './types';\nimport { Popper } from '../Popper';\nimport { PopoverContext } from './PopoverContext';\nimport { useHasResponsiveProps } from '../../../hooks/useHasResponsiveProps';\n\nexport const PopoverContent = React.forwardRef(\n  (props: IPopoverContentProps, ref: any) => {\n    const {\n      onClose,\n      initialFocusRef,\n      finalFocusRef,\n      popoverContentId,\n      headerMounted,\n      bodyMounted,\n      bodyId,\n      headerId,\n      isOpen,\n    } = React.useContext(PopoverContext);\n    const resolvedProps = usePropsResolution('PopoverContent', props);\n\n    const arrowDefaultColor =\n      props.bgColor ??\n      props.bg ??\n      props.backgroundColor ??\n      resolvedProps.backgroundColor;\n    const color = useToken('colors', arrowDefaultColor);\n\n    React.useEffect(() => {\n      const finalFocusRefCurrentVal = finalFocusRef?.current;\n      if (initialFocusRef && initialFocusRef.current) {\n        initialFocusRef.current.focus();\n      }\n\n      return () => {\n        if (finalFocusRefCurrentVal) {\n          finalFocusRefCurrentVal.focus();\n        }\n      };\n    }, [finalFocusRef, initialFocusRef]);\n\n    useKeyboardDismissable({\n      enabled: true,\n      callback: onClose,\n    });\n\n    let arrowElement = null;\n    const restChildren: any = [];\n    React.Children.toArray(props.children).forEach((child: any) => {\n      if (child?.type?.displayName === 'PopperArrow') {\n        arrowElement = React.cloneElement(child, {\n          backgroundColor: child.props.color ?? color,\n        });\n      } else {\n        restChildren.push(child);\n      }\n    });\n\n    const accessibilityProps =\n      Platform.OS === 'web'\n        ? ({\n            'accessibilityRole': 'dialog',\n            'aria-labelledby': headerMounted ? headerId : undefined,\n            'aria-describedby': bodyMounted ? bodyId : undefined,\n          } as any)\n        : {};\n\n    //TODO: refactor for responsive prop\n    if (useHasResponsiveProps(props)) {\n      return null;\n    }\n\n    return (\n      <Popper.Content\n        nativeID={popoverContentId}\n        {...accessibilityProps}\n        {...resolvedProps}\n        ref={ref}\n        isOpen={isOpen}\n      >\n        {arrowElement}\n        {restChildren}\n      </Popper.Content>\n    );\n  }\n);\n\nPopoverContent.displayName = 'PopoverContent';\n","import { usePropsResolution } from '../../../hooks';\nimport React, { useContext, memo, forwardRef, useEffect } from 'react';\nimport { default as Box, IBoxProps } from '../../primitives/Box';\nimport { PopoverContext } from './PopoverContext';\nimport { useHasResponsiveProps } from '../../../hooks/useHasResponsiveProps';\n\nconst PopoverBody = (props: IBoxProps, ref?: any) => {\n  const resolvedProps = usePropsResolution('PopoverBody', props);\n  const { setBodyMounted, bodyId } = useContext(PopoverContext);\n\n  useEffect(() => {\n    setBodyMounted(true);\n    return () => {\n      setBodyMounted(false);\n    };\n  }, [setBodyMounted]);\n\n  //TODO: refactor for responsive prop\n  if (useHasResponsiveProps(props)) {\n    return null;\n  }\n  return <Box nativeID={bodyId} {...resolvedProps} ref={ref} />;\n};\n\nexport default memo(forwardRef(PopoverBody));\n","import React from 'react';\nimport { usePropsResolution } from '../../../hooks';\nimport { Pressable } from '../../primitives/Pressable';\nimport { CloseIcon } from '../../primitives/Icon/Icons';\nimport { PopoverContext } from './PopoverContext';\nimport type { IButtonProps } from '../../primitives/Button';\nimport { useHasResponsiveProps } from '../../../hooks/useHasResponsiveProps';\nimport {\n  useHover,\n  useFocus,\n  useIsPressed,\n} from '../../primitives/Pressable/Pressable';\nimport { composeEventHandlers } from '../../../utils';\nimport { useFocusRing } from '@react-native-aria/focus';\n\nconst PopoverCloseButton = (props: IButtonProps, ref: any) => {\n  const { onClose }: any = React.useContext(PopoverContext);\n  const { hoverProps, isHovered } = useHover();\n  const { pressableProps, isPressed } = useIsPressed();\n  const { focusProps, isFocused } = useFocus();\n  const { isFocusVisible, focusProps: focusRingProps }: any = useFocusRing();\n\n  const {\n    _icon,\n    onPressIn,\n    onPressOut,\n    onHoverIn,\n    onHoverOut,\n    onFocus,\n    onBlur,\n    ...resolvedProps\n  } = usePropsResolution('PopoverCloseButton', props, {\n    isHovered,\n    isPressed,\n    isFocused,\n    isFocusVisible,\n  });\n  //TODO: refactor for responsive prop\n  if (useHasResponsiveProps(props)) {\n    return null;\n  }\n  return (\n    <Pressable\n      accessibilityRole=\"button\"\n      ref={ref}\n      onPressIn={composeEventHandlers(onPressIn, pressableProps.onPressIn)}\n      onPressOut={composeEventHandlers(onPressOut, pressableProps.onPressOut)}\n      // @ts-ignore - web only\n      onHoverIn={composeEventHandlers(onHoverIn, hoverProps.onHoverIn)}\n      // @ts-ignore - web only\n      onHoverOut={composeEventHandlers(onHoverOut, hoverProps.onHoverOut)}\n      // @ts-ignore - web only\n      onFocus={composeEventHandlers(\n        composeEventHandlers(onFocus, focusProps.onFocus),\n        focusRingProps.onFocus\n      )}\n      // @ts-ignore - web only\n      onBlur={composeEventHandlers(\n        composeEventHandlers(onBlur, focusProps.onBlur),\n        focusRingProps.onBlur\n      )}\n      onPress={onClose}\n      {...resolvedProps}\n    >\n      <CloseIcon {..._icon} />\n    </Pressable>\n  );\n};\n\nexport default React.memo(React.forwardRef(PopoverCloseButton));\n","import React, { memo, forwardRef } from 'react';\nimport { usePropsResolution } from '../../../hooks';\nimport { default as Box, IBoxProps } from '../../primitives/Box';\nimport { useHasResponsiveProps } from '../../../hooks/useHasResponsiveProps';\n\nconst PopoverFooter = (props: IBoxProps, ref?: any) => {\n  const resolvedProps = usePropsResolution('PopoverFooter', props);\n  //TODO: refactor for responsive prop\n  if (useHasResponsiveProps(props)) {\n    return null;\n  }\n  return <Box {...resolvedProps} ref={ref} />;\n};\n\nexport default memo(forwardRef(PopoverFooter));\n","import React, { memo, forwardRef, useEffect, useContext } from 'react';\nimport { usePropsResolution } from '../../../hooks';\nimport { default as Box, IBoxProps } from '../../primitives/Box';\nimport { PopoverContext } from './PopoverContext';\nimport { useHasResponsiveProps } from '../../../hooks/useHasResponsiveProps';\n\nconst PopoverHeader = (props: IBoxProps, ref?: any) => {\n  const resolvedProps = usePropsResolution('PopoverHeader', props);\n  const { setHeaderMounted, headerId } = useContext(PopoverContext);\n\n  useEffect(() => {\n    setHeaderMounted(true);\n    return () => {\n      setHeaderMounted(false);\n    };\n  }, [setHeaderMounted]);\n  //TODO: refactor for responsive prop\n  if (useHasResponsiveProps(props)) {\n    return null;\n  }\n  return <Box nativeID={headerId} {...resolvedProps} ref={ref} />;\n};\n\nexport default memo(forwardRef(PopoverHeader));\n","import React from 'react';\nimport { usePropsResolution } from '../../../hooks';\nimport { Popper } from '../Popper';\nimport type { IBoxProps } from '../../primitives/Box';\nimport { useHasResponsiveProps } from '../../../hooks/useHasResponsiveProps';\n\nconst PopoverArrow = React.forwardRef((props: IBoxProps, ref: any) => {\n  const resolvedProps = usePropsResolution('PopoverArrow', props);\n  //TODO: refactor for responsive prop\n  if (useHasResponsiveProps(props)) {\n    return null;\n  }\n  return <Popper.Arrow {...resolvedProps} ref={ref} />;\n});\n\nPopoverArrow.displayName = 'PopperArrow';\n\nexport default PopoverArrow;\n","import { default as PopoverMain } from './Popover';\nimport { PopoverContent } from './PopoverContent';\nimport PopoverBody from './PopoverBody';\nimport PopoverCloseButton from './PopoverCloseButton';\nimport PopoverFooter from './PopoverFooter';\nimport PopoverHeader from './PopoverHeader';\nimport type { IPopoverComponentType } from './types';\nimport PopoverArrow from './PopoverArrow';\nexport type { IPopoverProps } from './types';\n\nconst PopoverTemp: any = PopoverMain;\nPopoverTemp.Content = PopoverContent;\nPopoverTemp.CloseButton = PopoverCloseButton;\nPopoverTemp.Header = PopoverHeader;\nPopoverTemp.Footer = PopoverFooter;\nPopoverTemp.Body = PopoverBody;\nPopoverTemp.Arrow = PopoverArrow;\n\n// To add typings\nconst Popover = PopoverTemp as IPopoverComponentType;\nexport { Popover };\n","import React, { memo, forwardRef } from 'react';\nimport Spinner from '../Spinner';\nimport { usePropsResolution } from '../../../hooks/useThemeProps';\nimport { default as Box, IBoxProps } from '../Box';\nimport HStack from '../Stack/HStack';\nimport { Pressable } from '../Pressable';\nimport type { IButtonProps } from './types';\nimport { composeEventHandlers } from '../../../utils';\nimport {\n  useHover,\n  useFocus,\n  useIsPressed,\n} from '../../primitives/Pressable/Pressable';\nimport { useFocusRing } from '@react-native-aria/focus';\nimport { useHasResponsiveProps } from '../../../hooks/useHasResponsiveProps';\n\nconst Button = (\n  {\n    //@ts-ignore\n    children,\n    startIcon,\n    rightIcon,\n    leftIcon,\n    endIcon,\n    spinner,\n    isDisabled,\n    isLoading,\n    isHovered: isHoveredProp,\n    isPressed: isPressedProp,\n    isFocused: isFocusedProp,\n    isFocusVisible: isFocusVisibleProp,\n    spinnerPlacement = 'start',\n    ...props\n  }: IButtonProps & IBoxProps,\n  ref: any\n) => {\n  const { hoverProps, isHovered } = useHover();\n  const { pressableProps, isPressed } = useIsPressed();\n  const { focusProps, isFocused } = useFocus();\n  const { isFocusVisible, focusProps: focusRingProps }: any = useFocusRing();\n\n  const {\n    onPressIn,\n    onPressOut,\n    onHoverIn,\n    onHoverOut,\n    onFocus,\n    onBlur,\n    _text,\n    _stack,\n    _spinner,\n    isLoadingText,\n    _icon,\n    ...resolvedProps\n  } = usePropsResolution('Button', props, {\n    isDisabled,\n    isHovered: isHoveredProp || isHovered,\n    isFocused: isFocusedProp || isFocused,\n    isPressed: isPressedProp || isPressed,\n    isLoading,\n    isFocusVisible: isFocusVisibleProp || isFocusVisible,\n  });\n\n  //TODO: refactor for responsive prop\n  if (useHasResponsiveProps(props)) {\n    return null;\n  }\n\n  if (leftIcon) {\n    startIcon = leftIcon;\n  }\n  if (rightIcon) {\n    endIcon = rightIcon;\n  }\n  if (endIcon && React.isValidElement(endIcon)) {\n    endIcon = React.Children.map(\n      endIcon,\n      (child: JSX.Element, index: number) => {\n        return React.cloneElement(child, {\n          key: `button-end-icon-${index}`,\n          ..._icon,\n          ...child.props,\n        });\n      }\n    );\n  }\n  if (startIcon && React.isValidElement(startIcon)) {\n    startIcon = React.Children.map(\n      startIcon,\n      (child: JSX.Element, index: number) => {\n        return React.cloneElement(child, {\n          key: `button-start-icon-${index}`,\n          ..._icon,\n          ...child.props,\n        });\n      }\n    );\n  }\n\n  const spinnerElement = spinner ? (\n    spinner\n  ) : (\n    <Spinner color={_text?.color} {..._spinner} />\n  );\n\n  const boxChildren = (child: any) => {\n    return child ? <Box _text={_text}>{child}</Box> : null;\n  };\n\n  return (\n    <Pressable\n      disabled={isDisabled || isLoading}\n      ref={ref}\n      onPressIn={composeEventHandlers(onPressIn, pressableProps.onPressIn)}\n      onPressOut={composeEventHandlers(onPressOut, pressableProps.onPressOut)}\n      // @ts-ignore - web only\n      onHoverIn={composeEventHandlers(onHoverIn, hoverProps.onHoverIn)}\n      // @ts-ignore - web only\n      onHoverOut={composeEventHandlers(onHoverOut, hoverProps.onHoverOut)}\n      // @ts-ignore - web only\n      onFocus={composeEventHandlers(\n        composeEventHandlers(onFocus, focusProps.onFocus),\n        focusRingProps.onFocus\n      )}\n      // @ts-ignore - web only\n      onBlur={composeEventHandlers(\n        composeEventHandlers(onBlur, focusProps.onBlur),\n        focusRingProps.onBlur\n      )}\n      {...resolvedProps}\n      accessibilityRole={props.accessibilityRole ?? 'button'}\n    >\n      <HStack {..._stack} test={true}>\n        {startIcon && !isLoading ? startIcon : null}\n        {isLoading && spinnerPlacement === 'start' ? spinnerElement : null}\n        {isLoading\n          ? isLoadingText\n            ? boxChildren(isLoadingText)\n            : null\n          : boxChildren(children)}\n\n        {endIcon && !isLoading ? endIcon : null}\n        {isLoading && spinnerPlacement === 'end' ? spinnerElement : null}\n      </HStack>\n    </Pressable>\n  );\n};\n\nexport default memo(forwardRef(Button));\n","import React, { memo, forwardRef } from 'react';\nimport type { IButtonGroupProps } from './types';\nimport { usePropsResolution } from '../../../hooks/useThemeProps';\nimport { Stack } from '../Stack';\nimport { useHasResponsiveProps } from '../../../hooks/useHasResponsiveProps';\n\nexport default memo(\n  forwardRef(\n    (\n      { children, divider, variant, ...props }: IButtonGroupProps,\n      ref?: any\n    ) => {\n      const {\n        space,\n        direction,\n\n        size,\n        colorScheme,\n        isDisabled,\n        isAttached,\n        ...newProps\n      } = usePropsResolution('ButtonGroup', props);\n\n      const { borderRadius } = usePropsResolution('Button', props);\n      let computedChildren;\n\n      if (Array.isArray(children)) {\n        computedChildren = React.Children.toArray(children).map(\n          (child: any, index: number) => {\n            if (typeof child === 'string' || typeof child === 'number')\n              return child;\n            return React.cloneElement(child, {\n              key: `button-group-child-${index}`,\n              variant,\n              size,\n              colorScheme,\n              isDisabled,\n\n              // when buttons are attached, remove rounded corners of all buttons except extreme buttons\n              ...(isAttached ? { borderRadius: 0 } : {}),\n              ...(isAttached && index === 0\n                ? direction === 'column'\n                  ? { borderTopRadius: borderRadius }\n                  : { borderLeftRadius: borderRadius }\n                : {}),\n              ...(isAttached && index === children?.length - 1\n                ? direction === 'column'\n                  ? { borderBottomRadius: borderRadius }\n                  : { borderRightRadius: borderRadius }\n                : {}),\n\n              //when buttons are attached, remove double border from them, just keep borderRight in case for direction row and borderBottom in case of direction column for every component\n              ...(isAttached && index !== 0\n                ? direction === 'column'\n                  ? { borderTopWidth: 0 }\n                  : { borderLeftWidth: 0 }\n                : {}),\n              ...child.props,\n            });\n          }\n        );\n      } else {\n        computedChildren = React.Children.toArray(children).map(\n          (child: any, index: number) => {\n            return React.cloneElement(child, {\n              key: `button-group-child-${index}`,\n              variant,\n              size,\n              colorScheme,\n              isDisabled,\n              ...child.props,\n            });\n          }\n        );\n      }\n      //TODO: refactor for responsive prop\n      if (useHasResponsiveProps(props)) {\n        return null;\n      }\n      return (\n        <Stack\n          divider={divider}\n          space={isAttached ? 0 : space}\n          direction={direction}\n          {...newProps}\n          ref={ref}\n        >\n          {computedChildren}\n        </Stack>\n      );\n    }\n  )\n);\n","import ButtonMain from './Button';\nimport ButtonGroup from './ButtonGroup';\nimport type { IButtonComponentType } from './types';\n\nconst ButtonTemp: any = ButtonMain;\nButtonTemp.Group = ButtonGroup;\n\n// To add typings\nconst Button = ButtonTemp as IButtonComponentType;\n\nexport { Button };\nexport type { IButtonGroupProps, IButtonProps } from './types';\n"],"names":["PopoverContext","React","onClose","initialFocusRef","current","finalFocusRef","popoverContentId","undefined","headerId","bodyId","setHeaderMounted","setBodyMounted","headerMounted","bodyMounted","isOpen","Popover","ref","onOpen","trigger","isOpenProp","children","defaultIsOpen","useRNModal","trapFocus","props","triggerRef","mergedRef","mergeRefs","useControllableState","value","defaultValue","onChange","setIsOpen","id","uniqueId","ResponsiveQueryContext","disableCSSMediaQueries","useId","handleOpen","handleClose","useHasResponsiveProps","Box","open","Overlay","onRequestClose","useRNModalOnAndroid","unmountOnExit","PresenceTransition","initial","opacity","animate","transition","duration","exit","scale","visible","style","StyleSheet","Popper","Backdrop","onPress","bg","Provider","FocusScope","contain","restoreFocus","autoFocus","memo","forwardRef","PopoverContent","resolvedProps","usePropsResolution","arrowDefaultColor","bgColor","backgroundColor","color","useToken","finalFocusRefCurrentVal","focus","useKeyboardDismissable","enabled","callback","arrowElement","restChildren","forEach","child","type","displayName","push","accessibilityProps","Platform","nativeID","PopoverBody","useContext","useEffect","PopoverCloseButton","useHover","hoverProps","isHovered","useIsPressed","pressableProps","isPressed","useFocus","focusProps","isFocused","useFocusRing","isFocusVisible","focusRingProps","_icon","onPressIn","onPressOut","onHoverIn","onHoverOut","onFocus","onBlur","Pressable","accessibilityRole","composeEventHandlers","CloseIcon","PopoverFooter","PopoverHeader","PopoverArrow","PopoverTemp","PopoverMain","Content","CloseButton","Header","Footer","Body","Arrow","Button","startIcon","rightIcon","leftIcon","endIcon","spinner","isDisabled","isLoading","isHoveredProp","isPressedProp","isFocusedProp","isFocusVisibleProp","spinnerPlacement","_text","_stack","_spinner","isLoadingText","index","key","spinnerElement","Spinner","boxChildren","disabled","HStack","test","computedChildren","divider","variant","space","direction","size","colorScheme","isAttached","newProps","borderRadius","Array","isArray","map","borderTopRadius","borderLeftRadius","length","borderBottomRadius","borderRightRadius","borderTopWidth","borderLeftWidth","Stack","ButtonTemp","ButtonMain","Group","ButtonGroup"],"sourceRoot":""}