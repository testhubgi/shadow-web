{"version":3,"file":"static/js/4739.17d61504.chunk.js","mappings":"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","sources":["../node_modules/@react-stately/utils/dist/packages/@react-stately/utils/src/useControlledState.ts","../node_modules/native-base/lib/module/components/composites/Divider/index.tsx","../node_modules/native-base/lib/module/components/primitives/Button/Button.tsx","../node_modules/native-base/lib/module/components/primitives/Button/ButtonGroup.tsx","../node_modules/native-base/lib/module/components/primitives/Button/index.tsx","../node_modules/native-base/lib/module/components/primitives/Icon/Icons/Chevron.tsx","../node_modules/native-base/lib/module/components/primitives/Icon/Icons/Hamburger.tsx","../node_modules/native-base/lib/module/components/primitives/Image/index.tsx","../node_modules/native-base/lib/module/components/primitives/Switch/index.tsx","../node_modules/native-base/node_modules/@react-stately/toggle/dist/packages/@react-stately/toggle/src/useToggleState.ts"],"sourcesContent":["/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {useCallback, useRef, useState} from 'react';\n\nexport function useControlledState<T>(\n  value: T,\n  defaultValue: T,\n  onChange: (value: T, ...args: any[]) => void\n): [T, (value: T, ...args: any[]) => void]  {\n  let [stateValue, setStateValue] = useState(value || defaultValue);\n  let ref = useRef(value !== undefined);\n  let wasControlled = ref.current;\n  let isControlled = value !== undefined;\n  // Internal state reference for useCallback\n  let stateRef = useRef(stateValue);\n  if (wasControlled !== isControlled) {\n    console.warn(`WARN: A component changed from ${wasControlled ? 'controlled' : 'uncontrolled'} to ${isControlled ? 'controlled' : 'uncontrolled'}.`);\n  }\n\n  ref.current = isControlled;\n\n  let setValue = useCallback((value, ...args) => {\n    let onChangeCaller = (value, ...onChangeArgs) => {\n      if (onChange) {\n        if (!Object.is(stateRef.current, value)) {\n          onChange(value, ...onChangeArgs);\n        }\n      }\n      if (!isControlled) {\n        stateRef.current = value;\n      }\n    };\n\n    if (typeof value === 'function') {\n      console.warn('We can not support a function callback. See Github Issues for details https://github.com/adobe/react-spectrum/issues/2320');\n      // this supports functional updates https://reactjs.org/docs/hooks-reference.html#functional-updates\n      // when someone using useControlledState calls setControlledState(myFunc)\n      // this will call our useState setState with a function as well which invokes myFunc and calls onChange with the value from myFunc\n      // if we're in an uncontrolled state, then we also return the value of myFunc which to setState looks as though it was just called with myFunc from the beginning\n      // otherwise we just return the controlled value, which won't cause a rerender because React knows to bail out when the value is the same\n      let updateFunction = (oldValue, ...functionArgs) => {\n        let interceptedValue = value(isControlled ? stateRef.current : oldValue, ...functionArgs);\n        onChangeCaller(interceptedValue, ...args);\n        if (!isControlled) {\n          return interceptedValue;\n        }\n        return oldValue;\n      };\n      setStateValue(updateFunction);\n    } else {\n      if (!isControlled) {\n        setStateValue(value);\n      }\n      onChangeCaller(value, ...args);\n    }\n  }, [isControlled, onChange]);\n\n  // If a controlled component's value prop changes, we need to update stateRef\n  if (isControlled) {\n    stateRef.current = value;\n  } else {\n    value = stateValue;\n  }\n\n  return [value, setValue];\n}\n","import React, { memo, forwardRef } from 'react';\nimport { Platform } from 'react-native';\nimport { usePropsResolution } from '../../../hooks/useThemeProps';\nimport Box from './../../primitives/Box';\nimport type { IDividerProps } from './types';\nimport { useHasResponsiveProps } from '../../../hooks/useHasResponsiveProps';\n\nconst Divider = (props: IDividerProps, ref?: any) => {\n  const { orientation, ...resolvedProps } = usePropsResolution(\n    'Divider',\n    props,\n    {},\n    { resolveResponsively: ['thickness'] }\n  );\n  //TODO: refactor for responsive prop\n  if (useHasResponsiveProps(props)) {\n    return null;\n  }\n  return (\n    <Box\n      {...resolvedProps}\n      ref={ref}\n      aria-orientation={orientation}\n      //@ts-ignore web only role\n      accessibilityRole={Platform.OS === 'web' ? 'separator' : undefined}\n    />\n  );\n};\n\nexport default memo(forwardRef(Divider));\n","import React, { memo, forwardRef } from 'react';\nimport Spinner from '../Spinner';\nimport { usePropsResolution } from '../../../hooks/useThemeProps';\nimport { default as Box, IBoxProps } from '../Box';\nimport HStack from '../Stack/HStack';\nimport { Pressable } from '../Pressable';\nimport type { IButtonProps } from './types';\nimport { composeEventHandlers } from '../../../utils';\nimport {\n  useHover,\n  useFocus,\n  useIsPressed,\n} from '../../primitives/Pressable/Pressable';\nimport { useFocusRing } from '@react-native-aria/focus';\nimport { useHasResponsiveProps } from '../../../hooks/useHasResponsiveProps';\n\nconst Button = (\n  {\n    //@ts-ignore\n    children,\n    startIcon,\n    rightIcon,\n    leftIcon,\n    endIcon,\n    spinner,\n    isDisabled,\n    isLoading,\n    isHovered: isHoveredProp,\n    isPressed: isPressedProp,\n    isFocused: isFocusedProp,\n    isFocusVisible: isFocusVisibleProp,\n    spinnerPlacement = 'start',\n    ...props\n  }: IButtonProps & IBoxProps,\n  ref: any\n) => {\n  const { hoverProps, isHovered } = useHover();\n  const { pressableProps, isPressed } = useIsPressed();\n  const { focusProps, isFocused } = useFocus();\n  const { isFocusVisible, focusProps: focusRingProps }: any = useFocusRing();\n\n  const {\n    onPressIn,\n    onPressOut,\n    onHoverIn,\n    onHoverOut,\n    onFocus,\n    onBlur,\n    _text,\n    _stack,\n    _spinner,\n    isLoadingText,\n    _icon,\n    ...resolvedProps\n  } = usePropsResolution('Button', props, {\n    isDisabled,\n    isHovered: isHoveredProp || isHovered,\n    isFocused: isFocusedProp || isFocused,\n    isPressed: isPressedProp || isPressed,\n    isLoading,\n    isFocusVisible: isFocusVisibleProp || isFocusVisible,\n  });\n\n  //TODO: refactor for responsive prop\n  if (useHasResponsiveProps(props)) {\n    return null;\n  }\n\n  if (leftIcon) {\n    startIcon = leftIcon;\n  }\n  if (rightIcon) {\n    endIcon = rightIcon;\n  }\n  if (endIcon && React.isValidElement(endIcon)) {\n    endIcon = React.Children.map(\n      endIcon,\n      (child: JSX.Element, index: number) => {\n        return React.cloneElement(child, {\n          key: `button-end-icon-${index}`,\n          ..._icon,\n          ...child.props,\n        });\n      }\n    );\n  }\n  if (startIcon && React.isValidElement(startIcon)) {\n    startIcon = React.Children.map(\n      startIcon,\n      (child: JSX.Element, index: number) => {\n        return React.cloneElement(child, {\n          key: `button-start-icon-${index}`,\n          ..._icon,\n          ...child.props,\n        });\n      }\n    );\n  }\n\n  const spinnerElement = spinner ? (\n    spinner\n  ) : (\n    <Spinner color={_text?.color} {..._spinner} />\n  );\n\n  const boxChildren = (child: any) => {\n    return child ? <Box _text={_text}>{child}</Box> : null;\n  };\n\n  return (\n    <Pressable\n      disabled={isDisabled || isLoading}\n      ref={ref}\n      onPressIn={composeEventHandlers(onPressIn, pressableProps.onPressIn)}\n      onPressOut={composeEventHandlers(onPressOut, pressableProps.onPressOut)}\n      // @ts-ignore - web only\n      onHoverIn={composeEventHandlers(onHoverIn, hoverProps.onHoverIn)}\n      // @ts-ignore - web only\n      onHoverOut={composeEventHandlers(onHoverOut, hoverProps.onHoverOut)}\n      // @ts-ignore - web only\n      onFocus={composeEventHandlers(\n        composeEventHandlers(onFocus, focusProps.onFocus),\n        focusRingProps.onFocus\n      )}\n      // @ts-ignore - web only\n      onBlur={composeEventHandlers(\n        composeEventHandlers(onBlur, focusProps.onBlur),\n        focusRingProps.onBlur\n      )}\n      {...resolvedProps}\n      accessibilityRole={props.accessibilityRole ?? 'button'}\n    >\n      <HStack {..._stack} test={true}>\n        {startIcon && !isLoading ? startIcon : null}\n        {isLoading && spinnerPlacement === 'start' ? spinnerElement : null}\n        {isLoading\n          ? isLoadingText\n            ? boxChildren(isLoadingText)\n            : null\n          : boxChildren(children)}\n\n        {endIcon && !isLoading ? endIcon : null}\n        {isLoading && spinnerPlacement === 'end' ? spinnerElement : null}\n      </HStack>\n    </Pressable>\n  );\n};\n\nexport default memo(forwardRef(Button));\n","import React, { memo, forwardRef } from 'react';\nimport type { IButtonGroupProps } from './types';\nimport { usePropsResolution } from '../../../hooks/useThemeProps';\nimport { Stack } from '../Stack';\nimport { useHasResponsiveProps } from '../../../hooks/useHasResponsiveProps';\n\nexport default memo(\n  forwardRef(\n    (\n      { children, divider, variant, ...props }: IButtonGroupProps,\n      ref?: any\n    ) => {\n      const {\n        space,\n        direction,\n\n        size,\n        colorScheme,\n        isDisabled,\n        isAttached,\n        ...newProps\n      } = usePropsResolution('ButtonGroup', props);\n\n      const { borderRadius } = usePropsResolution('Button', props);\n      let computedChildren;\n\n      if (Array.isArray(children)) {\n        computedChildren = React.Children.toArray(children).map(\n          (child: any, index: number) => {\n            if (typeof child === 'string' || typeof child === 'number')\n              return child;\n            return React.cloneElement(child, {\n              key: `button-group-child-${index}`,\n              variant,\n              size,\n              colorScheme,\n              isDisabled,\n\n              // when buttons are attached, remove rounded corners of all buttons except extreme buttons\n              ...(isAttached ? { borderRadius: 0 } : {}),\n              ...(isAttached && index === 0\n                ? direction === 'column'\n                  ? { borderTopRadius: borderRadius }\n                  : { borderLeftRadius: borderRadius }\n                : {}),\n              ...(isAttached && index === children?.length - 1\n                ? direction === 'column'\n                  ? { borderBottomRadius: borderRadius }\n                  : { borderRightRadius: borderRadius }\n                : {}),\n\n              //when buttons are attached, remove double border from them, just keep borderRight in case for direction row and borderBottom in case of direction column for every component\n              ...(isAttached && index !== 0\n                ? direction === 'column'\n                  ? { borderTopWidth: 0 }\n                  : { borderLeftWidth: 0 }\n                : {}),\n              ...child.props,\n            });\n          }\n        );\n      } else {\n        computedChildren = React.Children.toArray(children).map(\n          (child: any, index: number) => {\n            return React.cloneElement(child, {\n              key: `button-group-child-${index}`,\n              variant,\n              size,\n              colorScheme,\n              isDisabled,\n              ...child.props,\n            });\n          }\n        );\n      }\n      //TODO: refactor for responsive prop\n      if (useHasResponsiveProps(props)) {\n        return null;\n      }\n      return (\n        <Stack\n          divider={divider}\n          space={isAttached ? 0 : space}\n          direction={direction}\n          {...newProps}\n          ref={ref}\n        >\n          {computedChildren}\n        </Stack>\n      );\n    }\n  )\n);\n","import ButtonMain from './Button';\nimport ButtonGroup from './ButtonGroup';\nimport type { IButtonComponentType } from './types';\n\nconst ButtonTemp: any = ButtonMain;\nButtonTemp.Group = ButtonGroup;\n\n// To add typings\nconst Button = ButtonTemp as IButtonComponentType;\n\nexport { Button };\nexport type { IButtonGroupProps, IButtonProps } from './types';\n","import { createIcon } from '../createIcon';\n\nexport const ChevronUpIcon = createIcon({\n  viewBox: '0 0 24 24',\n  d:\n    'M20.2286 18L11.9973 9.62148L3.76862 17.9973L2 16.1971L12 6L22 16.1971L20.2286 18Z',\n});\n\nexport const ChevronDownIcon = createIcon({\n  viewBox: '0 0 24 24',\n  d:\n    'M20.2286 6L11.9973 14.3785L3.76862 6.00268L2 7.80293L12 18L22 7.80293L20.2286 6Z',\n});\n\nexport const ChevronLeftIcon = createIcon({\n  viewBox: '0 0 24 24',\n  d:\n    'M18 3.77141L9.62148 12.0027L17.9973 20.2314L16.1971 22L6 12L16.1971 2L18 3.77141Z',\n});\n\nexport const ChevronRightIcon = createIcon({\n  viewBox: '0 0 24 24',\n  d:\n    'M6 3.77141L14.3785 12.0027L6.00268 20.2314L7.80293 22L18 12L7.80293 2L6 3.77141Z',\n});\n","import { createIcon } from '../createIcon';\n\nexport const HamburgerIcon = createIcon({\n  viewBox: '0 0 24 24',\n  d:\n    'M22 5H2V7.47961H22V5ZM22 10.4795H2V12.9591H22V10.4795ZM2 15.959H22V18.4386H2V15.959Z',\n});\n","import React, { useState, memo, forwardRef, useCallback, useRef } from 'react';\nimport { Image as RNImage } from 'react-native';\nimport Text from '../Text';\nimport { usePropsResolution } from '../../../hooks/useThemeProps';\nimport type { IImageProps } from './types';\nimport { useHasResponsiveProps } from '../../../hooks/useHasResponsiveProps';\nimport { makeStyledComponent } from '../../../utils/styled';\n\nconst StyledImage = makeStyledComponent(RNImage);\n\nconst Image = memo(\n  forwardRef((props: IImageProps, ref: any) => {\n    const {\n      source,\n      src,\n      fallbackElement,\n      alt,\n      fallbackSource,\n      ignoreFallback,\n      _alt,\n      ...resolvedProps\n    } = usePropsResolution('Image', props);\n\n    const finalSource: any = useRef(null);\n    const getSource = useCallback(() => {\n      if (source) {\n        finalSource.current = source;\n      } else if (src) {\n        finalSource.current = { uri: src };\n      }\n      return finalSource.current;\n      // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [source?.uri, src]);\n\n    const [renderedSource, setSource] = useState(getSource());\n    const [alternate, setAlternate] = useState(false);\n    const [fallbackSourceFlag, setfallbackSourceFlag] = useState(true);\n\n    React.useEffect(() => {\n      setSource(getSource());\n      return () => {\n        finalSource.current = null;\n      };\n    }, [source?.uri, src, getSource]);\n\n    const onImageLoadError = useCallback(\n      (event: any) => {\n        props.onError && props.onError(event);\n        console.warn(event.nativeEvent.error);\n        if (\n          !ignoreFallback &&\n          fallbackSource &&\n          fallbackSource !== renderedSource &&\n          fallbackSourceFlag\n        ) {\n          setfallbackSourceFlag(false);\n          setSource(fallbackSource);\n        } else {\n          setAlternate(true);\n        }\n      },\n      [\n        fallbackSource,\n        fallbackSourceFlag,\n        ignoreFallback,\n        props,\n        renderedSource,\n      ]\n    );\n    //TODO: refactor for responsive prop\n    if (useHasResponsiveProps(props)) {\n      return null;\n    }\n\n    if (typeof alt !== 'string') {\n      console.warn('Please pass alt prop to Image component');\n    }\n\n    if (alternate) {\n      if (fallbackElement) {\n        if (React.isValidElement(fallbackElement)) {\n          return fallbackElement;\n        }\n      } else return <Text {..._alt}>{alt}</Text>;\n    }\n    return (\n      <StyledImage\n        source={renderedSource}\n        accessibilityLabel={alt}\n        alt={alt}\n        {...resolvedProps}\n        onError={onImageLoadError}\n        ref={ref}\n      />\n    );\n  })\n);\n\ninterface ImageStatics {\n  getSize: typeof RNImage.prefetch;\n  prefetch: typeof RNImage.prefetch;\n  queryCache: typeof RNImage.queryCache;\n}\nconst ImageWithStatics: typeof Image & ImageStatics = {\n  ...Image,\n  //@ts-ignore\n  getSize: RNImage.getSize,\n  prefetch: RNImage.prefetch,\n  queryCache: RNImage.queryCache,\n};\n\nexport default ImageWithStatics;\nexport type { IImageProps };\n","import React, { memo, forwardRef } from 'react';\nimport { useToggleState } from '@react-stately/toggle';\nimport { Switch as RNSwitch } from 'react-native';\nimport isNil from 'lodash.isnil';\nimport { usePropsResolution } from '../../../hooks/useThemeProps';\nimport { useToken } from '../../../hooks';\nimport { makeStyledComponent } from '../../../utils/styled';\nimport type { ISwitchProps } from './types';\nimport { mergeRefs } from '../../../utils';\nimport { useHover } from '@react-native-aria/interactions';\nimport { useHasResponsiveProps } from '../../../hooks/useHasResponsiveProps';\nimport { useFormControlContext } from '../../composites/FormControl';\nimport { combineContextAndProps } from '../../../utils';\n\nconst StyledNBSwitch = makeStyledComponent(RNSwitch);\n\n// TODO: Needs proper refactor\nconst Switch = (\n  {\n    disabled,\n    isDisabled,\n    isInvalid,\n    isChecked,\n    defaultIsChecked,\n    accessibilityLabel,\n    accessibilityHint,\n    onToggle,\n    value,\n    onValueChange,\n    isHovered: isHoveredProp,\n    ...props\n  }: ISwitchProps,\n  ref: any\n) => {\n  const formControlContext = useFormControlContext();\n\n  const combinedProps = combineContextAndProps(formControlContext, props);\n\n  const state = useToggleState({\n    defaultSelected: !isNil(defaultIsChecked) ? defaultIsChecked : false,\n  });\n  const checked = !isNil(isChecked) ? isChecked : state.isSelected;\n  const _ref = React.useRef(null);\n  const { isHovered } = useHover({}, _ref);\n\n  const {\n    onTrackColor: _onTrackColor,\n    offTrackColor: _offTrackColor,\n    onThumbColor: _onThumbColor,\n    offThumbColor: _offThumbColor,\n    ...resolvedProps\n  } = usePropsResolution('Switch', props, {\n    isHovered: isHoveredProp || isHovered,\n    isDisabled: disabled || isDisabled || combinedProps.isDisabled,\n    isInvalid: isInvalid || combinedProps.isInvalid,\n    isChecked: checked,\n  });\n\n  const onTrackColor = useToken('colors', _onTrackColor);\n  const offTrackColor = useToken('colors', _offTrackColor);\n  const onThumbColor = useToken('colors', _onThumbColor);\n  const offThumbColor = useToken('colors', _offThumbColor);\n\n  //TODO: refactor for responsive prop\n  if (\n    useHasResponsiveProps({\n      ...props,\n      isDisabled,\n      isInvalid,\n      isChecked,\n      defaultIsChecked,\n      accessibilityLabel,\n      accessibilityHint,\n    })\n  ) {\n    return null;\n  }\n  return (\n    <StyledNBSwitch\n      accessibilityLabel={accessibilityLabel}\n      accessibilityHint={accessibilityHint}\n      trackColor={{ false: offTrackColor, true: onTrackColor }}\n      thumbColor={checked ? onThumbColor : offThumbColor}\n      activeThumbColor={onThumbColor} // react-native-web prop for active thumbColor\n      ios_backgroundColor={offTrackColor}\n      {...resolvedProps}\n      disabled={disabled || isDisabled || combinedProps.isDisabled}\n      onValueChange={(val: boolean) => {\n        onValueChange && onValueChange(val);\n        onToggle ? onToggle(val) : state.toggle();\n      }}\n      value={value || checked}\n      ref={mergeRefs([ref, _ref])}\n    />\n  );\n};\n\nexport default memo(forwardRef(Switch));\nexport type { ISwitchProps };\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {ToggleProps} from '@react-types/checkbox';\nimport {useControlledState} from '@react-stately/utils';\n\nexport interface ToggleState {\n  /** Whether the toggle is selected. */\n  readonly isSelected: boolean,\n\n  /** Updates selection state. */\n  setSelected(isSelected: boolean): void,\n  \n  /** Toggle the selection state. */\n  toggle(): void\n}\n\n/**\n * Provides state management for toggle components like checkboxes and switches.\n */\nexport function useToggleState(props: ToggleProps = {}): ToggleState {\n  let {isReadOnly, onChange} = props;\n\n  // have to provide an empty function so useControlledState doesn't throw a fit\n  // can't use useControlledState's prop calling because we need the event object from the change\n  let [isSelected, setSelected] = useControlledState(props.isSelected, props.defaultSelected || false, () => {});\n\n  function updateSelected(value) {\n    if (!isReadOnly) {\n      setSelected(value);\n      if (onChange) {\n        onChange(value);\n      }\n    }\n  }\n\n  function toggleState() {\n    if (!isReadOnly) {\n      setSelected(prev => {\n        let newVal = !prev;\n        if (onChange) {\n          onChange(newVal);\n        }\n        return newVal;\n      });\n    }\n  }\n\n  return {\n    isSelected,\n    setSelected: updateSelected,\n    toggle: toggleState\n  };\n}\n"],"names":["$458b0a5536c1a7cf$export$40bfa8c7b0832715","value1","defaultValue","onChange","$6imuh$useState","stateValue","setStateValue","ref","$6imuh$useRef","undefined","wasControlled","current","isControlled","stateRef","console","warn","setValue","$6imuh$useCallback","value2","args","onChangeCaller","value","onChangeArgs","Object","is","updateFunction","oldValue","functionArgs","interceptedValue","Divider","props","usePropsResolution","resolveResponsively","orientation","resolvedProps","useHasResponsiveProps","React","Box","accessibilityRole","Platform","memo","forwardRef","Button","children","startIcon","rightIcon","leftIcon","endIcon","spinner","isDisabled","isLoading","isHoveredProp","isHovered","isPressedProp","isPressed","isFocusedProp","isFocused","isFocusVisibleProp","isFocusVisible","spinnerPlacement","useHover","hoverProps","useIsPressed","pressableProps","useFocus","focusProps","useFocusRing","focusRingProps","onPressIn","onPressOut","onHoverIn","onHoverOut","onFocus","onBlur","_text","_stack","_spinner","isLoadingText","_icon","child","index","key","spinnerElement","Spinner","color","boxChildren","Pressable","disabled","composeEventHandlers","HStack","test","computedChildren","divider","variant","space","direction","size","colorScheme","isAttached","newProps","borderRadius","Array","isArray","map","borderTopRadius","borderLeftRadius","length","borderBottomRadius","borderRightRadius","borderTopWidth","borderLeftWidth","Stack","ButtonTemp","ButtonMain","Group","ButtonGroup","ChevronUpIcon","createIcon","viewBox","d","ChevronDownIcon","ChevronRightIcon","HamburgerIcon","StyledImage","makeStyledComponent","RNImage","Image","source","src","fallbackElement","alt","fallbackSource","ignoreFallback","_alt","finalSource","useRef","getSource","useCallback","uri","useState","renderedSource","setSource","alternate","setAlternate","fallbackSourceFlag","setfallbackSourceFlag","onImageLoadError","event","onError","nativeEvent","error","Text","accessibilityLabel","ImageWithStatics","getSize","prefetch","queryCache","StyledNBSwitch","RNSwitch","Switch","isInvalid","isChecked","defaultIsChecked","accessibilityHint","onToggle","onValueChange","formControlContext","useFormControlContext","combinedProps","combineContextAndProps","state","useToggleState","defaultSelected","isNil","checked","isSelected","_ref","_onTrackColor","onTrackColor","_offTrackColor","offTrackColor","_onThumbColor","onThumbColor","_offThumbColor","offThumbColor","useToken","trackColor","false","true","thumbColor","activeThumbColor","ios_backgroundColor","val","toggle","mergeRefs","isReadOnly","useControlledState","setSelected","prev","newVal"],"sourceRoot":""}