{"version":3,"file":"static/js/4541.8fbb05fc.chunk.js","mappings":"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","sources":["../node_modules/@react-aria/focus/dist/packages/@react-aria/focus/src/focusSafely.ts","../node_modules/@react-aria/focus/dist/packages/@react-aria/focus/src/isElementVisible.ts","../node_modules/@react-aria/focus/dist/packages/@react-aria/focus/src/FocusScope.tsx","../node_modules/@react-aria/focus/dist/packages/@react-aria/focus/src/useFocusRing.ts","../node_modules/@react-aria/focus/dist/packages/@react-aria/focus/src/useFocusable.tsx","../node_modules/@react-native-aria/focus/lib/module/FocusScope.web.tsx","../node_modules/native-base/lib/module/components/primitives/Pressable/Pressable.tsx","../node_modules/native-base/lib/module/components/primitives/Stack/HStack.tsx"],"sourcesContent":["/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the 'License');\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an 'AS IS' BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {FocusableElement} from '@react-types/shared';\nimport {focusWithoutScrolling, runAfterTransition} from '@react-aria/utils';\nimport {getInteractionModality} from '@react-aria/interactions';\n\n/**\n * A utility function that focuses an element while avoiding undesired side effects such\n * as page scrolling and screen reader issues with CSS transitions.\n */\nexport function focusSafely(element: FocusableElement) {\n  // If the user is interacting with a virtual cursor, e.g. screen reader, then\n  // wait until after any animated transitions that are currently occurring on\n  // the page before shifting focus. This avoids issues with VoiceOver on iOS\n  // causing the page to scroll when moving focus if the element is transitioning\n  // from off the screen.\n  if (getInteractionModality() === 'virtual') {\n    let lastFocusedElement = document.activeElement;\n    runAfterTransition(() => {\n      // If focus did not move and the element is still in the document, focus it.\n      if (document.activeElement === lastFocusedElement && document.contains(element)) {\n        focusWithoutScrolling(element);\n      }\n    });\n  } else {\n    focusWithoutScrolling(element);\n  }\n}\n","/*\n * Copyright 2021 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nfunction isStyleVisible(element: Element) {\n  if (!(element instanceof HTMLElement) && !(element instanceof SVGElement)) {\n    return false;\n  }\n\n  let {display, visibility} = element.style;\n\n  let isVisible = (\n    display !== 'none' &&\n    visibility !== 'hidden' &&\n    visibility !== 'collapse'\n  );\n\n  if (isVisible) {\n    const {getComputedStyle} = element.ownerDocument.defaultView;\n    let {display: computedDisplay, visibility: computedVisibility} = getComputedStyle(element);\n\n    isVisible = (\n      computedDisplay !== 'none' &&\n      computedVisibility !== 'hidden' &&\n      computedVisibility !== 'collapse'\n    );\n  }\n\n  return isVisible;\n}\n\nfunction isAttributeVisible(element: Element, childElement?: Element) {\n  return (\n    !element.hasAttribute('hidden') &&\n    (element.nodeName === 'DETAILS' &&\n      childElement &&\n      childElement.nodeName !== 'SUMMARY'\n      ? element.hasAttribute('open')\n      : true)\n  );\n}\n\n/**\n * Adapted from https://github.com/testing-library/jest-dom and \n * https://github.com/vuejs/vue-test-utils-next/.\n * Licensed under the MIT License.\n * @param element - Element to evaluate for display or visibility.\n */  \nexport function isElementVisible(element: Element, childElement?: Element) {\n  return (\n    element.nodeName !== '#comment' &&\n    isStyleVisible(element) &&\n    isAttributeVisible(element, childElement) &&\n    (!element.parentElement || isElementVisible(element.parentElement, element))\n  );\n}\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {FocusableElement} from '@react-types/shared';\nimport {focusSafely} from './focusSafely';\nimport {isElementVisible} from './isElementVisible';\nimport React, {ReactNode, RefObject, useContext, useEffect, useRef} from 'react';\nimport {useLayoutEffect} from '@react-aria/utils';\n\n\nexport interface FocusScopeProps {\n  /** The contents of the focus scope. */\n  children: ReactNode,\n\n  /**\n   * Whether to contain focus inside the scope, so users cannot\n   * move focus outside, for example in a modal dialog.\n   */\n  contain?: boolean,\n\n  /**\n   * Whether to restore focus back to the element that was focused\n   * when the focus scope mounted, after the focus scope unmounts.\n   */\n  restoreFocus?: boolean,\n\n  /** Whether to auto focus the first focusable element in the focus scope on mount. */\n  autoFocus?: boolean\n}\n\nexport interface FocusManagerOptions {\n  /** The element to start searching from. The currently focused element by default. */\n  from?: Element,\n  /** Whether to only include tabbable elements, or all focusable elements. */\n  tabbable?: boolean,\n  /** Whether focus should wrap around when it reaches the end of the scope. */\n  wrap?: boolean,\n  /** A callback that determines whether the given element is focused. */\n  accept?: (node: Element) => boolean\n}\n\nexport interface FocusManager {\n  /** Moves focus to the next focusable or tabbable element in the focus scope. */\n  focusNext(opts?: FocusManagerOptions): FocusableElement,\n  /** Moves focus to the previous focusable or tabbable element in the focus scope. */\n  focusPrevious(opts?: FocusManagerOptions): FocusableElement,\n  /** Moves focus to the first focusable or tabbable element in the focus scope. */\n  focusFirst(opts?: FocusManagerOptions): FocusableElement,\n    /** Moves focus to the last focusable or tabbable element in the focus scope. */\n  focusLast(opts?: FocusManagerOptions): FocusableElement\n}\n\ntype ScopeRef = RefObject<Element[]>;\ninterface IFocusContext {\n  scopeRef: ScopeRef,\n  focusManager: FocusManager\n}\n\nconst FocusContext = React.createContext<IFocusContext>(null);\n\nlet activeScope: ScopeRef = null;\n\n// This is a hacky DOM-based implementation of a FocusScope until this RFC lands in React:\n// https://github.com/reactjs/rfcs/pull/109\n\n/**\n * A FocusScope manages focus for its descendants. It supports containing focus inside\n * the scope, restoring focus to the previously focused element on unmount, and auto\n * focusing children on mount. It also acts as a container for a programmatic focus\n * management interface that can be used to move focus forward and back in response\n * to user events.\n */\nexport function FocusScope(props: FocusScopeProps) {\n  let {children, contain, restoreFocus, autoFocus} = props;\n  let startRef = useRef<HTMLSpanElement>();\n  let endRef = useRef<HTMLSpanElement>();\n  let scopeRef = useRef<Element[]>([]);\n  let ctx = useContext(FocusContext);\n  // if there is no scopeRef on the context, then the parent is the focusScopeTree's root, represented by null\n  let parentScope = ctx?.scopeRef ?? null;\n\n  useLayoutEffect(() => {\n    // Find all rendered nodes between the sentinels and add them to the scope.\n    let node = startRef.current.nextSibling;\n    let nodes = [];\n    while (node && node !== endRef.current) {\n      nodes.push(node);\n      node = node.nextSibling;\n    }\n\n    scopeRef.current = nodes;\n  }, [children, parentScope]);\n\n  // add to the focus scope tree in render order because useEffects/useLayoutEffects run children first whereas render runs parent first\n  // which matters when constructing a tree\n  if (focusScopeTree.getTreeNode(parentScope) && !focusScopeTree.getTreeNode(scopeRef)) {\n    focusScopeTree.addTreeNode(scopeRef, parentScope);\n  }\n\n  let node = focusScopeTree.getTreeNode(scopeRef);\n  node.contain = contain;\n\n  useFocusContainment(scopeRef, contain);\n  useRestoreFocus(scopeRef, restoreFocus, contain);\n  useAutoFocus(scopeRef, autoFocus);\n\n  // this layout effect needs to run last so that focusScopeTree cleanup happens at the last moment possible\n  useLayoutEffect(() => {\n    if (scopeRef && (parentScope || parentScope == null)) {\n      return () => {\n        // Restore the active scope on unmount if this scope or a descendant scope is active.\n        // Parent effect cleanups run before children, so we need to check if the\n        // parent scope actually still exists before restoring the active scope to it.\n        if (\n          (scopeRef === activeScope || isAncestorScope(scopeRef, activeScope)) &&\n          (!parentScope || focusScopeTree.getTreeNode(parentScope))\n        ) {\n          activeScope = parentScope;\n        }\n        focusScopeTree.removeTreeNode(scopeRef);\n      };\n    }\n  }, [scopeRef, parentScope]);\n\n  let focusManager = createFocusManagerForScope(scopeRef);\n\n  return (\n    <FocusContext.Provider value={{scopeRef, focusManager}}>\n      <span data-focus-scope-start hidden ref={startRef} />\n      {children}\n      <span data-focus-scope-end hidden ref={endRef} />\n    </FocusContext.Provider>\n  );\n}\n\n/**\n * Returns a FocusManager interface for the parent FocusScope.\n * A FocusManager can be used to programmatically move focus within\n * a FocusScope, e.g. in response to user events like keyboard navigation.\n */\nexport function useFocusManager(): FocusManager {\n  return useContext(FocusContext)?.focusManager;\n}\n\nfunction createFocusManagerForScope(scopeRef: React.RefObject<Element[]>): FocusManager {\n  return {\n    focusNext(opts: FocusManagerOptions = {}) {\n      let scope = scopeRef.current;\n      let {from, tabbable, wrap, accept} = opts;\n      let node = from || document.activeElement;\n      let sentinel = scope[0].previousElementSibling;\n      let walker = getFocusableTreeWalker(getScopeRoot(scope), {tabbable, accept}, scope);\n      walker.currentNode = isElementInScope(node, scope) ? node : sentinel;\n      let nextNode = walker.nextNode() as FocusableElement;\n      if (!nextNode && wrap) {\n        walker.currentNode = sentinel;\n        nextNode = walker.nextNode() as FocusableElement;\n      }\n      if (nextNode) {\n        focusElement(nextNode, true);\n      }\n      return nextNode;\n    },\n    focusPrevious(opts: FocusManagerOptions = {}) {\n      let scope = scopeRef.current;\n      let {from, tabbable, wrap, accept} = opts;\n      let node = from || document.activeElement;\n      let sentinel = scope[scope.length - 1].nextElementSibling;\n      let walker = getFocusableTreeWalker(getScopeRoot(scope), {tabbable, accept}, scope);\n      walker.currentNode = isElementInScope(node, scope) ? node : sentinel;\n      let previousNode = walker.previousNode() as FocusableElement;\n      if (!previousNode && wrap) {\n        walker.currentNode = sentinel;\n        previousNode = walker.previousNode() as FocusableElement;\n      }\n      if (previousNode) {\n        focusElement(previousNode, true);\n      }\n      return previousNode;\n    },\n    focusFirst(opts = {}) {\n      let scope = scopeRef.current;\n      let {tabbable, accept} = opts;\n      let walker = getFocusableTreeWalker(getScopeRoot(scope), {tabbable, accept}, scope);\n      walker.currentNode = scope[0].previousElementSibling;\n      let nextNode = walker.nextNode() as FocusableElement;\n      if (nextNode) {\n        focusElement(nextNode, true);\n      }\n      return nextNode;\n    },\n    focusLast(opts = {}) {\n      let scope = scopeRef.current;\n      let {tabbable, accept} = opts;\n      let walker = getFocusableTreeWalker(getScopeRoot(scope), {tabbable, accept}, scope);\n      walker.currentNode = scope[scope.length - 1].nextElementSibling;\n      let previousNode = walker.previousNode() as FocusableElement;\n      if (previousNode) {\n        focusElement(previousNode, true);\n      }\n      return previousNode;\n    }\n  };\n}\n\nconst focusableElements = [\n  'input:not([disabled]):not([type=hidden])',\n  'select:not([disabled])',\n  'textarea:not([disabled])',\n  'button:not([disabled])',\n  'a[href]',\n  'area[href]',\n  'summary',\n  'iframe',\n  'object',\n  'embed',\n  'audio[controls]',\n  'video[controls]',\n  '[contenteditable]'\n];\n\nconst FOCUSABLE_ELEMENT_SELECTOR = focusableElements.join(':not([hidden]),') + ',[tabindex]:not([disabled]):not([hidden])';\n\nfocusableElements.push('[tabindex]:not([tabindex=\"-1\"]):not([disabled])');\nconst TABBABLE_ELEMENT_SELECTOR = focusableElements.join(':not([hidden]):not([tabindex=\"-1\"]),');\n\nfunction getScopeRoot(scope: Element[]) {\n  return scope[0].parentElement;\n}\n\nfunction shouldContainFocus(scopeRef: ScopeRef) {\n  let scope = focusScopeTree.getTreeNode(activeScope);\n  while (scope && scope.scopeRef !== scopeRef) {\n    if (scope.contain) {\n      return false;\n    }\n\n    scope = scope.parent;\n  }\n\n  return true;\n}\n\nfunction useFocusContainment(scopeRef: RefObject<Element[]>, contain: boolean) {\n  let focusedNode = useRef<FocusableElement>();\n\n  let raf = useRef(null);\n  useLayoutEffect(() => {\n    let scope = scopeRef.current;\n    if (!contain) {\n      // if contain was changed, then we should cancel any ongoing waits to pull focus back into containment\n      if (raf.current) {\n        cancelAnimationFrame(raf.current);\n        raf.current = null;\n      }\n      return;\n    }\n\n    // Handle the Tab key to contain focus within the scope\n    let onKeyDown = (e) => {\n      if (e.key !== 'Tab' || e.altKey || e.ctrlKey || e.metaKey || !shouldContainFocus(scopeRef)) {\n        return;\n      }\n\n      let focusedElement = document.activeElement;\n      let scope = scopeRef.current;\n      if (!isElementInScope(focusedElement, scope)) {\n        return;\n      }\n\n      let walker = getFocusableTreeWalker(getScopeRoot(scope), {tabbable: true}, scope);\n      walker.currentNode = focusedElement;\n      let nextElement = (e.shiftKey ? walker.previousNode() : walker.nextNode()) as FocusableElement;\n      if (!nextElement) {\n        walker.currentNode = e.shiftKey ? scope[scope.length - 1].nextElementSibling : scope[0].previousElementSibling;\n        nextElement = (e.shiftKey ? walker.previousNode() : walker.nextNode())  as FocusableElement;\n      }\n\n      e.preventDefault();\n      if (nextElement) {\n        focusElement(nextElement, true);\n      }\n    };\n\n    let onFocus = (e) => {\n      // If focusing an element in a child scope of the currently active scope, the child becomes active.\n      // Moving out of the active scope to an ancestor is not allowed.\n      if (!activeScope || isAncestorScope(activeScope, scopeRef)) {\n        activeScope = scopeRef;\n        focusedNode.current = e.target;\n      } else if (shouldContainFocus(scopeRef) && !isElementInChildScope(e.target, scopeRef)) {\n        // If a focus event occurs outside the active scope (e.g. user tabs from browser location bar),\n        // restore focus to the previously focused node or the first tabbable element in the active scope.\n        if (focusedNode.current) {\n          focusedNode.current.focus();\n        } else if (activeScope) {\n          focusFirstInScope(activeScope.current);\n        }\n      } else if (shouldContainFocus(scopeRef)) {\n        focusedNode.current = e.target;\n      }\n    };\n\n    let onBlur = (e) => {\n      // Firefox doesn't shift focus back to the Dialog properly without this\n      raf.current = requestAnimationFrame(() => {\n        // Use document.activeElement instead of e.relatedTarget so we can tell if user clicked into iframe\n        if (shouldContainFocus(scopeRef) && !isElementInChildScope(document.activeElement, scopeRef)) {\n          activeScope = scopeRef;\n          if (document.body.contains(e.target)) {\n            focusedNode.current = e.target;\n            focusedNode.current.focus();\n          } else if (activeScope) {\n            focusFirstInScope(activeScope.current);\n          }\n        }\n      });\n    };\n\n    document.addEventListener('keydown', onKeyDown, false);\n    document.addEventListener('focusin', onFocus, false);\n    scope.forEach(element => element.addEventListener('focusin', onFocus, false));\n    scope.forEach(element => element.addEventListener('focusout', onBlur, false));\n    return () => {\n      document.removeEventListener('keydown', onKeyDown, false);\n      document.removeEventListener('focusin', onFocus, false);\n      scope.forEach(element => element.removeEventListener('focusin', onFocus, false));\n      scope.forEach(element => element.removeEventListener('focusout', onBlur, false));\n    };\n  }, [scopeRef, contain]);\n\n  // eslint-disable-next-line arrow-body-style\n  useEffect(() => {\n    return () => {\n      if (raf.current) {\n        cancelAnimationFrame(raf.current);\n      }\n    };\n  }, [raf]);\n}\n\nfunction isElementInAnyScope(element: Element) {\n  return isElementInChildScope(element);\n}\n\nfunction isElementInScope(element: Element, scope: Element[]) {\n  return scope.some(node => node.contains(element));\n}\n\nfunction isElementInChildScope(element: Element, scope: ScopeRef = null) {\n  // node.contains in isElementInScope covers child scopes that are also DOM children,\n  // but does not cover child scopes in portals.\n  for (let {scopeRef: s} of focusScopeTree.traverse(focusScopeTree.getTreeNode(scope))) {\n    if (isElementInScope(element, s.current)) {\n      return true;\n    }\n  }\n\n  return false;\n}\n\nfunction isAncestorScope(ancestor: ScopeRef, scope: ScopeRef) {\n  let parent = focusScopeTree.getTreeNode(scope)?.parent;\n  while (parent) {\n    if (parent.scopeRef === ancestor) {\n      return true;\n    }\n    parent = parent.parent;\n  }\n  return false;\n}\n\nfunction focusElement(element: FocusableElement | null, scroll = false) {\n  if (element != null && !scroll) {\n    try {\n      focusSafely(element);\n    } catch (err) {\n      // ignore\n    }\n  } else if (element != null) {\n    try {\n      element.focus();\n    } catch (err) {\n      // ignore\n    }\n  }\n}\n\nfunction focusFirstInScope(scope: Element[], tabbable:boolean = true) {\n  let sentinel = scope[0].previousElementSibling;\n  let walker = getFocusableTreeWalker(getScopeRoot(scope), {tabbable}, scope);\n  walker.currentNode = sentinel;\n  let nextNode = walker.nextNode();\n\n  // If the scope does not contain a tabbable element, use the first focusable element.\n  if (tabbable && !nextNode) {\n    walker = getFocusableTreeWalker(getScopeRoot(scope), {tabbable: false}, scope);\n    walker.currentNode = sentinel;\n    nextNode = walker.nextNode();\n  }\n\n  focusElement(nextNode as FocusableElement);\n}\n\nfunction useAutoFocus(scopeRef: RefObject<Element[]>, autoFocus: boolean) {\n  const autoFocusRef = React.useRef(autoFocus);\n  useEffect(() => {\n    if (autoFocusRef.current) {\n      activeScope = scopeRef;\n      if (!isElementInScope(document.activeElement, activeScope.current)) {\n        focusFirstInScope(scopeRef.current);\n      }\n    }\n    autoFocusRef.current = false;\n  }, [scopeRef]);\n}\n\nfunction useRestoreFocus(scopeRef: RefObject<Element[]>, restoreFocus: boolean, contain: boolean) {\n  // create a ref during render instead of useLayoutEffect so the active element is saved before a child with autoFocus=true mounts.\n  const nodeToRestoreRef = useRef(typeof document !== 'undefined' ? document.activeElement as FocusableElement : null);\n\n  // restoring scopes should all track if they are active regardless of contain, but contain already tracks it plus logic to contain the focus\n  // restoring-non-containing scopes should only care if they become active so they can perform the restore\n  useLayoutEffect(() => {\n    let scope = scopeRef.current;\n    if (!restoreFocus || contain) {\n      return;\n    }\n\n    let onFocus = () => {\n      // If focusing an element in a child scope of the currently active scope, the child becomes active.\n      // Moving out of the active scope to an ancestor is not allowed.\n      if (!activeScope || isAncestorScope(activeScope, scopeRef)) {\n        activeScope = scopeRef;\n      }\n    };\n\n    document.addEventListener('focusin', onFocus, false);\n    scope.forEach(element => element.addEventListener('focusin', onFocus, false));\n    return () => {\n      document.removeEventListener('focusin', onFocus, false);\n      scope.forEach(element => element.removeEventListener('focusin', onFocus, false));\n    };\n  }, [scopeRef, contain]);\n\n  // useLayoutEffect instead of useEffect so the active element is saved synchronously instead of asynchronously.\n  useLayoutEffect(() => {\n    focusScopeTree.getTreeNode(scopeRef).nodeToRestore = nodeToRestoreRef.current;\n    if (!restoreFocus) {\n      return;\n    }\n\n    // Handle the Tab key so that tabbing out of the scope goes to the next element\n    // after the node that had focus when the scope mounted. This is important when\n    // using portals for overlays, so that focus goes to the expected element when\n    // tabbing out of the overlay.\n    let onKeyDown = (e: KeyboardEvent) => {\n      if (e.key !== 'Tab' || e.altKey || e.ctrlKey || e.metaKey) {\n        return;\n      }\n\n      let focusedElement = document.activeElement as FocusableElement;\n      if (!isElementInScope(focusedElement, scopeRef.current)) {\n        return;\n      }\n      let nodeToRestore = focusScopeTree.getTreeNode(scopeRef).nodeToRestore;\n\n      // Create a DOM tree walker that matches all tabbable elements\n      let walker = getFocusableTreeWalker(document.body, {tabbable: true});\n\n      // Find the next tabbable element after the currently focused element\n      walker.currentNode = focusedElement;\n      let nextElement = (e.shiftKey ? walker.previousNode() : walker.nextNode()) as FocusableElement;\n\n      if (!document.body.contains(nodeToRestore) || nodeToRestore === document.body) {\n        nodeToRestore = null;\n        focusScopeTree.getTreeNode(scopeRef).nodeToRestore = null;\n      }\n\n      // If there is no next element, or it is outside the current scope, move focus to the\n      // next element after the node to restore to instead.\n      if ((!nextElement || !isElementInScope(nextElement, scopeRef.current)) && nodeToRestore) {\n        walker.currentNode = nodeToRestore;\n\n        // Skip over elements within the scope, in case the scope immediately follows the node to restore.\n        do {\n          nextElement = (e.shiftKey ? walker.previousNode() : walker.nextNode()) as FocusableElement;\n        } while (isElementInScope(nextElement, scopeRef.current));\n\n        e.preventDefault();\n        e.stopPropagation();\n        if (nextElement) {\n          focusElement(nextElement, true);\n        } else {\n           // If there is no next element and the nodeToRestore isn't within a FocusScope (i.e. we are leaving the top level focus scope)\n           // then move focus to the body.\n           // Otherwise restore focus to the nodeToRestore (e.g menu within a popover -> tabbing to close the menu should move focus to menu trigger)\n          if (!isElementInAnyScope(nodeToRestore)) {\n            focusedElement.blur();\n          } else {\n            focusElement(nodeToRestore, true);\n          }\n        }\n      }\n    };\n\n    if (!contain) {\n      document.addEventListener('keydown', onKeyDown, true);\n    }\n\n    return () => {\n      if (!contain) {\n        document.removeEventListener('keydown', onKeyDown, true);\n      }\n      let nodeToRestore = focusScopeTree.getTreeNode(scopeRef).nodeToRestore;\n\n      // if we already lost focus to the body and this was the active scope, then we should attempt to restore\n      if (\n        restoreFocus\n        && nodeToRestore\n        && (\n          isElementInScope(document.activeElement, scopeRef.current)\n          || (document.activeElement === document.body && activeScope === scopeRef)\n        )\n      ) {\n        // freeze the focusScopeTree so it persists after the raf, otherwise during unmount nodes are removed from it\n        let clonedTree = focusScopeTree.clone();\n        requestAnimationFrame(() => {\n          // Only restore focus if we've lost focus to the body, the alternative is that focus has been purposefully moved elsewhere\n          if (document.activeElement === document.body) {\n            // look up the tree starting with our scope to find a nodeToRestore still in the DOM\n            let treeNode = clonedTree.getTreeNode(scopeRef);\n            while (treeNode) {\n              if (treeNode.nodeToRestore && document.body.contains(treeNode.nodeToRestore)) {\n                focusElement(treeNode.nodeToRestore);\n                return;\n              }\n              treeNode = treeNode.parent;\n            }\n          }\n        });\n      }\n    };\n  }, [scopeRef, restoreFocus, contain]);\n}\n\n/**\n * Create a [TreeWalker]{@link https://developer.mozilla.org/en-US/docs/Web/API/TreeWalker}\n * that matches all focusable/tabbable elements.\n */\nexport function getFocusableTreeWalker(root: Element, opts?: FocusManagerOptions, scope?: Element[]) {\n  let selector = opts?.tabbable ? TABBABLE_ELEMENT_SELECTOR : FOCUSABLE_ELEMENT_SELECTOR;\n  let walker = document.createTreeWalker(\n    root,\n    NodeFilter.SHOW_ELEMENT,\n    {\n      acceptNode(node) {\n        // Skip nodes inside the starting node.\n        if (opts?.from?.contains(node)) {\n          return NodeFilter.FILTER_REJECT;\n        }\n\n        if ((node as Element).matches(selector)\n          && isElementVisible(node as Element)\n          && (!scope || isElementInScope(node as Element, scope))\n          && (!opts?.accept || opts.accept(node as Element))\n        ) {\n          return NodeFilter.FILTER_ACCEPT;\n        }\n\n        return NodeFilter.FILTER_SKIP;\n      }\n    }\n  );\n\n  if (opts?.from) {\n    walker.currentNode = opts.from;\n  }\n\n  return walker;\n}\n\n/**\n * Creates a FocusManager object that can be used to move focus within an element.\n */\nexport function createFocusManager(ref: RefObject<Element>, defaultOptions: FocusManagerOptions = {}): FocusManager {\n  return {\n    focusNext(opts: FocusManagerOptions = {}) {\n      let root = ref.current;\n      if (!root) {\n        return;\n      }\n      let {from, tabbable = defaultOptions.tabbable, wrap = defaultOptions.wrap, accept = defaultOptions.accept} = opts;\n      let node = from || document.activeElement;\n      let walker = getFocusableTreeWalker(root, {tabbable, accept});\n      if (root.contains(node)) {\n        walker.currentNode = node;\n      }\n      let nextNode = walker.nextNode() as FocusableElement;\n      if (!nextNode && wrap) {\n        walker.currentNode = root;\n        nextNode = walker.nextNode() as FocusableElement;\n      }\n      if (nextNode) {\n        focusElement(nextNode, true);\n      }\n      return nextNode;\n    },\n    focusPrevious(opts: FocusManagerOptions = defaultOptions) {\n      let root = ref.current;\n      if (!root) {\n        return;\n      }\n      let {from, tabbable = defaultOptions.tabbable, wrap = defaultOptions.wrap, accept = defaultOptions.accept} = opts;\n      let node = from || document.activeElement;\n      let walker = getFocusableTreeWalker(root, {tabbable, accept});\n      if (root.contains(node)) {\n        walker.currentNode = node;\n      } else {\n        let next = last(walker);\n        if (next) {\n          focusElement(next, true);\n        }\n        return next;\n      }\n      let previousNode = walker.previousNode() as FocusableElement;\n      if (!previousNode && wrap) {\n        walker.currentNode = root;\n        previousNode = last(walker);\n      }\n      if (previousNode) {\n        focusElement(previousNode, true);\n      }\n      return previousNode;\n    },\n    focusFirst(opts = defaultOptions) {\n      let root = ref.current;\n      if (!root) {\n        return;\n      }\n      let {tabbable = defaultOptions.tabbable, accept = defaultOptions.accept} = opts;\n      let walker = getFocusableTreeWalker(root, {tabbable, accept});\n      let nextNode = walker.nextNode() as FocusableElement;\n      if (nextNode) {\n        focusElement(nextNode, true);\n      }\n      return nextNode;\n    },\n    focusLast(opts = defaultOptions) {\n      let root = ref.current;\n      if (!root) {\n        return;\n      }\n      let {tabbable = defaultOptions.tabbable, accept = defaultOptions.accept} = opts;\n      let walker = getFocusableTreeWalker(root, {tabbable, accept});\n      let next = last(walker);\n      if (next) {\n        focusElement(next, true);\n      }\n      return next;\n    }\n  };\n}\n\nfunction last(walker: TreeWalker) {\n  let next: FocusableElement;\n  let last: FocusableElement;\n  do {\n    last = walker.lastChild() as FocusableElement;\n    if (last) {\n      next = last;\n    }\n  } while (last);\n  return next;\n}\n\n\nclass Tree {\n  private root: TreeNode;\n  private fastMap = new Map<ScopeRef, TreeNode>();\n\n  constructor() {\n    this.root = new TreeNode({scopeRef: null});\n    this.fastMap.set(null, this.root);\n  }\n\n  get size() {\n    return this.fastMap.size;\n  }\n\n  getTreeNode(data: ScopeRef) {\n    return this.fastMap.get(data);\n  }\n\n  addTreeNode(scopeRef: ScopeRef, parent: ScopeRef, nodeToRestore?: FocusableElement) {\n    let parentNode = this.fastMap.get(parent ?? null);\n    let node = new TreeNode({scopeRef});\n    parentNode.addChild(node);\n    node.parent = parentNode;\n    this.fastMap.set(scopeRef, node);\n    if (nodeToRestore) {\n      node.nodeToRestore = nodeToRestore;\n    }\n  }\n\n  removeTreeNode(scopeRef: ScopeRef) {\n    // never remove the root\n    if (scopeRef === null) {\n      return;\n    }\n    let node = this.fastMap.get(scopeRef);\n    let parentNode = node.parent;\n    // when we remove a scope, check if any sibling scopes are trying to restore focus to something inside the scope we're removing\n    // if we are, then replace the siblings restore with the restore from the scope we're removing\n    for (let current of this.traverse()) {\n      if (\n        current !== node &&\n        node.nodeToRestore &&\n        current.nodeToRestore &&\n        node.scopeRef.current &&\n        isElementInScope(current.nodeToRestore, node.scopeRef.current)\n      ) {\n        current.nodeToRestore = node.nodeToRestore;\n      }\n    }\n    let children = node.children;\n    parentNode.removeChild(node);\n    if (children.length > 0) {\n      children.forEach(child => parentNode.addChild(child));\n    }\n    this.fastMap.delete(node.scopeRef);\n  }\n\n  // Pre Order Depth First\n  *traverse(node: TreeNode = this.root): Generator<TreeNode> {\n    if (node.scopeRef != null) {\n      yield node;\n    }\n    if (node.children.length > 0) {\n      for (let child of node.children) {\n        yield* this.traverse(child);\n      }\n    }\n  }\n\n  clone(): Tree {\n    let newTree = new Tree();\n    for (let node of this.traverse()) {\n      newTree.addTreeNode(node.scopeRef, node.parent.scopeRef, node.nodeToRestore);\n    }\n    return newTree;\n  }\n}\n\nclass TreeNode {\n  public scopeRef: ScopeRef;\n  public nodeToRestore: FocusableElement;\n  public parent: TreeNode;\n  public children: TreeNode[] = [];\n  public contain = false;\n\n  constructor(props: {scopeRef: ScopeRef}) {\n    this.scopeRef = props.scopeRef;\n  }\n  addChild(node: TreeNode) {\n    this.children.push(node);\n    node.parent = this;\n  }\n  removeChild(node: TreeNode) {\n    this.children.splice(this.children.indexOf(node), 1);\n    node.parent = undefined;\n  }\n}\n\nexport let focusScopeTree = new Tree();\n","import {DOMAttributes} from '@react-types/shared';\nimport {isFocusVisible, useFocus, useFocusVisibleListener, useFocusWithin} from '@react-aria/interactions';\nimport {useCallback, useState} from 'react';\nimport {useRef} from 'react';\n\nexport interface AriaFocusRingProps {\n  /**\n   * Whether to show the focus ring when something\n   * inside the container element has focus (true), or\n   * only if the container itself has focus (false).\n   * @default 'false'\n   */\n  within?: boolean,\n\n  /** Whether the element is a text input. */\n  isTextInput?: boolean,\n\n  /** Whether the element will be auto focused. */\n  autoFocus?: boolean\n}\n\nexport interface FocusRingAria {\n  /** Whether the element is currently focused. */\n  isFocused: boolean,\n\n  /** Whether keyboard focus should be visible. */\n  isFocusVisible: boolean,\n\n  /** Props to apply to the container element with the focus ring. */\n  focusProps: DOMAttributes\n}\n\n/**\n * Determines whether a focus ring should be shown to indicate keyboard focus.\n * Focus rings are visible only when the user is interacting with a keyboard,\n * not with a mouse, touch, or other input methods.\n */\nexport function useFocusRing(props: AriaFocusRingProps = {}): FocusRingAria {\n  let {\n    autoFocus = false,\n    isTextInput,\n    within\n  } = props;\n  let state = useRef({\n    isFocused: false,\n    isFocusVisible: autoFocus || isFocusVisible()\n  });\n  let [isFocused, setFocused] = useState(false);\n  let [isFocusVisibleState, setFocusVisible] = useState(() => state.current.isFocused && state.current.isFocusVisible);\n\n  let updateState = useCallback(() => setFocusVisible(state.current.isFocused && state.current.isFocusVisible), []);\n\n  let onFocusChange = useCallback(isFocused => {\n    state.current.isFocused = isFocused;\n    setFocused(isFocused);\n    updateState();\n  }, [updateState]);\n\n  useFocusVisibleListener((isFocusVisible) => {\n    state.current.isFocusVisible = isFocusVisible;\n    updateState();\n  }, [], {isTextInput});\n\n  let {focusProps} = useFocus({\n    isDisabled: within,\n    onFocusChange\n  });\n\n  let {focusWithinProps} = useFocusWithin({\n    isDisabled: !within,\n    onFocusWithinChange: onFocusChange\n  });\n\n  return {\n    isFocused,\n    isFocusVisible: state.current.isFocused && isFocusVisibleState,\n    focusProps: within ? focusWithinProps : focusProps\n  };\n}\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {DOMAttributes, FocusableDOMProps, FocusableElement, FocusableProps} from '@react-types/shared';\nimport {focusSafely} from './';\nimport {mergeProps, useSyncRef} from '@react-aria/utils';\nimport React, {MutableRefObject, ReactNode, RefObject, useContext, useEffect, useRef} from 'react';\nimport {useFocus, useKeyboard} from '@react-aria/interactions';\n\nexport interface FocusableOptions extends FocusableProps, FocusableDOMProps {\n  /** Whether focus should be disabled. */\n  isDisabled?: boolean\n}\n\nexport interface FocusableProviderProps extends DOMAttributes {\n  /** The child element to provide DOM props to. */\n  children?: ReactNode\n}\n\ninterface FocusableContextValue extends FocusableProviderProps {\n  ref?: MutableRefObject<FocusableElement>\n}\n\nlet FocusableContext = React.createContext<FocusableContextValue>(null);\n\nfunction useFocusableContext(ref: RefObject<FocusableElement>): FocusableContextValue {\n  let context = useContext(FocusableContext) || {};\n  useSyncRef(context, ref);\n\n  // eslint-disable-next-line\n  let {ref: _, ...otherProps} = context;\n  return otherProps;\n}\n\n/**\n * Provides DOM props to the nearest focusable child.\n */\nfunction FocusableProvider(props: FocusableProviderProps, ref: RefObject<FocusableElement>) {\n  let {children, ...otherProps} = props;\n  let context = {\n    ...otherProps,\n    ref\n  };\n\n  return (\n    <FocusableContext.Provider value={context}>\n      {children}\n    </FocusableContext.Provider>\n  );\n}\n\nlet _FocusableProvider = React.forwardRef(FocusableProvider);\nexport {_FocusableProvider as FocusableProvider};\n\nexport interface FocusableAria {\n  /** Props for the focusable element. */\n  focusableProps: DOMAttributes\n}\n\n/**\n * Used to make an element focusable and capable of auto focus.\n */\nexport function useFocusable(props: FocusableOptions, domRef: RefObject<FocusableElement>): FocusableAria {\n  let {focusProps} = useFocus(props);\n  let {keyboardProps} = useKeyboard(props);\n  let interactions = mergeProps(focusProps, keyboardProps);\n  let domProps = useFocusableContext(domRef);\n  let interactionProps = props.isDisabled ? {} : domProps;\n  let autoFocusRef = useRef(props.autoFocus);\n\n  useEffect(() => {\n    if (autoFocusRef.current && domRef.current) {\n      focusSafely(domRef.current);\n    }\n    autoFocusRef.current = false;\n  }, [domRef]);\n\n  return {\n    focusableProps: mergeProps(\n      {\n        ...interactions,\n        tabIndex: props.excludeFromTabOrder && !props.isDisabled ? -1 : undefined\n      },\n      interactionProps\n    )\n  };\n}\n","import React from 'react';\nimport {\n  FocusScope as AriaFocusScope,\n  useFocusManager,\n} from '@react-aria/focus';\nimport type { FocusScopeProps } from './FocusScope';\nconst FocusScope = ({ children, contain, ...props }: FocusScopeProps) => {\n  /* Todo: stoping mounted and unMounted everytime contain is change */\n  if (contain === false) return <></>;\n\n  return (\n    <AriaFocusScope contain={contain} {...props}>\n      {children}\n    </AriaFocusScope>\n  );\n};\n\nexport { FocusScope, useFocusManager };\n","import React, { forwardRef, memo } from 'react';\nimport { Pressable as RNPressable } from 'react-native';\nimport { composeEventHandlers } from '../../../utils';\nimport type { IPressableProps } from './types';\nimport { useHasResponsiveProps } from '../../../hooks/useHasResponsiveProps';\nimport { makeStyledComponent } from '../../../utils/styled';\nimport { usePropsResolution } from '../../../hooks/useThemeProps';\nimport { useFocusRing } from '@react-native-aria/focus';\n\nexport const useHover = () => {\n  const [isHovered, setHovered] = React.useState(false);\n  return {\n    hoverProps: {\n      onHoverIn: () => setHovered(true),\n      onHoverOut: () => setHovered(false),\n    },\n    isHovered,\n  };\n};\n\nexport const useFocus = () => {\n  const [isFocused, setFocused] = React.useState(false);\n  return {\n    focusProps: {\n      onFocus: () => setFocused(true),\n      onBlur: () => setFocused(false),\n    },\n    isFocused,\n  };\n};\n\nexport const useIsPressed = () => {\n  const [isPressed, setIsPressed] = React.useState(false);\n  return {\n    pressableProps: {\n      onPressIn: () => setIsPressed(true),\n      onPressOut: () => setIsPressed(false),\n    },\n    isPressed,\n  };\n};\n\nconst StyledPressable = makeStyledComponent(RNPressable);\n\nconst Pressable = (\n  {\n    children,\n    isDisabled,\n    disabled,\n    isHovered: isHoveredProp,\n    isPressed: isPressedProp,\n    isFocused: isFocusedProp,\n    isFocusVisible: isFocusVisibleProp,\n    ...props\n  }: IPressableProps,\n  ref: any\n) => {\n  const { hoverProps, isHovered } = useHover();\n  const { pressableProps, isPressed } = useIsPressed();\n  const { focusProps, isFocused } = useFocus();\n  const { isFocusVisible, focusProps: focusRingProps }: any = useFocusRing();\n\n  const {\n    onPressIn,\n    onPressOut,\n    onHoverIn,\n    onHoverOut,\n    onFocus,\n    onBlur,\n    ...resolvedProps\n  } = usePropsResolution('Pressable', props, {\n    isPressed: isPressedProp || isPressed,\n    isFocused: isFocusedProp || isFocused,\n    isHovered: isHoveredProp || isHovered,\n    isFocusVisible: isFocusVisibleProp || isFocusVisible,\n    isDisabled: disabled || isDisabled,\n  });\n\n  // TODO: Replace Render props with Context Hook\n\n  //TODO: refactor for responsive prop\n  if (useHasResponsiveProps(props)) {\n    return null;\n  }\n\n  // TODO: Replace Render props with Context Hook\n  return (\n    <StyledPressable\n      ref={ref}\n      onPressIn={composeEventHandlers(onPressIn, pressableProps.onPressIn)}\n      onPressOut={composeEventHandlers(onPressOut, pressableProps.onPressOut)}\n      // @ts-ignore - web only\n      onHoverIn={composeEventHandlers(onHoverIn, hoverProps.onHoverIn)}\n      // @ts-ignore - web only\n      onHoverOut={composeEventHandlers(onHoverOut, hoverProps.onHoverOut)}\n      // @ts-ignore - web only\n      onFocus={composeEventHandlers(\n        composeEventHandlers(onFocus, focusProps.onFocus),\n        focusRingProps.onFocus\n      )}\n      // @ts-ignore - web only\n      onBlur={composeEventHandlers(\n        composeEventHandlers(onBlur, focusProps.onBlur),\n        focusRingProps.onBlur\n      )}\n      disabled={disabled || isDisabled}\n      {...resolvedProps}\n    >\n      {typeof children !== 'function'\n        ? children\n        : children({\n            isPressed,\n            isHovered,\n            isFocused,\n          })}\n    </StyledPressable>\n  );\n};\n\nexport default memo(forwardRef(Pressable));\n","import React, { memo, forwardRef } from 'react';\nimport StackMain, { InterfaceStackProps } from './Stack';\nimport { usePropsResolution } from '../../../hooks/useThemeProps';\nimport type {\n  CustomProps,\n  ResponsiveValue,\n  // ThemeComponentSizeType,\n} from '../../types';\nimport { useHasResponsiveProps } from '../../../hooks/useHasResponsiveProps';\nexport interface InterfaceHStackProps extends InterfaceStackProps {\n  /**\n   * The direction of the Stack Items.\n   * @default row\n   */\n  direction?: ResponsiveValue<\n    'column' | 'row' | 'column-reverse' | 'row-reverse'\n  >;\n}\n\nexport type IHStackProps = InterfaceHStackProps & CustomProps<'HStack'>;\n\nconst HStack = (props: IHStackProps, ref?: any) => {\n  const resolvedProps = usePropsResolution('HStack', props);\n  //TODO: refactor for responsive prop\n  if (useHasResponsiveProps(props)) {\n    return null;\n  }\n  return <StackMain ref={ref} direction=\"row\" {...resolvedProps} />;\n};\n\nexport default memo(forwardRef(HStack));\n"],"names":["$6a99195332edec8b$export$80f3e147d781571c","element","$6nfFC$getInteractionModality","lastFocusedElement","document","activeElement","$6nfFC$runAfterTransition","contains","$6nfFC$focusWithoutScrolling","$645f2e67b85a24c9$export$e989c0fffaa6b27a","childElement","nodeName","HTMLElement","SVGElement","style","display","visibility","isVisible","getComputedStyle","ownerDocument","defaultView","computedDisplay","computedVisibility","$645f2e67b85a24c9$var$isStyleVisible","hasAttribute","$645f2e67b85a24c9$var$isAttributeVisible","parentElement","$9bf71ea28793e738$var$FocusContext","$6nfFC$react","$9bf71ea28793e738$var$activeScope","$9bf71ea28793e738$export$20e40289641fbbb6","props","ref","children","contain","restoreFocus","autoFocus","startRef","$6nfFC$useRef","endRef","scopeRef","ctx","$6nfFC$useContext","parentScope","$6nfFC$useLayoutEffect","node","current","nextSibling","nodes","push","$9bf71ea28793e738$export$d06fae2ee68b101e","getTreeNode","addTreeNode","focusedNode","raf","scope1","onKeyDown","e","key","altKey","ctrlKey","metaKey","$9bf71ea28793e738$var$shouldContainFocus","focusedElement","scope","$9bf71ea28793e738$var$isElementInScope","walker","$9bf71ea28793e738$export$2d6ec8fc375ceafa","$9bf71ea28793e738$var$getScopeRoot","tabbable","currentNode","nextElement","shiftKey","previousNode","nextNode","length","nextElementSibling","previousElementSibling","preventDefault","$9bf71ea28793e738$var$focusElement","onFocus","$9bf71ea28793e738$var$isAncestorScope","target","$9bf71ea28793e738$var$isElementInChildScope","focus","$9bf71ea28793e738$var$focusFirstInScope","onBlur","requestAnimationFrame","body","addEventListener","forEach","removeEventListener","cancelAnimationFrame","$6nfFC$useEffect","$9bf71ea28793e738$var$useFocusContainment","nodeToRestoreRef","nodeToRestore","stopPropagation","blur","clonedTree","clone","treeNode","parent","$9bf71ea28793e738$var$useRestoreFocus","autoFocusRef","$9bf71ea28793e738$var$useAutoFocus","removeTreeNode","focusManager","focusNext","opts","from","wrap","accept","sentinel","focusPrevious","focusFirst","focusLast","$9bf71ea28793e738$var$createFocusManagerForScope","Provider","value","hidden","$9bf71ea28793e738$var$focusableElements","$9bf71ea28793e738$var$FOCUSABLE_ELEMENT_SELECTOR","join","$9bf71ea28793e738$var$TABBABLE_ELEMENT_SELECTOR","some","traverse","s","ancestor","scroll","err1","err","root","selector","createTreeWalker","NodeFilter","SHOW_ELEMENT","acceptNode","FILTER_REJECT","matches","FILTER_SKIP","FILTER_ACCEPT","$9bf71ea28793e738$var$Tree","fastMap","Map","this","$9bf71ea28793e738$var$TreeNode","set","size","data","get","parentNode","addChild","removeChild","child","delete","newTree","splice","indexOf","undefined","$f7dceffc5ad7768b$export$4e328f61c538687f","isTextInput","within","state","isFocused","isFocusVisible","$6nfFC$isFocusVisible","$6nfFC$useState","isFocused1","setFocused","isFocusVisibleState","setFocusVisible","updateState","$6nfFC$useCallback","onFocusChange","$6nfFC$useFocusVisibleListener","$6nfFC$useFocus","isDisabled","focusProps","$6nfFC$useFocusWithin","onFocusWithinChange","focusWithinProps","$e6afbd83fe6ebbd2$var$FocusableContext","$e6afbd83fe6ebbd2$export$4c014de7c8940b4c","domRef","keyboardProps","$6nfFC$useKeyboard","interactions","$6nfFC$mergeProps","domProps","context","$6nfFC$useSyncRef","$e6afbd83fe6ebbd2$var$useFocusableContext","interactionProps","focusableProps","tabIndex","excludeFromTabOrder","FocusScope","React","AriaFocusScope","useHover","isHovered","setHovered","hoverProps","onHoverIn","onHoverOut","useFocus","useIsPressed","isPressed","setIsPressed","pressableProps","onPressIn","onPressOut","StyledPressable","makeStyledComponent","RNPressable","Pressable","disabled","isHoveredProp","isPressedProp","isFocusedProp","isFocusVisibleProp","useFocusRing","focusRingProps","usePropsResolution","resolvedProps","useHasResponsiveProps","composeEventHandlers","memo","forwardRef","HStack","StackMain","direction"],"sourceRoot":""}